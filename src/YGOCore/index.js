class t{constructor(){this.commandId=-1,this.parent=null}init(t){this.YGO=t,this.commandId=this.YGO.getNextCommandId(),this.timestamp=this.YGO.getCurrentTime()}getCommandId(){var t;return(null===(t=this.parent)||void 0===t?void 0:t.commandId)||this.commandId}execChildCommand(t){return t.parent=this.parent?this.parent:this,t.init(this.YGO),t.exec(),t}undoChildCommand(t){return null==t||t.undo(),t}undoMultipleChildCommand(t){var e;for(let a=t.length-1;a>=0;--a)null===(e=t[a])||void 0===e||e.undo()}execMultipleChildCommand(t){for(const e of t)this.execChildCommand(e)}isValid(){return!0}exec(){}undo(){}toJSON(){const t=this.data||{};return{type:this.baseType,data:t}}toCommandData(){const t=this.data||{};return{commandId:this.commandId,timestamp:this.timestamp,type:this.baseType,data:t}}}var e,a,i;!function(t){var e;(e=t.LogType||(t.LogType={})).NormalSummon="Normal Summon",e.SetMonster="Set Monster",e.SendToGY="Send To GY",e.Banish="Banish",e.BanishFD="Banish FD",e.StartHand="Start Hand",e.DrawCardFromDeck="Draw From Deck",e.MillCardFromDeck="Mill From Deck",e.TributeSummon="Tribute Summon",e.TributeSet="Tribute Set",e.ToHand="To Hand",e.ToExtraDeck="To Extra Deck",e.ToTopDeck="To Top Deck",e.ToBottomDeck="To Bottom Deck",e.Destroy="Destroy",e.SpecialSummon="Special Summon",e.SynchroSummon="Synchro Summon",e.LinkSummon="Link Summon",e.FusionSummon="Fusion Summon",e.XYZSummon="XYZ Summon",e.XYZOverlaySummon="XYZ Overlay Summon",e.XYZAttachMaterial="XYZ Attach Material",e.XYZDetachMaterial="XYZ Detach Material",e.XYZOverlay="XYZOverlay",e.SetST="Set ST",e.Activate="Activate",e.MoveCard="Move Card",e.Shuffle="Shuffle",e.ToST="To ST",e.Reveal="Reveal",e.Target="Target",e.FieldSpell="Field Spell",e.ChangeCardPosition="Change Card Position",e.ChangeCardAtkDef="Change Card Atk Def",e.Flip="Flip"}(e||(e={})),function(t){t[t.NormalMonster=0]="NormalMonster",t[t.EffectMonster=1]="EffectMonster",t[t.RitualMonster=2]="RitualMonster",t[t.Spell=3]="Spell",t[t.Trap=4]="Trap",t[t.FusionMonster=5]="FusionMonster",t[t.SynchroMonster=6]="SynchroMonster",t[t.XYZMonster=7]="XYZMonster",t[t.LinkMonster=8]="LinkMonster"}(a||(a={})),function(t){t.DrawPhase="Draw Phase",t.StandbyPhase="Standby Phase",t.MainPhase1="Main Phase 1",t.BattlePhase="Battle Phase",t.MainPhase2="Main Phase 2",t.EndPhase="End Phase"}(i||(i={}));class s{static isLinkMonster(t){var e;return null===(e=t.typeline)||void 0===e?void 0:e.includes("Link")}static isMonster(t){var e;return null===(e=t.type)||void 0===e?void 0:e.includes("Monster")}static isXYZMonster(t){var e;return null===(e=t.typeline)||void 0===e?void 0:e.includes("Xyz")}static isSynchroMonster(t){var e;return null===(e=t.typeline)||void 0===e?void 0:e.includes("Synchro")}static isFusionMonster(t){var e;return null===(e=t.typeline)||void 0===e?void 0:e.includes("Fusion")}static isPendulumCard(t){var e;return null===(e=t.frameType)||void 0===e?void 0:e.includes("pendulum")}static isFaceUp(t){return t.position.includes("faceup")}static isFaceDown(t){return!this.isFaceUp(t)}static isSpellTrap(t){return this.isSpell(t)||this.isTrap(t)}static isSpell(t){return t.frameType.startsWith("spell")}static isTrap(t){return t.frameType.startsWith("trap")}static isFieldSpell(t){return"Field"===t.race}static isDefense(t){return"facedown"===t.position||"faceup-defense"===t.position}static isAttack(t){return"faceup-attack"===t.position||"faceup"===t.position}static hasLinkMonstersInField(t){return!!t.monsterZone.some((t=>!!t&&s.isLinkMonster(t)))||t.extraMonsterZone.some((t=>!!t&&s.isLinkMonster(t)))}static hasXyzMonstersInField(t){return!!t.monsterZone.some((t=>!!t&&s.isXYZMonster(t)))||t.extraMonsterZone.some((t=>!!t&&s.isXYZMonster(t)))}static XyzMonstersInFieldCounter(t){let e=0;return t.monsterZone.forEach((t=>{t&&s.isXYZMonster(t)&&e++})),t.extraMonsterZone.forEach((t=>{t&&s.isXYZMonster(t)&&e++})),e}static XyzMonstersInFieldsCounter(t){let e=0;return t.state.fields.forEach((t=>{t.monsterZone.forEach((t=>{t&&s.isXYZMonster(t)&&e++})),t.extraMonsterZone.forEach((t=>{t&&s.isXYZMonster(t)&&e++}))})),e}static getPlayerIndexFromZone(t){if(t.includes("2-"))return 1;switch(t){case"M2":case"H2":case"F2":case"GY2":case"EMZ2-1":case"EMZ2-2":return 1;default:return 0}}static createZone(t,e,a){return void 0===a||-1===a?`${t}${0===e?"":"2"}`:`${t}${0===e?"":"2"}-${a}`}static createOverlayZone(t,e,a){return"EMZ"===t?`ORU${0===e?"":"2"}-${a}`:`ORUEMZ${0===e?"":"2"}-${a}`}static getZoneData(t){const e=t.split("-");let a=0,i=e[0];const s=e.length>1?Number(e[1]):-1;return e[0].endsWith("2")&&(a=1,i=i.substring(0,i.length-1)),{zone:i,player:a,zoneIndex:s}}static getCardBaseType(t){return t.frameType.startsWith("effect")?a.EffectMonster:t.frameType.startsWith("spell")?a.Spell:t.frameType.startsWith("ritual")?a.RitualMonster:t.frameType.startsWith("trap")?a.Trap:t.frameType.includes("fusion")?a.FusionMonster:t.frameType.includes("synchro")?a.SynchroMonster:t.frameType.includes("xyz")?a.XYZMonster:t.frameType.includes("link")?a.LinkMonster:a.NormalMonster}static getCardsBaseType(t){return t.map((t=>s.getCardBaseType(t)))}static toSortedCards(t){return this.sortCards([...t])}static sortCards(t){const e=t,a=s.getCardsBaseType(e);for(let t=0;t<e.length-1;++t)for(let i=0;i<e.length-t-1;++i)(a[i]>a[i+1]||a[i]===a[i+1]&&e[i].name>e[i+1].name)&&([e[i],e[i+1]]=[e[i+1],e[i]],[a[i],a[i+1]]=[a[i+1],a[i]]);return e}static shuffleCards(t){const e=Array(t.length);for(let a=0;a<t.length;++a){const i=Math.floor(Math.random()*t.length);e[a]=i;const s=t[a];t[a]=t[i],t[i]=s}return e}static invertPlayerInZone(t){const e=this.getZoneData(t);return this.createZone(e.zone,1-e.player,e.zoneIndex)}}class n extends t{constructor(t){super(),this.baseType="ActivateCardCommand",this.type="Activate",this.data=t}exec(){const t=this.YGO.state.getCardById(this.data.id,this.data.originZone||this.data.zone);this.data.originZone?(this.YGO.state.removeCard(this.data.originZone),this.YGO.state.setCard(t,this.data.zone),console.log(`Exec: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`)):console.log(`Exec: Activate ${this.data.id} in ${this.data.zone}`),this.prevPosition=t.position,s.isFaceDown(t)&&(s.isSpellTrap(t)?t.position="faceup":t.position="faceup-attack"),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.Activate,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,previousPosition:this.prevPosition,position:t.position})}undo(){const t=this.YGO.state.getCardById(this.data.id,this.data.zone);this.data.originZone?(this.YGO.state.removeCard(this.data.zone),this.YGO.state.setCard(t,this.data.originZone),console.log(`Undo: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`)):console.log(`Undo: Activate ${this.data.id} in ${this.data.zone}`),this.prevPosition&&(t.position=this.prevPosition)}}class o{static getPlayerIndexFromZone(t){return s.getPlayerIndexFromZone(t)}static parseMainDeck({mainDeck:t,player:e}){return t.map((t=>o.parseCard({card:t,player:e,isMainDeckCard:!0})))}static parseExtraDeck({extraDeck:t,player:e}){const a=t.map((t=>o.parseCard({card:t,player:e,isMainDeckCard:!1})));return s.sortCards(a),a}static parseCard({card:t,player:e,isMainDeckCard:a}){if(!t)throw new Error("card is required to be parsed");return t.owner=e,t.originalOwner=e,t.materials=[],t.isMainDeckCard=a,t.position="facedown",t}static getCardsInGame(t){const e=new Map;for(const a of t){for(const t of a.mainDeck)e.has(t.id)||e.set(t.id,t);for(const t of a.extraDeck)e.has(t.id)||e.set(t.id,t);for(const t of a.monsterZone)t&&!e.has(t.id)&&e.set(t.id,t);for(const t of a.spellTrapZone)t&&!e.has(t.id)&&e.set(t.id,t);for(const t of a.extraMonsterZone)t&&!e.has(t.id)&&e.set(t.id,t);for(const t of a.graveyard)t&&!e.has(t.id)&&e.set(t.id,t);for(const t of a.banishedZone)t&&!e.has(t.id)&&e.set(t.id,t)}return e}static getOverlayZone(t){const e=o.getPlayerIndexFromZone(t),a=t.split("-")[1];return t.startsWith("EMZ")?`ORUEMZ${0===e?"":"2"}-${a}`:`ORU${0===e?"":"2"}-${a}`}static initializePlayersFields(t){var e;const{shuffleDecks:a=!0}=t.options||{};let i=0;const n=[{lp:8e3,player:{name:"test"},mainDeck:[],extraDeck:[],hand:[],data:{mainDeckOrdered:[],extraDeckOrdered:[]},monsterZone:[null,null,null,null,null],spellTrapZone:[null,null,null,null,null],fieldZone:null,extraMonsterZone:[null,null],graveyard:[],banishedZone:[]},{lp:8e3,player:{name:"test2"},mainDeck:[],extraDeck:[],hand:[],data:{mainDeckOrdered:[],extraDeckOrdered:[]},monsterZone:[null,null,null,null,null],spellTrapZone:[null,null,null,null,null],fieldZone:null,extraMonsterZone:[null,null],graveyard:[],banishedZone:[]}];for(let e=0;e<t.players.length;++e){const a=t.players[e],s=n[e];s.mainDeck=o.parseMainDeck({mainDeck:a.mainDeck,player:e}),s.extraDeck=o.parseExtraDeck({extraDeck:a.extraDeck,player:e}),s.mainDeck.forEach((t=>t.index=++i)),s.extraDeck.forEach((t=>t.index=++i))}return a&&n.forEach(((e,a)=>{t.players[a]&&s.shuffleCards(e.mainDeck)})),n.forEach((t=>{t.data.mainDeckOrdered=t.mainDeck.map((t=>t.id)),t.data.extraDeckOrdered=t.extraDeck.map((t=>t.id))})),this.recoverFields(n,null===(e=t.options)||void 0===e?void 0:e.fieldState),n}static recoverFields(t,e){if(Array.isArray(e)){const a=[new Set,new Set],i=[new Set,new Set],n=(e,s)=>{const n=t[e].mainDeck.find((t=>t.id===s&&!a[e].has(t)));if(n)return a[e].add(n),n;const o=t[e].extraDeck.find((t=>t.id===s&&!i[e].has(t)));if(o)return i[e].add(o),o;throw new Error(`Card "${s}" not found in player "${e}" deck`)};for(let a=0;a<2;++a){const i=[],d=[],r=[];for(const h of e){const e=s.getZoneData(h.zone);if(e.player===a)if("H"===e.zone){const t=n(e.player,h.id);i.push({card:t,index:e.zoneIndex||0})}else if("M"===e.zone){const{position:a="faceup-attack"}=h,i=n(e.player,h.id);t[e.player].monsterZone[e.zoneIndex-1]=i,o.isNumeric(h.atk)&&(i.currentAtk=Number(h.atk)),o.isNumeric(h.def)&&(i.currentDef=Number(h.def)),a&&(i.position=a),h.materials&&(i.materials=h.materials.map((({id:t})=>n(e.player,t))))}else if("EMZ"===e.zone){const a=n(e.player,h.id);t[e.player].extraMonsterZone[e.zoneIndex-1]=a,o.isNumeric(h.atk)&&(a.currentAtk=Number(h.atk)),o.isNumeric(h.def)&&(a.currentDef=Number(h.def)),h.position&&(a.position=h.position),h.materials&&(a.materials=h.materials.map((({id:t})=>n(e.player,t))))}else if("S"===e.zone){const a=n(e.player,h.id);t[e.player].spellTrapZone[e.zoneIndex-1]=a,h.position&&(a.position=h.position)}else if("F"===e.zone){const a=n(e.player,h.id);t[e.player].fieldZone=a,h.position&&(a.position=h.position)}else if("GY"===e.zone){const t=n(e.player,h.id);d.push({card:t,index:e.zoneIndex||0})}else if("B"===e.zone){const t=n(e.player,h.id);r.push({card:t,index:e.zoneIndex||0})}else e.zone}i.length>0&&(t[a].hand=[...i].sort(((t,e)=>t.index-e.index)).map((t=>t.card))),d.length>0&&(t[a].graveyard=[...d].sort(((t,e)=>t.index-e.index)).map((t=>t.card))),r.length>0&&(t[a].hand=[...r].sort(((t,e)=>t.index-e.index)).map((t=>t.card)))}for(let e=0;e<t.length;++e)t[e].mainDeck=t[e].mainDeck.filter((t=>!a[e].has(t))),t[e].extraDeck=t[e].extraDeck.filter((t=>!a[e].has(t)))}}static isNumeric(t){return!isNaN(Number(t))}static getFieldsAsString(t){var e,a;const i=[];i.push("---- FIELD STATE ----");const s=t.getField(0),n=t.getField(1);return i.push("Player2: "+s.player.name),i.push("Hand: "+n.hand.map((t=>t.name)).join(" | ")),i.push("Spell/Trap Zone: "+n.spellTrapZone.map((t=>(null==t?void 0:t.name)||"_")).join(" | ")),i.push("Monster Zone: "+n.monsterZone.map((t=>(null==t?void 0:t.name)||"_")).join(" | ")),i.push("-------"),i.push("Extra Monster Zone: "+((null===(e=s.extraMonsterZone[0]||n.extraMonsterZone[0])||void 0===e?void 0:e.name)||"_")+" | "+((null===(a=s.extraMonsterZone[1]||n.extraMonsterZone[1])||void 0===a?void 0:a.name)||"_")),i.push("-------"),i.push("Monster Zone: "+s.monsterZone.map((t=>(null==t?void 0:t.name)||"_")).join(" | ")),i.push("Spell/Trap Zone: "+s.spellTrapZone.map((t=>(null==t?void 0:t.name)||"_")).join(" | ")),i.push("Hand: "+s.hand.map((t=>t.name)).join(" | ")),i.push("Player1: "+s.player.name),i.join("\n")}static getYGOCoreStateProps(t){return{players:t.state.fields.map((e=>({name:e.player.name,mainDeck:e.data.mainDeckOrdered.map((e=>t.state.getCardData(e))),extraDeck:e.data.extraDeckOrdered.map((e=>t.state.getCardData(e)))}))),commands:t.commands.map((t=>t.toJSON())),options:Object.assign(Object.assign({startCommand:t.commandIndex},t.props.options||{}),{shuffleDecks:!1,execCommands:!0})}}}class d extends t{constructor(t){super(),this.baseType="XYZMoveMaterialsCommand",this.type="XYZ Move Material",this.data=t,this.commands=[],this.materialsToMove=[],console.log("EXEC MATERIALS")}init(t){super.init(t);const a=this.YGO.state.getCardById(this.data.id,this.data.originZone);if(this.shouldMoveMaterials(a,this.data.originZone)){const t=o.getOverlayZone(this.data.originZone);this.materialsToMove=[],a.materials.forEach((a=>{const i=s.createZone(this.data.zone,a.originalOwner);this.YGO.state.setCard(a,i),this.materialsToMove.push({card:a,zone:i}),console.log(" ...................... "),console.log("MOVE",a.name,a.originalOwner," >> ZONE:",i),"GY"===this.data.zone&&this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.SendToGY,id:a.id,originZone:t,zone:i,reason:"XYZ Material"})})),console.log("MATERIALST OT MOVE",this.materialsToMove),a.materials=[]}}exec(){this.execMultipleChildCommand(this.commands)}undo(){this.undoMultipleChildCommand(this.commands);const t=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.materialsToMove.length>0&&this.materialsToMove.forEach((({zone:t})=>{this.YGO.state.setCard(null,t)})),t.materials=this.materialsToMove.map((({card:t})=>t))}shouldMoveMaterials(t,e){return!(!t.materials||0===t.materials.length)}}class r extends t{constructor(t){super(),this.baseType="MoveCardCommand";const e=t.type||"Move Card";this.type=e,this.data=t,this.commands=[],this.data.type=e}exec(){console.log(`Exec: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);const{log:t=!0}=this.data,e=this.YGO.state.getCardById(this.data.id,this.data.originZone),a=s.getZoneData(this.data.zone),i=this.YGO.getField(a.player);if(this.commands=[],"ED"!==this.data.zone&&"ED2"!==this.data.zone||(this.prevPosition=e.position,this.data.position=s.isPendulumCard(e)?"faceup":"facedown"),this.data.position&&(this.prevPosition=e.position,e.position=this.data.position),this.shouldMoveMaterials(e,a)&&this.commands.push(new d({player:this.data.player,id:this.data.id,originZone:this.data.originZone,zone:"GY"})),this.commands.length>0&&this.execMultipleChildCommand(this.commands),this.YGO.state.moveCard(e,this.data.originZone,this.data.zone),"ED"===a.zone){const t=i.extraDeck.findIndex((t=>t===e));-1!==t&&(this.data.zone=s.createZone(a.zone,a.player,t+1))}t&&this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,reason:this.data.reason,position:e.position})}undo(){console.log(`Undo: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);const t=this.YGO.state.getCardById(this.data.id,this.data.zone);this.prevPosition&&(t.position=this.prevPosition),this.YGO.state.moveCard(t,this.data.zone,this.data.originZone),this.commands.length>0&&(this.undoMultipleChildCommand(this.commands),this.commands=[])}shouldMoveMaterials(t,e){return!(!t.materials||0===t.materials.length)&&("GY"===e.zone||"B"===e.zone)}}class h extends t{constructor(t){super(),this.baseType="BanishCommand",this.data=t,this.data.position=this.data.position||"faceup",this.type="faceup"===this.data.position?"Banish":"Banish FD"}init(t){super.init(t);const e=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.zone=s.createZone("B",e.originalOwner,1),this.banishCommand=new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,position:this.data.position,zone:this.zone})}exec(){this.execChildCommand(this.banishCommand)}undo(){this.undoChildCommand(this.banishCommand)}}class m extends t{constructor(t){super(),this.type="Change Card Atk Def",this.data=t}exec(){const t=this.YGO.state.getCardById(this.data.id,this.data.zone);o.isNumeric(this.data.atk)&&(this.prevAtk=t.currentAtk,t.currentAtk=Number(this.data.atk)),o.isNumeric(this.data.def)&&(this.prevDef=t.currentDef,t.currentAtk=Number(this.data.def)),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.Activate,id:this.data.id,zone:this.data.zone,atk:o.isNumeric(this.data.atk)?Number(this.data.atk):null,def:o.isNumeric(this.data.def)?Number(this.data.def):null})}undo(){const t=this.YGO.state.getCardById(this.data.id,this.data.zone);this.prevAtk&&(t.currentAtk=this.prevAtk),this.prevDef&&(t.currentDef=this.prevDef)}}class l extends t{constructor(t){super(),this.baseType="ChangeCardPositionCommand",this.type="Change Card Position",this.data=t}exec(){const t=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.prevPosition=t.position,t.position=this.data.position,this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.ChangeCardPosition,id:this.data.id,originZone:this.data.originZone,previousPosition:this.prevPosition,position:this.data.position})}undo(){const t=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.prevPosition&&(t.position=this.prevPosition)}}class c extends t{constructor(t){super(),this.baseType="DestroyCardCommand",this.type="Destroy",this.data=t,this.zone=t.zone||s.createZone("GY",this.data.player,1),this.moveCardCommand=new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.zone})}exec(){this.execChildCommand(this.moveCardCommand)}undo(){this.undoChildCommand(this.moveCardCommand)}}class p extends t{constructor(t){super(),this.baseType="DrawFromDeckCommand",this.type="Draw From Deck",this.data=t,this.data.numberOfCards=this.data.numberOfCards||1,this.cards=[]}exec(){console.log(`Exec: Draw ${this.data.numberOfCards} from Deck`),this.cards=[];const t=this.YGO.state.fields[this.data.player];for(let a=0;a<this.data.numberOfCards;++a){const a=t.mainDeck.pop();console.log("DRAW",a.name),t.hand.push(a),this.cards.push(a);const i=s.createZone("D",this.data.player,t.mainDeck.length-1),n=s.createZone("H",this.data.player,t.hand.length);this.YGO.duelLog.dispatch({commandId:this.getCommandId(),player:this.data.player,type:e.LogType.DrawCardFromDeck,id:a.id,originZone:i,zone:n})}}undo(){console.log(`Undo: Draw ${this.data.numberOfCards} from Deck`);const t=[...this.cards].reverse(),e=this.YGO.state.fields[this.data.player];console.log("CARD DRAW UNDO"),console.log(t.map((t=>t.name))),console.log("DECK 1>>",e.mainDeck.length);for(const a of t){const t=e.hand.findIndex((t=>t===a));-1!==t&&e.hand.splice(t,1)}e.mainDeck.push(...t),console.log(e.hand.map((t=>t.name))),console.log("DECK 2>>",e.mainDeck.length)}}class u extends t{constructor(t){super(),this.baseType="RevealCommand",this.type="Reveal",this.data=t}exec(){this.YGO.duelLog.dispatch({type:e.LogType.Reveal,player:this.data.player,commandId:this.getCommandId(),id:this.data.id,originZone:this.data.originZone})}}class C extends t{constructor(t){super(),this.baseType="SendCardToGYCommand",this.type="Send To GY",this.data=t}init(t){super.init(t);const e=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.zone=this.data.zone||s.createZone("GY",e.originalOwner,1),this.moveCardCommand=new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,reason:this.data.reason,position:"faceup",zone:this.zone})}exec(){this.execChildCommand(this.moveCardCommand)}undo(){this.undoChildCommand(this.moveCardCommand)}}class y extends t{constructor(t){super(),this.baseType="FieldSpellCommand",this.type="Field Spell",this.data=t,this.data.position="facedown"===t.position?"facedown":"faceup",this.commands=[]}init(t){super.init(t);const e=this.YGO.getField(this.data.player).fieldZone;e&&this.commands.splice(0,1,new C({player:this.data.player,id:e.id,originZone:s.createZone("F",this.data.player)})),this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position})),this.data.reveal&&this.commands.push(new u({id:this.data.id,originZone:this.data.zone,player:this.data.player}))}exec(){this.execMultipleChildCommand(this.commands)}undo(){this.undoMultipleChildCommand(this.commands)}}class g extends t{constructor(t){super(),this.baseType="FlipCommand",this.type="Flip",this.data=t}exec(){const t=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.prevPosition=t.position,s.isFaceDown(t)?t.position="faceup-attack":t.position="faceup-defense",this.YGO.duelLog.dispatch({type:e.LogType.Flip,commandId:this.getCommandId(),player:this.data.player,id:this.data.id,originZone:this.data.originZone,previousPosition:this.prevPosition,position:t.position})}undo(){const t=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.prevPosition&&(t.position=this.prevPosition)}}class f extends t{constructor(t){super(),this.baseType="FusionSummonCommand",this.materials=[],this.type="Fusion Summon",this.data=t,this.data.position=this.data.position||"faceup-attack",this.commands=[]}init(t){super.init(t),this.materials=this.data.materials.map((t=>{const e=this.YGO.state.getCardById(t.id,t.zone);return this.commands.push(new C({player:this.data.player,id:t.id,originZone:t.zone,reason:"Fusion Summon"})),{id:t.id,zone:t.zone,owner:e.originalOwner}})),this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position,log:!1}))}exec(){this.execMultipleChildCommand(this.commands),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.FusionSummon,id:this.data.id,originZone:this.data.originZone,position:this.data.position,zone:this.data.zone,materials:this.materials})}undo(){this.undoMultipleChildCommand(this.commands)}}class Z extends t{constructor(t){super(),this.baseType="LinkSummonCommand",this.materials=[],this.type="Link Summon",this.data=t,this.position="faceup-attack",this.commands=[]}init(t){super.init(t),this.materials=this.data.materials.map((t=>{const e=this.YGO.state.getCardById(t.id,t.zone);return this.commands.push(new C({player:this.data.player,id:t.id,originZone:t.zone,reason:"Link Summon"})),{id:t.id,zone:t.zone,owner:e.originalOwner}}));const e=this.YGO.state.getCardById(this.data.id,this.data.originZone),a=s.getZoneData(this.data.zone);"EMZ"===a.zone&&(this.data.zone=s.createZone(a.zone,e.originalOwner,a.zoneIndex)),this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.position,log:!1}))}exec(){this.execMultipleChildCommand(this.commands),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.LinkSummon,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,materials:this.materials})}undo(){this.undoMultipleChildCommand(this.commands)}}class x extends t{constructor(t){super(),this.baseType="MillFromDeckCommand",this.type="Mill From Deck";const{numberOfCards:e=1}=t;this.data=t,this.data.numberOfCards=Math.max(1,e),this.commands=[]}init(t){super.init(t);const e=this.YGO.getField(this.data.player),a=Math.min(this.data.numberOfCards,e.mainDeck.length);for(let t=0;t<a;++t){const a=e.mainDeck.length-1-t,i=e.mainDeck[a];this.commands.push(new C({id:i.id,originZone:s.createZone("D",this.data.player,a+1),player:this.data.player}))}}exec(){this.execMultipleChildCommand(this.commands)}undo(){this.undoMultipleChildCommand(this.commands)}}class v extends t{constructor(t){super(),this.baseType="NormalSummonCommand",this.type="Normal Summon",this.data=t,this.data.position="faceup-attack",this.moveCardCommand=new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position})}exec(){this.execChildCommand(this.moveCardCommand)}undo(){this.undoChildCommand(this.moveCardCommand)}}class D extends t{constructor(t){super(),this.baseType="SetCardCommand",this.type="Set ST",this.isMonster=!1,this.data=t,this.commands=[]}init(t){super.init(t);const e=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.isMonster=s.isMonster(e),this.type=this.isMonster?"Set Monster":"Set ST",this.commands=[],this.data.zone&&(this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:"facedown"})),this.data.reveal&&this.commands.push(new u({player:this.data.player,id:this.data.id,originZone:this.data.zone})))}exec(){if(this.commands.length>0)this.execMultipleChildCommand(this.commands);else{const t=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.prevPosition=t.position,t.position="facedown","Set Monster"===this.type?this.YGO.duelLog.dispatch({type:e.LogType.SetMonster,commandId:this.getCommandId(),player:this.data.player,id:this.data.id,originZone:this.data.originZone}):this.YGO.duelLog.dispatch({type:e.LogType.SetST,commandId:this.getCommandId(),player:this.data.player,id:this.data.id,originZone:this.data.originZone})}}undo(){if(this.commands.length>0&&this.undoMultipleChildCommand(this.commands),this.prevPosition){this.YGO.state.getCardById(this.data.id,this.data.originZone).position=this.prevPosition}}}class M extends t{constructor(t){super(),this.baseType="SetMonsterCommand",this.type="Set Monster",this.data=t,this.moveCardCommand=new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:"facedown"})}exec(){this.execChildCommand(this.moveCardCommand)}undo(){this.undoChildCommand(this.moveCardCommand)}}class T extends t{constructor(t){super(),this.baseType="ShuffleDeckCommand",this.data=t,this.type="Shuffle Deck"}exec(){console.log("--------------------\n\nSHUFFLE DECK \n\n------------------------");const t=this.YGO.state.fields[this.data.player].mainDeck;if(this.cardPositions)for(let e=0;e<this.cardPositions.length;++e){const a=this.cardPositions[e],i=t[a];t[a]=t[e],t[e]=i}else this.cardPositions=s.shuffleCards(t);!1!==this.data.log&&this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.Shuffle})}undo(){const t=this.YGO.state.fields[this.data.player].mainDeck;for(let e=0;e<this.cardPositions.length;++e){const a=this.cardPositions[e],i=t[a];t[a]=t[e],t[e]=i}}}class S extends t{constructor(t){super(),this.baseType="SpecialSummonCommand",this.type="Special Summon",this.data=t,this.data.position=this.data.position||"faceup-attack","faceup-attack"!==this.data.position&&"faceup-defense"!==this.data.position&&(this.data.position="faceup-attack"),this.moveCardCommand=new r({player:this.data.player,type:"Special Summon",id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position})}exec(){this.execChildCommand(this.moveCardCommand)}undo(){this.undoChildCommand(this.moveCardCommand)}}class k extends t{constructor(t){super(),this.baseType="StartHandCommand",this.type="Start Hand",this.data=t,this.cards=[],this.core=!0}exec(){const t=this.YGO.getField(this.data.player);if(this.cards.length>0)for(let e=0;e<this.cards.length;++e){const e=t.mainDeck.shift();e&&t.hand.push(e)}else if(t.hand.length>0)this.cards=[...t.hand];else{this.cards=[];const e=Math.min(this.data.numberOfCards,t.mainDeck.length);for(let a=0;a<e;++a){const e=t.mainDeck.shift();e&&(t.hand.push(e),this.cards.push(e))}}const a=this.cards.map(((t,e)=>({id:t.id,zone:s.createZone("H",this.data.player,e+1)})));this.YGO.duelLog.dispatch({commandId:this.getCommandId(),player:this.data.player,type:e.LogType.StartHand,cards:a,core:!0})}undo(){const t=this.YGO.state.fields[this.data.player];t.hand=[],t.mainDeck.unshift(...this.cards)}}class Y extends t{constructor(t){super(),this.baseType="SynchroSummonCommand",this.type="Synchro Summon",this.data=t,this.data.position=this.data.position||"faceup-attack",this.commands=[],this.data.materials.forEach((t=>{this.commands.push(new C({player:this.data.player,id:t.id,originZone:t.zone,reason:"Synchro Summon"}))})),this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position,log:!1}))}exec(){this.execMultipleChildCommand(this.commands),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.SynchroSummon,id:this.data.id,originZone:this.data.originZone,position:this.data.position,zone:this.data.zone,materials:this.data.materials})}undo(){this.undoMultipleChildCommand(this.commands)}}class O extends t{constructor(t){super(),this.baseType="TargetCommand",this.type="Target",this.data=t}exec(){this.YGO.duelLog.dispatch({type:e.LogType.Target,player:this.data.player,commandId:this.getCommandId(),id:this.data.id,originZone:this.data.originZone})}}class z extends t{constructor(t){super(),this.baseType="ToDeckCommand",this.data=t,this.type=this.getCommandType()}isTopCard(){return"top"===this.data.position}getCommandType(){return this.isTopCard()?"To Top Deck":"To Bottom Deck"}getDeckIndex(){const t=this.YGO.state.fields[this.data.player].mainDeck;return this.isTopCard()?t.length+1:1}init(t){if(super.init(t),!this.commands){const{player:t,shuffle:e=!1}=this.data,a=this.getDeckIndex();this.zone=s.createZone("D",t,a),this.commands=[],this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.zone})),e&&this.commands.push(new T({player:this.data.player}))}}exec(){this.execMultipleChildCommand(this.commands)}undo(){this.undoMultipleChildCommand(this.commands)}}class I extends t{constructor(t){super(),this.baseType="ToExtraDeckCommand",this.type="To Extra Deck",this.data=t}init(t){super.init(t);const e=t.state.getCardById(this.data.id,this.data.originZone);this.moveCardCommand=new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:s.createZone("ED",e.originalOwner)})}exec(){this.execChildCommand(this.moveCardCommand)}undo(){this.undoChildCommand(this.moveCardCommand)}}class G extends t{constructor(t){super(),this.baseType="ToHandCommand",this.type="To Hand",this.data=t}init(t){super.init(t);const e=this.YGO.getField(this.data.player).hand.length+1;this.command=new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:s.createZone("H",this.data.player,e),position:"facedown"})}exec(){this.execChildCommand(this.command)}undo(){this.undoChildCommand(this.command)}}class w extends t{constructor(t){super(),this.baseType="ToSTCommand",this.type="To ST",this.data=t,this.moveCardCommand=new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:"faceup"})}exec(){this.execChildCommand(this.moveCardCommand)}undo(){this.undoChildCommand(this.moveCardCommand)}}class b extends t{constructor(t){super(),this.baseType="TributeSetCommand",this.type="Tribute Set",this.data=t,this.data.position="facedown",this.commands=[],this.data.tributes.forEach((t=>{this.commands.push(new C({id:t.id,originZone:t.zone,player:this.data.player}))})),this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position}))}exec(){this.commands.forEach((t=>this.execChildCommand(t)))}undo(){this.commands.forEach((t=>this.undoChildCommand(t)))}}class E extends t{constructor(t){super(),this.baseType="TributeSummonCommand",this.type="Tribute Summon",this.data=t,this.data.position=this.data.position||"faceup-attack",this.commands=[],this.data.tributes.forEach((t=>{this.commands.push(new C({id:t.id,originZone:t.zone,player:this.data.player}))})),this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position}))}exec(){this.commands.forEach((t=>this.execChildCommand(t)))}undo(){this.commands.forEach((t=>this.undoChildCommand(t)))}}class F extends t{constructor(t){super(),this.baseType="XYZAttachMaterialCommand",this.type="XYZ Attach Material",this.data=t}exec(){const t=this.YGO.state.getCardFromZone(this.data.zone);this.materialCardReference=this.YGO.state.getCardById(this.data.id,this.data.originZone),this.materialCardReference.materials.length>0&&(this.moveXYZMaterialsCommand=this.execChildCommand(new d({id:this.materialCardReference.id,originZone:this.data.originZone,player:this.data.player,zone:"GY"}))),this.YGO.state.setCard(null,this.data.originZone),t.materials.push(this.materialCardReference),console.log("TCL:: EXEC ATTACH:: ",this.materialCardReference.name,this.data.originZone);const a=o.getOverlayZone(this.data.zone);this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.XYZAttachMaterial,id:this.data.id,materialId:this.materialCardReference.id,originZone:this.data.originZone,overlayZone:a})}undo(){const t=this.YGO.state.getCardFromZone(this.data.zone);this.YGO.state.setCard(this.materialCardReference,this.data.originZone);const e=t.materials.indexOf(this.materialCardReference);-1!==e&&t.materials.splice(e,1),this.moveXYZMaterialsCommand&&this.undoChildCommand(this.moveXYZMaterialsCommand)}}class L extends t{constructor(t){super(),this.baseType="XYZDetachMaterialCommand",this.type="XYZ Detach Material",this.data=t}exec(){const t=this.YGO.state.getCardById(this.data.id,this.data.originZone);this.materialCardReference=t.materials[this.data.materialIndex],t.materials.splice(this.data.materialIndex,1),this.YGO.state.setCard(this.materialCardReference,s.createZone("GY",this.materialCardReference.originalOwner));const a=o.getOverlayZone(this.data.originZone);console.log(" DETACH ",a,">>>",s.createZone("GY",this.materialCardReference.originalOwner)),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.XYZDetachMaterial,id:t.id,materialIndex:this.data.materialIndex,materialId:this.materialCardReference.id,owner:this.materialCardReference.originalOwner,overlayZone:a})}undo(){this.YGO.state.getCardFromZone(this.data.originZone).materials.splice(this.data.materialIndex,0,this.materialCardReference),console.log(" DETACH UNDO;;",s.createZone("GY",this.materialCardReference.originalOwner)),this.YGO.state.setCard(null,s.createZone("GY",this.materialCardReference.originalOwner))}}class P extends t{constructor(t){super(),this.baseType="XYZOverlaySummonCommand",this.previousMaterialsData=[],this.cardMaterials=[],this.type="XYZ Overlay Summon",this.data=t,this.data.position=this.data.position||"faceup-attack",this.commands=[],this.overlayZone=o.getOverlayZone(this.data.zone),console.log("EXEC MATERIALS")}init(t){super.init(t),this.cardMaterials=[],this.previousMaterialsData=[],this.data.materials.forEach((t=>{const e=this.YGO.state.getCardById(t.id,t.zone),a=[...e.materials];e.materials=[],this.cardMaterials.push(e),a.forEach((t=>this.cardMaterials.push(t))),this.previousMaterialsData.push({card:e,materials:a}),this.commands.push(new A({player:this.data.player,overlayZone:this.overlayZone,id:t.id,zone:t.zone}))})),this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position,log:!1}))}exec(){const t=this.YGO.state.getCardById(this.data.id,this.data.originZone);console.log("NEW MATERIALS ",this.cardMaterials),t.materials=this.cardMaterials,this.execMultipleChildCommand(this.commands),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.XYZOverlaySummon,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position,materials:this.data.materials})}undo(){this.YGO.state.getCardById(this.data.id,this.data.zone).materials=[],this.undoMultipleChildCommand(this.commands),this.previousMaterialsData.forEach((t=>{t.card.materials=t.materials}))}}let A=class extends t{constructor(t){super(),this.data=t}exec(){this.card=this.YGO.state.getCardById(this.data.id,this.data.zone),this.YGO.state.setCard(null,this.data.zone),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.XYZOverlay,id:this.data.id,originZone:this.data.zone,overlayZone:this.data.overlayZone})}undo(){this.YGO.state.setCard(this.card,this.data.zone)}};class B extends t{constructor(t){super(),this.baseType="XYZSummonCommand",this.type="XYZ Summon",this.data=t,this.data.position=this.data.position||"faceup-attack",this.commands=[],this.overlayZone=o.getOverlayZone(this.data.zone),console.log("EXEC MATERIALS")}init(t){super.init(t),this.data.materials.forEach((t=>{this.commands.push(new d({player:this.data.player,id:t.id,originZone:t.zone,zone:"GY"}))})),this.data.materials.forEach((t=>{this.commands.push(new N({player:this.data.player,overlayZone:this.overlayZone,id:t.id,zone:t.zone}))})),this.commands.push(new r({player:this.data.player,type:this.type,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position,log:!1}))}exec(){this.YGO.state.getCardById(this.data.id,this.data.originZone).materials=this.data.materials.map((t=>this.YGO.state.getCardById(t.id,t.zone))),this.execMultipleChildCommand(this.commands),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.XYZSummon,id:this.data.id,originZone:this.data.originZone,zone:this.data.zone,position:this.data.position,materials:this.data.materials})}undo(){this.YGO.state.getCardById(this.data.id,this.data.zone).materials=[],this.undoMultipleChildCommand(this.commands)}}class N extends t{constructor(t){super(),this.data=t}exec(){this.card=this.YGO.state.getCardById(this.data.id,this.data.zone),this.YGO.state.setCard(null,this.data.zone),this.YGO.duelLog.dispatch({player:this.data.player,commandId:this.getCommandId(),type:e.LogType.XYZOverlay,id:this.data.id,originZone:this.data.zone,overlayZone:this.data.overlayZone})}undo(){this.YGO.state.setCard(this.card,this.data.zone)}}const X={NormalSummonCommand:v,SetMonsterCommand:M,SetCardCommand:D,SendCardToGYCommand:C,BanishCommand:h,DrawFromDeckCommand:p,MillFromDeckCommand:x,ActivateCardCommand:n,SpecialSummonCommand:S,TributeSummonCommand:E,TributeSetCommand:b,LinkSummonCommand:Z,FusionSummonCommand:f,SynchroSummonCommand:Y,XYZSummonCommand:B,XYZOverlaySummonCommand:P,XYZAttachMaterialCommand:F,XYZDetachMaterialCommand:L,ToDeckCommand:z,ShuffleDeckCommand:T,DestroyCardCommand:c,RevealCommand:u,ToExtraDeckCommand:I,ToHandCommand:G,FieldSpellCommand:y,ChangeCardPositionCommand:l,ChangeCardAtkDefCommand:m,FlipCommand:g,ToSTCommand:w,MoveCardCommand:r,TargetCommand:O},W={NormalSummonCommand:v,SetMonsterCommand:M,SetCardCommand:D,SendCardToGYCommand:C,BanishCommand:h,DrawFromDeckCommand:p,MillFromDeckCommand:x,ActivateCardCommand:n,SpecialSummonCommand:S,TributeSummonCommand:E,TributeSetCommand:b,LinkSummonCommand:Z,FusionSummonCommand:f,SynchroSummonCommand:Y,XYZSummonCommand:B,XYZOverlaySummonCommand:P,XYZAttachMaterialCommand:F,XYZDetachMaterialCommand:L,ToDeckCommand:z,ShuffleDeckCommand:T,DestroyCardCommand:c,RevealCommand:u,ToExtraDeckCommand:I,ToHandCommand:G,FieldSpellCommand:y,ChangeCardPositionCommand:l,ChangeCardAtkDefCommand:m,FlipCommand:g,ToSTCommand:w,MoveCardCommand:r,StartHandCommand:k,TargetCardCommand:O};class $ extends t{constructor(t){super();const e=(a=t.type,W[a]);var a;if(!e)throw new Error(`Command "${t.type}" dont exists!`);return new e(t.data)}}class R{constructor(){this.events=new Map}on(t,e){this.events.has(t)||this.events.set(t,[]),this.events.get(t).push(e)}dispatch(t,...e){const a=this.events.get(t);a&&a.forEach((t=>{t(...e)}))}off(t,e){const a=this.events.get(t);a&&this.events.set(t,a.filter((t=>t!==e)))}clear(t){this.events.has(t)&&this.events.delete(t)}clearAll(){this.events.clear()}}class H{constructor(){this.enabled=!0,this.logs=[],this.events=new R}dispatch(t){this.enabled&&(this.logs.push(t),this.events.dispatch("new-log",t),this.onLogsUpdated())}peek(){return 0==this.logs.length?null:this.logs[this.logs.length-1]}peekCommand(){return 0==this.logs.length?-1:this.logs[this.logs.length-1].commandId}pop(){return 0===this.logs.length?null:this.logs.pop()}removeCommand(t,e){const a=this.logs.findIndex((e=>e.commandId===t.commandId));-1!==a&&this.logs.splice(a,this.logs.length-a),!1!==(null==e?void 0:e.log)&&this.events.dispatch("update-logs",this.logs)}onLogsUpdated(){this.events.dispatch("update-logs",this.logs)}}class U{constructor(t){this.fields=o.initializePlayersFields(t),this.cardsInGame=o.getCardsInGame(this.fields)}getCardById(t,e){const a=e.includes("2-")?1:0;if("GY"===e||"GY2"===e){const i=this.fields[a].graveyard.find((e=>e.id===t));if(!i)throw new Error(`card "${t}" not found in "${e}"`);return i}const i=this.getCardFromZone(e);if(i&&i.id===t)return i;throw new Error(`card "${t}" not found in "${e}"`)}getCardFromZone(t){const e=s.getZoneData(t).player;if(t.startsWith("H-")||t.startsWith("H2-")){const a=Number(t.split("-").pop())-1;return this.fields[e].hand[a]}if(t.startsWith("M-")||t.startsWith("M2-")){const a=Number(t.split("-").pop())-1;return this.fields[e].monsterZone[a]}if(t.startsWith("S-")||t.startsWith("S2-")){const a=Number(t.split("-").pop())-1;return this.fields[e].spellTrapZone[a]}if(t.startsWith("GY-")||t.startsWith("GY2-")){const a=Number(t.split("-").pop())-1;return this.fields[e].graveyard[a]}if(t.startsWith("B-")||t.startsWith("B2-")){const a=Number(t.split("-").pop())-1;return this.fields[e].banishedZone[a]}if(t.startsWith("D-")||t.startsWith("D2-")){const a=Number(t.split("-").pop())-1;return this.fields[e].mainDeck[a]}if(t.startsWith("ED-")||t.startsWith("ED2-")){const a=Number(t.split("-").pop())-1;return this.fields[e].extraDeck[a]}if(t.startsWith("EMZ-")||t.startsWith("EMZ2-")){const a=Number(t.split("-").pop())-1;return this.fields[e].extraMonsterZone[a]}if(t.startsWith("F")||t.startsWith("F2")){return this.fields[e].fieldZone}return null}moveCardById(t,e,a){const i=this.getCardById(t,e);this.moveCard(i,e,a)}moveCard(t,e,a){this.removeCard(e),this.setCard(t,a)}setCard(t,e){const a=s.getZoneData(e).player;if(e.startsWith("H-")||e.startsWith("H2-")||"H"===e||"H2"===e){const i=e.includes("-")?Number(e.split("-").pop())-1:-1,s=this.fields[a].hand;-1==i&&t?s.push(t):t?i>=s.length?s.push(t):s.splice(i,0,t):s.splice(i,1)}else if(e.startsWith("M-")||e.startsWith("M2-")){const i=Number(e.split("-").pop())-1;this.fields[a].monsterZone[i]=t}else if(e.startsWith("S-")||e.startsWith("S2-")){const i=Number(e.split("-").pop())-1;this.fields[a].spellTrapZone[i]=t}else if(e.startsWith("EMZ-")||e.startsWith("EMZ2-")){const i=Number(e.split("-").pop())-1;this.fields[a].extraMonsterZone[i]=t}else if(e.startsWith("ED")||e.startsWith("ED2"))if(-1!==e.indexOf("-")){const i=Number(e.split("-").pop())-1;t?this.fields[a].extraDeck.splice(i,0,t):this.fields[a].extraDeck.splice(i,1)}else{if(!t)throw new Error("No card to add to Extra Deck");{const e=t.isMainDeckCard&&s.isPendulumCard(t),i=this.fields[a].extraDeck;e?i.unshift(t):(i.push(t),s.sortCards(i))}}else if(e.startsWith("D-")||e.startsWith("D2-")){const i=Number(e.split("-").pop())-1;console.log("MOVE CARD TO DECK ",e),t?this.fields[a].mainDeck.splice(i,0,t):this.fields[a].mainDeck.splice(i,1)}else if("GY"===e||"GY2"===e||e.startsWith("GY-")||e.startsWith("GY2-")){const i=e.includes("-")?Number(e.split("-").pop())-1:-1,s=this.fields[a].graveyard;t?-1===i?s.unshift(t):s.splice(i,0,t):-1==i?s.length>0&&s.splice(0,1):s.splice(i,1)}else if("B"===e||"B2"===e||e.startsWith("B-")||e.startsWith("B2-")){const i=e.includes("-")?Number(e.split("-").pop())-1:-1,s=this.fields[a].banishedZone;t?-1===i?s.unshift(t):s.splice(i,0,t):-1==i?s.pop():s.splice(i,1)}else(e.startsWith("F")||e.startsWith("F2"))&&(this.fields[a].fieldZone=t)}removeCard(t){const e=this.getCardFromZone(t);return this.setCard(null,t),e}getCardData(t){return this.cardsInGame.get(t)||null}shuffleDeck(t){const e=this.fields[t].mainDeck;if(0!==e.length)for(let t=e.length-1;t>0;t--){const a=Math.floor(Math.random()*(t+1));[e[t],e[a]]=[e[a],e[t]]}}getPlayerIndexFromZone(t){return o.getPlayerIndexFromZone(t)}getAvailableZones(t){const e=[];for(const a of t){const t=this.getPlayerIndexFromZone(a),i=this.fields[t];if("M"===a)i.monsterZone.forEach(((a,i)=>{const s=`M${0===t?"":"2"}-${i+1}`;a||e.push(s)}));else if("S"===a)i.spellTrapZone.forEach(((a,i)=>{const s=`S${0===t?"":"2"}-${i+1}`;a||e.push(s)}));else if("EMZ"===a)for(let t=0;t<2;++t){const a=`EMZ-${t+1}`;i.extraDeck[t]||i.extraDeck[t]||e.push(a)}else"F"===a&&i.fieldZone&&e.push("F")}return e}}class j{static createReplayData(t){var e;const a=t.props.players.map(((e,a)=>{const i=t.getField(a);return{name:e.name,mainDeck:i.data.mainDeckOrdered,extraDeck:i.data.extraDeckOrdered}})),i=t.commands.map((t=>t.toJSON())),n=[],o=[];(null===(e=t.props.options)||void 0===e?void 0:e.fieldState)&&t.props.options.fieldState.forEach((t=>o.push(t)));for(let e=0;e<t.state.fields.length;++e){const a=t.getField(e);for(let t=0;t<a.monsterZone.length;++t)if(a.monsterZone[t]){const i=a.monsterZone[t],o=s.createZone("M",e,t+1);n.push(this.getMonsterCardInfo(i,o))}for(let t=0;t<a.spellTrapZone.length;++t)if(a.spellTrapZone[t]){const i=a.spellTrapZone[t],o=s.createZone("S",e,t+1);n.push({id:i.id,zone:o})}for(let t=0;t<a.extraMonsterZone.length;++t)if(a.extraMonsterZone[t]){const i=a.extraMonsterZone[t],o=s.createZone("EMZ",e,t+1);n.push(this.getMonsterCardInfo(i,o))}for(let t=0;t<a.graveyard.length;++t){const i=a.graveyard[t],o=s.createZone("GY",e);n.push({id:i.id,zone:o})}for(let t=0;t<a.banishedZone.length;++t){const i=a.banishedZone[t],o=s.createZone("B",e),d={id:i.id,zone:o};s.isFaceDown(i)&&(d.position="facedown"),n.push(d)}}return{players:a,commands:i,initialField:o,endField:n}}static getMonsterCardInfo(t,e){const a={id:t.id,zone:e};return t.atk!==t.currentAtk&&(a.atk=t.currentAtk),t.def!==t.currentDef&&(a.def=t.currentDef),"faceup-attack"!==t.position&&(a.position=t.position),t.materials.length>0&&(a.materials=t.materials.map((t=>({id:t.id})))),a}}class _{constructor(t){var e;this.props=t,this.state=new U(t),this.duelLog=new H,this.events=new R,this.commandIndex=-1,this.commands=this.createYGOCommands(t.commands),this.startDuelTime=Date.now(),this.duelTimeOffset=(null===(e=t.options)||void 0===e?void 0:e.currentGameTime)||0,this.currentPlayer=0,this.phase=i.DrawPhase,this.duelLog.events.on("new-log",(t=>this.events.dispatch("new-log",t))),this.duelLog.events.on("update-logs",(t=>this.events.dispatch("update-logs",t)))}start(){const{draw:t=5}=this.props.options||{};0===this.commands.length&&this.props.players.forEach(((e,a)=>{this.exec(new k({player:a,numberOfCards:t}))}))}setCurrentPlayer(t){if(t<0||t>1)throw new Error(`invalid player ${t}`);this.currentPlayer=t,this.events.dispatch("set-player",{player:t})}exec(t){return this.hasNextCommand()&&this.commands.splice(this.commandIndex+1,this.commands.length-this.commandIndex),this.commandIndex=this.commands.length,this.commands.push(t),t.init(this),this.events.dispatch("command-created",{command:t}),t.exec(),this.events.dispatch("command-executed",{command:t}),t}peek(){return this.commands.length>0?this.commands[this.commands.length-1]:null}redo(){if(!this.hasNextCommand())return null;this.commandIndex++;const t=this.commands[this.commandIndex];return t.exec(),this.duelLog.onLogsUpdated(),this.events.dispatch("command-redo",{command:t}),t}undo(){if(!this.hasPrevCommand())return null;const t=this.commands[this.commandIndex];return this.duelLog.removeCommand(t),t.undo(),this.commandIndex--,this.duelLog.onLogsUpdated(),this.events.dispatch("command-undo",{command:t}),t}goToCommand(t){const e=this.commands.findIndex((e=>e===t));if(-1===e)return!1;if(e===this.commandIndex)return!0;if(e>this.commandIndex){for(;this.commandIndex!==e&&this.hasNextCommand();)this.redo();return!0}for(;this.commandIndex!==e&&this.hasPrevCommand();)this.undo();return!0}hasNextCommand(){return this.commands.length-1>this.commandIndex}hasPrevCommand(){return this.commandIndex>=0}getNextCommandId(){return this.commandIndex>=0?this.commandIndex:0}getCurrentTime(){return Date.now()-this.startDuelTime+this.duelTimeOffset}getReplayData(){for(;this.hasNextCommand();)this.redo();return j.createReplayData(this)}getField(t){return this.state.fields[t]}createYGOCommands(t){var e;if(this.duelLog.enabled=!1,Array.isArray(t)){const a=t.map((t=>{const e=new $(t);return e.init(this),e.commandId=++this.commandIndex,e.exec(),e}));if(!0!==(null===(e=this.props.options)||void 0===e?void 0:e.execCommands))for(let t=a.length-1;t>=0;--t)a[t].undo();return this.commandIndex=a.length,this.commands=a,this.duelLog.enabled=!0,a}return this.duelLog.enabled=!0,[]}getCurrentStateProps(){return o.getYGOCoreStateProps(this)}}const K=X,V="1.0.3";export{$ as JSONCommand,K as YGOCommands,_ as YGOCore,e as YGODuelEvents,H as YGODuelLog,s as YGOGameUtils,V as debug_version};
//# sourceMappingURL=index.js.map
