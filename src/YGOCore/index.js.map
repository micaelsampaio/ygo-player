{"version":3,"file":"index.js","sources":["../src/commands/BaseCommand.ts","../src/types/duel-events.ts","../src/types/types.ts","../src/commands/ActivateCardCommand.ts","../src/game/YGOGameUtils.ts","../src/game/YGOUtils.ts","../src/commands/MoveCardCommand.ts","../src/commands/BanishCommand.ts","../src/commands/DestroyCard.ts","../src/commands/DrawFromDeckCommand.ts","../src/commands/RevealCommand.ts","../src/commands/FieldSpellCommand.ts","../src/commands/SendCardToGY.ts","../src/commands/LinkSummonCommand.ts","../src/commands/MillFromDeckCommand.ts","../src/commands/NormalSummonCommand.ts","../src/commands/SetCardCommand.ts","../src/commands/SetMonsterCommand.ts","../src/commands/ShuffleDeck.ts","../src/commands/SpecialSummonCommand.ts","../src/commands/ToDeckCommand.ts","../src/commands/ToExtraDeckCommand.ts","../src/commands/ToHandCommand.ts","../src/commands/TributeSetCommand.ts","../src/commands/TributeSummonCommand.ts","../src/commands/XYZAttachMaterialCommand.ts","../src/commands/XYZDetachMaterialCommand.ts","../src/commands/XYZSummonCommand.ts","../src/commands/index.ts","../src/utils/event-bus.ts","../src/game/YGODuelLog.ts","../src/game/YGOGameState.ts","../src/game/YGOReplayUtils.ts","../src/game/YGOCore.ts","../src/index.ts"],"sourcesContent":["import { YGOCore } from \"../game/YGOCore\";\nimport { CommandType, Command } from \"../types/commands\";\n\nexport abstract class BaseCommand implements Command {\n\n    protected YGO!: YGOCore;\n    public type!: CommandType;\n    public commandId: number = -1;\n    public parent: Command | null = null;\n\n    constructor() { }\n\n    init(ygo: YGOCore) {\n        this.YGO = ygo;\n        this.commandId = this.YGO.getNextCommandId();\n    }\n\n    getCommandId() {\n        return this.parent?.commandId || this.commandId;\n    }\n\n    execChildCommand(command: Command): Command | undefined {\n        command.parent = this;\n        command.init(this.YGO);\n        command.exec();\n        return command;\n    }\n\n    undoChildCommand(command: Command | undefined): Command | undefined {\n        command?.undo();\n        return command;\n    }\n\n    undoMultipleChildCommand(commands: Command[]): void {\n        for (let i = commands.length - 1; i >= 0; --i) {\n            commands[i]?.undo();\n        }\n    }\n\n    execMultipleChildCommand(commands: Command[]): void {\n        for (const command of commands) {\n            this.execChildCommand(command);\n        }\n    }\n\n    isValid(): boolean {\n        return true;\n    }\n\n    exec(): void {\n\n    }\n\n    undo(): void {\n\n    }\n\n    toJSON<T extends any = any>(): { type: string, data: T } {\n        const self = this as any;\n        const data = self.data || {};\n        const type: string = (self?.constructor?.name || data.type || \"NO_TYPE\") as string;\n\n        return {\n            type,\n            data,\n        };\n    }\n}","import { CardPosition, FieldZone } from \"./types\";\n\nexport namespace YGODuelEvents {\n    export enum LogType {\n        NormalSummon = \"Normal Summon\",\n        SetMonster = \"Set Monster\",\n        SendToGY = \"Send To GY\",\n        Banish = \"Banish\",\n        BanishFD = \"Banish FD\",\n        DrawCardFromDeck = \"Draw From Deck\",\n        MillCardFromDeck = \"Mill From Deck\",\n        TributeSummon = \"Tribute Summon\",\n        TributeSet = \"Tribute Set\",\n        ToHand = \"To Hand\",\n        ToTopDeck = \"To Top Deck\",\n        ToBottomDeck = \"To Bottom Deck\",\n        SpecialSummon = \"Special Summon\",\n        FusionSummon = \"Fusion Summon\",\n        SynchroSummon = \"Synchro Summon\",\n        LinkSummon = \"Link Summon\",\n        XYZSummon = \"XYZ Summon\",\n        XYZAttachMaterial = \"XYZ Attach Material\",\n        XYZDetachMaterial = \"XYZ Detach Material\",\n        XYZOverlay = \"XYZOverlay\",\n        SetST = \"Set ST\",\n        Activate = \"Activate\",\n        ChangeBattlePosition = \"Change Battle Position\",\n        MoveCard = \"Move Card\",\n        Shuffle = \"Shuffle\",\n        ToST = \"To ST\",\n        Reveal = \"Reveal\",\n        Target = \"Target\",\n        FieldSpell = \"Field Spell\"\n    }\n\n    export interface DuelLog {\n        type: LogType;\n        player: number;\n        commandId: number;\n    }\n\n    export interface NormalSummon extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface MoveCard extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface ToHand extends MoveCard { }\n\n    export interface SetMonster extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n    }\n\n    export interface SendToGY extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone,\n        reason?: \"Fusion Summon\" | \"Synchro Summon\" | \"Link Summon\" | \"XYZ Material\" | undefined\n    }\n\n    export interface DrawFromDeck extends DuelLog {\n        id: number,\n        zone: FieldZone\n    }\n\n    export interface FusionSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface SynchroSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface LinkSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZAttach extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZOverlay extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZDetach extends DuelLog {\n        id: number\n        overlayZone: FieldZone\n        materialIndex: number\n    }\n\n    export interface Activate extends DuelLog {\n        id: number,\n        originZone?: FieldZone,\n        zone: FieldZone\n    }\n\n    export interface Banish extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface Shuffle extends DuelLog { }\n\n    export interface Reveal extends DuelLog {\n        id: number;\n        zone: FieldZone;\n    }\n\n    export interface Target extends DuelLog {\n        id: number;\n        zone: FieldZone;\n    }\n}\n\n","export const NUM_ZONES: number = 5; // Number of primary zones (Monster, Spell/Trap, etc.)\nexport type PlayerSide = 0 | 1; // 0 represents Player 1, 1 represents Player 2\n\nexport type CardPosition = \"faceup-attack\" | \"faceup-defense\" | \"faceup\" | \"facedown\";\n\nexport type FieldZone = `M-${1 | 2 | 3 | 4 | 5}`\n    | `M2-${1 | 2 | 3 | 4 | 5}`\n    | `S-${1 | 2 | 3 | 4 | 5}`\n    | `S2-${1 | 2 | 3 | 4 | 5}`\n    | `EMZ`\n    | `EMZ2`\n    | `EMZ-${1 | 2}`\n    | `EMZ2-${1 | 2}`\n    | `ORU-${1 | 2 | 3 | 4 | 5}` // Overlay Units ORU Xyz Materials\n    | `ORU2-${1 | 2 | 3 | 4 | 5}`\n    | `ORUEMZ-${1 | 2}` // Xyz Materials in extra monster zone :)\n    | `ORUEMZ2-${1 | 2}`\n    | \"H\"\n    | \"H2\"\n    | `H-${number}`\n    | `H2-${number}`\n    | \"F\"\n    | \"F2\"\n    | \"GY\"\n    | \"GY2\"\n    | `GY-${number}`\n    | `GY2-${number}`\n    | \"B\"\n    | \"B2\"\n    | `B-${number}`\n    | `B2-${number}`\n    | \"D\"\n    | \"D2\"\n    | `D-${number}`\n    | `D2-${number}`\n    | \"ED\"\n    | \"ED2\"\n    | `ED-${number}`\n    | `ED2-${number}`;\n\nexport type FieldZoneId = \"M\" | \"S\" | \"EMZ\" | \"GY\" | \"D\" | \"ED\" | \"B\" | \"F\" | \"ORU\" | \"ORUEMZ\" | \"H\";\n\nexport enum CardBaseType {\n    NormalMonster,\n    EffectMonster,\n    RitualMonster,\n    Spell,\n    Trap,\n    FusionMonster,\n    SynchroMonster,\n    XYZMonster,\n    LinkMonster,\n}\n\nexport interface YGOProps {\n    players: {\n        name: string,\n        mainDeck: CardData[], // Card Data is the same as https://ygoprodeck.com/api-guide\n        extraDeck: CardData[] // Card Data is the same as https://ygoprodeck.com/api-guide\n        mainDeckOrder?: number[]\n    }[],\n    commands?: { type: string, data: any }[]\n    options?: {\n        lp?: number, // default `8000`\n        shuffleDecks?: boolean // default value is `true`,\n        fieldState?: FileldStateEntry[][] // default\n    }\n}\n\nexport interface FileldStateEntry {\n    id: number,\n    zone: FieldZone\n    atk?: number\n    def?: number\n    owner?: number\n    position?: CardPosition\n    materials?: Array<number>\n}\n\nexport interface CardData {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    attribute: string\n    card_images: any\n}\n\nexport interface Card {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    attribute: string\n    card_images: any\n    // game_data\n    index: number // internal unique ID\n    owner: number\n    isMainDeckCard: boolean\n    originalOwner: number\n    position: CardPosition\n    currentAtk: number\n    currentDef: number\n    materials: Card[]\n}\n\nexport interface PlayerInfo {\n    name: string;\n}\n\nexport interface PlayerField {\n    lp: number,\n    player: PlayerInfo\n    mainDeck: Card[]\n    extraDeck: Card[]\n    hand: Card[]\n    initialHandSize: number;\n    initialMainDeckOrder: number[];\n    graveyard: Card[]\n    banishedZone: Card[]\n    // Zones on the field where cards are actively played\n    monsterZone: Array<Card | null>\n    spellTrapZone: Array<Card | null>\n    fieldZone: Card | null;\n    extraMonsterZone: Array<Card | null>;\n}\n\nexport interface GameState {\n    players: PlayerInfo[];\n    fields: PlayerField[];\n}\n","import { BaseCommand } from './BaseCommand';\nimport { ActivateCardCommandData } from '../types/commands';\nimport { Card, CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class ActivateCardCommand extends BaseCommand {\n    private data: ActivateCardCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ActivateCardCommandData) {\n        super();\n        this.type = \"Activate\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone || this.data.zone)!;\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.originZone);\n            this.YGO.state.setCard(card, this.data.zone);\n\n            console.log(`Exec: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Exec: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        this.prevPosition = card.position;\n\n        if (card.type === \"Spell Card\" || card.type === \"Trap Card\") {\n            card.position = \"faceup\";\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Activate>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.originZone);\n            this.YGO.state.setCard(card, this.data.zone);\n\n            console.log(`Undo: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Undo: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { Card, CardBaseType, FieldZone, FieldZoneId, PlayerField } from \"../types/types\";\n\n// Only functions for game utils\nexport class YGOGameUtils {\n\n    static isLinkMonster(card: Card): boolean {\n        return card.typeline?.includes(\"Link\");\n    }\n\n    static isXYZMonter(card: Card) {\n        return card.typeline?.includes(\"Xyz\");\n    }\n\n    static isPendulumCard(card: Card) {\n        return card.frameType?.includes(\"pendulum\");\n    }\n\n    static isFaceUp(card: Card): boolean {\n        return card.position === \"faceup\" || card.position === \"faceup-attack\";\n    }\n\n    static isFaceDown(card: Card): boolean {\n        return !this.isFaceUp(card);\n    }\n\n    static hasLinkMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false);\n    }\n\n    static hasXyzMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isXYZMonter(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isXYZMonter(card) : false);\n    }\n\n    static getPlayerIndexFromZone(zone: string): (0 | 1) {\n        const isPlayer2 = zone.includes(\"2-\");\n\n        if (isPlayer2) return 1;\n\n        switch (zone) {\n            case \"M2\":\n            case \"H2\":\n            case \"F2\":\n            case \"GY2\":\n            case \"EMZ2-1\":\n            case \"EMZ2-2\":\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    static createZone(zone: FieldZoneId, player: number, position?: number): FieldZone {\n\n        if (position === undefined) {\n            return `${zone}${player === 0 ? '' : '2'}` as FieldZone;\n        }\n\n        return `${zone}${player === 0 ? '' : '2'}-${position}` as FieldZone;\n    }\n\n    static getZoneInfo(zone: FieldZone): { zone: FieldZoneId, player: 0 | 1, zonePosition: number | null } {\n        const args = zone.split(\"-\");\n        let playerIndex = 0;\n        let zoneId = args[0];\n        const position = args.length > 1 ? Number(args[1]) : null;\n\n        if (args[0].endsWith(\"2\")) {\n            playerIndex = 1;\n            zoneId = zoneId.substring(0, zoneId.length - 1);\n        }\n\n        return {\n            zone: zoneId as FieldZoneId,\n            player: playerIndex as any,\n            zonePosition: position\n        }\n    }\n\n    static getCardBaseType(card: Card): CardBaseType {\n        if (card.frameType.startsWith(\"effect\")) return CardBaseType.EffectMonster;\n        if (card.frameType.startsWith(\"spell\")) return CardBaseType.Spell;\n        if (card.frameType.startsWith(\"ritual\")) return CardBaseType.RitualMonster;\n        if (card.frameType.startsWith(\"trap\")) return CardBaseType.Trap;\n        if (card.frameType.includes(\"fusion\")) return CardBaseType.FusionMonster;\n        if (card.frameType.includes(\"synchro\")) return CardBaseType.SynchroMonster;\n        if (card.frameType.includes(\"xyz\")) return CardBaseType.XYZMonster;\n        if (card.frameType.includes(\"link\")) return CardBaseType.LinkMonster;\n        return CardBaseType.NormalMonster;\n    }\n\n    static getCardsBaseType(cards: Card[]): CardBaseType[] {\n        const result = cards.map(c => YGOGameUtils.getCardBaseType(c));\n        return result;\n    }\n\n    static toSortedCards(cards: Card[]) {\n        return this.sortCards([...cards]);\n    }\n\n    static sortCards(cardsToSort: Card[]) {\n        const cards = cardsToSort;\n        const cardsWeights = YGOGameUtils.getCardsBaseType(cards);\n\n        for (let i = 0; i < cards.length - 1; ++i) {\n            for (let j = 0; j < cards.length - i - 1; ++j) {\n                if (cardsWeights[j] > cardsWeights[j + 1] || (cardsWeights[j] === cardsWeights[j + 1] && cards[j].name > cards[j + 1].name)) {\n                    [cards[j], cards[j + 1]] = [cards[j + 1], cards[j]];\n                    [cardsWeights[j], cardsWeights[j + 1]] = [cardsWeights[j + 1], cardsWeights[j]];\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static shuffleCards(cards: Card[]): Array<number> {\n        const positions = Array<number>(cards.length);\n        for (let i = 0; i < cards.length; ++i) {\n            const index = Math.floor(Math.random() * cards.length);\n\n            positions[i] = index;\n\n            const temp = cards[i];\n            cards[i] = cards[index];\n            cards[index] = temp;\n        }\n        return positions;\n    }\n}","import { COMMANDS_BY_NAME } from \"../commands\";\nimport { Card, FieldZone, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\n// Only internal functions for game utils\nexport class YGOUtils {\n    static getPlayerIndexFromZone(zone: string): (0 | 1) {\n        return YGOGameUtils.getPlayerIndexFromZone(zone);\n    }\n\n    static parseMainDeck({ mainDeck, player }: { mainDeck: Card[], player: number }): Card[] {\n        return mainDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: true }));\n    }\n\n    static parseExtraDeck({ extraDeck, player }: { extraDeck: Card[], player: number }): Card[] {\n        const extra = extraDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: false }));\n        YGOGameUtils.sortCards(extra);\n        return extra;\n    }\n\n    static parseCard({ card, player, isMainDeckCard }: { card: Card, player: number, isMainDeckCard: boolean }): Card {\n        card.owner = player;\n        card.originalOwner = player;\n        card.materials = [];\n        card.isMainDeckCard = isMainDeckCard;\n        card.position = \"facedown\";\n        return card;\n    }\n\n    static getCardsInGame(fields: PlayerField[]): Map<number, Card> {\n        const cards = new Map<number, Card>()\n\n        for (const field of fields) {\n            for (const card of field.mainDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.extraDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static getOverlayZone(zone: FieldZone): FieldZone {\n        const playerIndex = YGOUtils.getPlayerIndexFromZone(zone);\n        const zoneIndex = zone.split(\"-\")[1];\n\n        if (zone.startsWith(\"EMZ\")) {\n            return `ORU${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n        }\n\n        return `ORUEMZ${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n    }\n\n    static initializePlayersFields(props: YGOProps): [PlayerField, PlayerField] {\n        const { shuffleDecks = true } = props.options || {};\n        let cardIndex = 0;\n\n        const field1: PlayerField = {\n            lp: 8000,\n            player: { name: \"test\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            initialHandSize: 5,\n            initialMainDeckOrder: [],\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        };\n\n        const field2: PlayerField = {\n            lp: 8000,\n            player: { name: \"test2\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            initialMainDeckOrder: [],\n            initialHandSize: 5,\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        }\n\n        const fields: [PlayerField, PlayerField] = [field1, field2];\n\n        for (let playerIndex = 0; playerIndex < props.players.length; ++playerIndex) {\n            const player = props.players[playerIndex];\n            const field = fields[playerIndex];\n            field.initialMainDeckOrder = player.mainDeck.map((_, index) => index);\n            field.mainDeck = YGOUtils.parseMainDeck({ mainDeck: player.mainDeck as Card[], player: playerIndex });\n            field.extraDeck = YGOUtils.parseExtraDeck({ extraDeck: player.extraDeck as Card[], player: playerIndex });\n            field.mainDeck.forEach(card => card.index = ++cardIndex);\n            field.extraDeck.forEach(card => card.index = ++cardIndex);\n\n            if (player.mainDeckOrder) {\n                for (let i = 0; i < player.mainDeckOrder.length; ++i) {\n                    const swapIndex = player.mainDeckOrder[i];\n                    const temp = field.mainDeck[swapIndex];\n                    field.mainDeck[swapIndex] = field.mainDeck[i];\n                    field.mainDeck[i] = temp;\n                }\n            }\n        }\n\n        if (shuffleDecks) {\n            fields.forEach((field, playerIndex) => {\n                if (props.players[playerIndex]) {\n                    field.initialMainDeckOrder = props.players[playerIndex].mainDeckOrder || YGOGameUtils.shuffleCards(field.mainDeck)\n                }\n            });\n        }\n\n        return fields;\n    }\n\n    static getFieldsAsString(ygo: YGOCore) {\n        const log = [];\n\n        log.push(\"---- FIELD STATE ----\");\n\n        const field1 = ygo.getField(0);\n        const field2 = ygo.getField(1);\n\n        log.push(\"Player2: \" + field1.player.name);\n        log.push(\"Hand: \" + field2.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field2.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Monster Zone: \" + field2.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"-------\");\n        log.push(\"Extra Monster Zone: \" + ((field1.extraMonsterZone[0] || field2.extraMonsterZone[0])?.name || \"_\") + \" | \" + ((field1.extraMonsterZone[1] || field2.extraMonsterZone[1])?.name || \"_\"));\n        log.push(\"-------\");\n        log.push(\"Monster Zone: \" + field1.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field1.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Hand: \" + field1.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Player1: \" + field1.player.name);\n\n        return log.join(\"\\n\");\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { MoveCardCommandData } from '../types/commands';\nimport { Card, CardPosition, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MoveCardCommand extends BaseCommand {\n    public data: MoveCardCommandData;\n\n    private prevPosition!: CardPosition;\n    private materialsToGY: Card[];\n\n    constructor(data: MoveCardCommandData) {\n        super();\n        const type = data.type || \"Move Card\";\n        this.type = type;\n        this.data = data;\n        this.materialsToGY = [];\n        this.data.type = type;\n    }\n\n    override exec(): void {\n        console.log(`Exec: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n        const { log = true } = this.data;\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.data.zone === \"ED\" || this.data.zone === \"ED2\") {\n            this.data.position = YGOGameUtils.isPendulumCard(card) ? \"faceup\" : \"facedown\";\n        }\n\n        if (this.data.position) {\n            this.prevPosition = card.position;\n            card.position = this.data.position;\n        }\n\n        // XYZ send materials to GY if send card to Gy or banish\n        if (this.sendMaterialsToGy(card, this.data.zone)) {\n            const overlayZone = YGOUtils.getOverlayZone(this.data.originZone);\n            this.materialsToGY = card.materials;\n            card.materials.forEach(material => {\n                this.YGO.state.setCard(material, \"GY\");\n                this.YGO.duelLog.dispatch<YGODuelEvents.SendToGY>({\n                    player: this.data.player,\n                    commandId: this.getCommandId(),\n                    type: YGODuelEvents.LogType.SendToGY,\n                    id: material.id,\n                    originZone: overlayZone,\n                    zone: this.data.zone,\n                    reason: \"XYZ Material\"\n                });\n            });\n            card.materials = [];\n        }\n\n        // TODO IF PENDULUMN send cards to Extra Deck\n        this.YGO.state.moveCard(card, this.data.originZone, this.data.zone);\n\n        if (log) {\n            this.YGO.duelLog.dispatch<any>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: this.type as any,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.data.zone,\n                position: card.position\n            });\n        }\n    }\n\n    override undo(): void {\n        console.log(`Undo: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.materialsToGY.length > 0) {\n            this.materialsToGY.forEach(() => {\n                this.YGO.state.setCard(null, \"GY\");\n            });\n            card.materials = this.materialsToGY;\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n\n        this.YGO.state.moveCard(card, this.data.zone, this.data.originZone);\n    }\n\n    private sendMaterialsToGy(card: Card, zone: FieldZone): boolean {\n        if (!card.materials || card.materials.length === 0) return false;\n        if (this.data.zone.startsWith(\"GY\")) return true;\n        if (this.data.zone === \"B\" || this.data.zone === \"B2\") return true;\n        if (this.data.zone.startsWith(\"B-\") || this.data.zone.startsWith(\"B2-\")) return true;\n        return false;\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { BanishCommandData, Command } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class BanishCommand extends BaseCommand {\n    private data: BanishCommandData;\n    private zone: FieldZone;\n    private banishCommand: Command;\n\n    constructor(data: BanishCommandData) {\n        super();\n        this.data = data;\n        this.data.position = this.data.position || \"faceup\"\n        this.type = this.data.position === \"faceup\" ? \"Banish\" : \"Banish FD\";\n        this.zone = `B${this.data.player === 0 ? \"\" : \"2\"}-1`;\n\n        this.banishCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.banishCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.banishCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, DestroyCardCommandData, SendCardToGYCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DestroyCardCommand extends BaseCommand {\n    private data: DestroyCardCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: DestroyCardCommandData) {\n        super();\n\n        this.type = \"Destroy\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { DrawFromDeckCommandData } from '../types/commands';\nimport { Card, FieldZone } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class DrawFromDeckCommand extends BaseCommand {\n    private data: DrawFromDeckCommandData;\n    private cards: Card[];\n\n    constructor(data: DrawFromDeckCommandData) {\n        super();\n\n        this.type = \"Draw From Deck\";\n        this.data = data;\n        this.data.numberOfCards = this.data.numberOfCards || 1;\n        this.cards = [];\n    }\n\n    exec(): void {\n        console.log(`Exec: Draw ${this.data.numberOfCards} from Deck`);\n\n        this.cards = [];\n\n        const field = this.YGO.state.fields[this.data.player];\n\n        for (let i = 0; i < this.data.numberOfCards!; ++i) {\n            const card = field.mainDeck.pop()!;\n            console.log(\"DRAW\", card.name);\n            field.hand.push(card);\n            this.cards.push(card);\n            const zone = `H-${field.hand.length}` as FieldZone;\n\n            this.YGO.duelLog.dispatch<YGODuelEvents.DrawFromDeck>({\n                commandId: this.getCommandId(),\n                player: this.data.player,\n                type: YGODuelEvents.LogType.DrawCardFromDeck,\n                id: card.id,\n                zone\n            });\n        }\n    }\n\n    undo(): void {\n        console.log(`Undo: Draw ${this.data.numberOfCards} from Deck`);\n\n        const newCards = [...this.cards].reverse();\n        const field = this.YGO.state.fields[this.data.player];\n\n        console.log(\"CARD DRAW UNDO\");\n        console.log(newCards.map(c => c.name));\n        console.log(\"DECK 1>>\", field.mainDeck.length);\n        for (const card of newCards) {\n            const cardInHandIndex = field.hand.findIndex(c => c === card);\n            if (cardInHandIndex !== -1) {\n                field.hand.splice(cardInHandIndex, 1);\n            }\n        }\n        field.mainDeck.push(...newCards);\n\n        console.log(field.hand.map(c => c.name));\n        console.log(\"DECK 2>>\", field.mainDeck.length);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { NormalSummonCommandData, RevealCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class RevealCommand extends BaseCommand {\n    private data: RevealCommandData;\n\n    constructor(data: NormalSummonCommandData) {\n        super();\n        this.type = \"Reveal\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        this.YGO.duelLog.dispatch<YGODuelEvents.Reveal>({\n            type: YGODuelEvents.LogType.Reveal,\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            id: this.data.id,\n            zone: this.data.zone\n        })\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, FieldSpellCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { RevealCommand } from './RevealCommand';\n\nexport class FieldSpellCommand extends BaseCommand {\n    private data: FieldSpellCommandData;\n    private commands: Command[];\n\n    constructor(data: FieldSpellCommandData) {\n        super();\n\n        this.type = \"Field Spell\";\n        this.data = data;\n        this.data.position = data.position === \"facedown\" ? \"facedown\" : \"faceup\";\n        this.commands = [];\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n\n        if (this.data.reveal) {\n            this.commands.push(new RevealCommand({\n                id: this.data.id,\n                originZone: this.data.zone,\n                player: this.data.player,\n                zone: this.data.zone\n            }))\n        }\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SendCardToGYCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class SendCardToGYCommand extends BaseCommand {\n    private data: SendCardToGYCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: SendCardToGYCommandData) {\n        super();\n\n        this.type = \"Send To GY\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, LinkSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { CardPosition } from '../types/types';\n\nexport class LinkSummonCommand extends BaseCommand {\n    private data: LinkSummonCommandData;\n    private commands: Command[];\n    private position: CardPosition;\n\n    constructor(data: LinkSummonCommandData) {\n        super();\n        this.type = \"Link Summon\";\n        this.data = data;\n        this.position = \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Link Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.LinkSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.LinkSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, MillFromDeckCommandData } from '../types/commands';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MillFromDeckCommand extends BaseCommand {\n    private data: MillFromDeckCommandData;\n    private commands: Command[];\n\n    constructor(data: MillFromDeckCommandData) {\n        super();\n\n        this.type = \"Mill From Deck\";\n        const { numberOfCards = 1 } = data;\n        this.data = data;\n        this.data.numberOfCards = Math.max(1, numberOfCards);\n        this.commands = [];\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const field = this.YGO.getField(this.data.player);\n        const numberOfCards = Math.min(this.data.numberOfCards!, field.mainDeck.length);\n        console.log(this.data);\n        console.log(\"number\", numberOfCards);\n\n        for (let i = 0; i < numberOfCards!; ++i) {\n            const cardIndex = field.mainDeck.length - 1 - i;\n            const card = field.mainDeck[cardIndex];\n\n            console.log(\"WILL MILL \", card.id)\n\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: YGOGameUtils.createZone(\"D\", this.data.player, cardIndex + 1),\n                player: this.data.player\n            }))\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, NormalSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class NormalSummonCommand extends BaseCommand {\n    private data: NormalSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: NormalSummonCommandData) {\n        super();\n        this.type = \"Normal Summon\";\n        this.data = data;\n        this.data.position = \"faceup-attack\";\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetCardCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SetCardCommand extends BaseCommand {\n    private data: SetCardCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SetCardCommandData) {\n        super();\n        this.type = \"Set ST\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"facedown\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetMonsterCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SetMonsterCommand extends BaseCommand {\n    private data: SetMonsterCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SetMonsterCommandData) {\n        super();\n        this.type = \"Set Monster\";\n        this.data = data;\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"facedown\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ShuffleDeckCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ShuffleDeckCommand extends BaseCommand {\n    private data: ShuffleDeckCommandData;\n    private cardPositions!: Array<number>;\n\n    constructor(data: ShuffleDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = \"Shuffle Deck\";\n    }\n\n    exec(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n\n        if (this.cardPositions) {\n            for (let i = 0; i < this.cardPositions.length; ++i) {\n                const index = this.cardPositions[i];\n                const temp = mainDeck[index];\n                mainDeck[index] = mainDeck[i];\n                mainDeck[i] = temp;\n            }\n        } else {\n            this.cardPositions = YGOGameUtils.shuffleCards(mainDeck);\n        }\n\n        if (this.data.log !== false) {\n            this.YGO.duelLog.dispatch<YGODuelEvents.Shuffle>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: YGODuelEvents.LogType.Shuffle\n            });\n        }\n    }\n\n    undo(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n        for (let i = 0; i < this.cardPositions.length; ++i) {\n            const index = this.cardPositions[i];\n            const temp = mainDeck[index];\n            mainDeck[index] = mainDeck[i];\n            mainDeck[i] = temp;\n        }\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SpecialSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SpecialSummonCommand extends BaseCommand {\n    private data: SpecialSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SpecialSummonCommandData) {\n        super();\n        this.type = \"Special Summon\";\n        this.data = data;\n        this.data.position = this.data.position || 'faceup-attack';\n\n        if (this.data.position !== 'faceup-attack'\n            && this.data.position !== 'faceup-defense') {\n            this.data.position = 'faceup-attack';\n        }\n\n        console.log(this.data);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: \"Special Summon\",\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToDeckCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { ShuffleDeckCommand } from './ShuffleDeck';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class ToDeckCommand extends BaseCommand {\n    private data: ToDeckCommandData;\n    private zone!: FieldZone;\n    private commands!: Command[];\n\n    constructor(data: ToDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = this.getCommandType();\n    }\n\n    private isTopCard() {\n        return this.data.position === \"top\";\n    }\n\n    private getCommandType() {\n        return this.isTopCard() ? \"To Top Deck\" : \"To Bottom Deck\";\n    }\n\n    private getDeckIndex(): number {\n        const mainDeck = this.YGO.state.fields[0].mainDeck;\n\n        if (this.isTopCard()) {\n            return mainDeck.length + 1;\n        }\n\n        return 1;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        if (!this.commands) {\n            const deckIndex = this.getDeckIndex();\n            this.zone = `D${this.data.player === 0 ? \"\" : \"2\"}-${deckIndex}`;\n            this.commands = [];\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.zone,\n                //position: \"facedown\", // TODO DECIDE\n            }));\n\n            const { shuffle = false } = this.data;\n\n            if (shuffle) {\n                this.commands.push(new ShuffleDeckCommand({ player: this.data.player }));\n            }\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToExtraDeckCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToExtraDeckCommand extends BaseCommand {\n    private data: ToExtraDeckCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToExtraDeckCommandData) {\n        super();\n        this.type = \"Normal Summon\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"ED\", this.data.player)\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToHandCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToHandCommand extends BaseCommand {\n    private data: ToHandCommandData;\n    private command!: Command;\n\n    constructor(data: ToHandCommandData) {\n        super();\n        this.type = \"To Hand\";\n        this.data = data;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const handIndex = this.YGO.getField(this.data.player).hand.length + 1;\n\n        this.command = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex),\n            position: \"facedown\"\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.command);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.command);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSetCommand extends BaseCommand {\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: TributeSummonCommandData) {\n        super();\n\n        this.type = \"Tribute Set\";\n        this.data = data;\n        this.data.position = \"facedown\";\n\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSummonCommand extends BaseCommand {\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n    \n    constructor(data: TributeSummonCommandData) {\n        super();\n        this.type = \"Tribute Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }))\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { XYZAttachCommandData as XYZAttachMaterialCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZAttachMaterialCommand extends BaseCommand {\n    private data: XYZAttachMaterialCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZAttachMaterialCommandData) {\n        super();\n        this.type = \"XYZ Attach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.YGO.state.setCard(null, this.data.originZone);\n        card.materials.push(this.materialCardReference);\n\n        console.log(\"TCL:: EXEC ATTACH:: \", this.materialCardReference.name, this.data.originZone);\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZAttach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.YGO.state.setCard(this.materialCardReference, this.data.originZone);\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { XYZDetachCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZDetachMaterialCommand extends BaseCommand {\n    private data: XYZDetachCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZDetachCommandData) {\n        super();\n        this.type = \"XYZ Detach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = card.materials[this.data.materialIndex];\n        card.materials.splice(this.data.materialIndex, 1);\n\n        this.YGO.state.setCard(this.materialCardReference, \"GY\");\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZDetach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: card.id,\n            materialIndex: this.data.materialIndex,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n        this.YGO.state.setCard(null, \"GY\");\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { Card, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZSummonCommand extends BaseCommand {\n    private data: XYZSummonCommandData;\n    private commands: Command[];\n    private overlayZone: FieldZone;\n\n    constructor(data: XYZSummonCommandData) {\n        super();\n        this.type = \"XYZ Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n        this.overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new XYZMaterialsMove({\n                player: this.data.player,\n                overlayZone: this.overlayZone,\n                id: material.id,\n                zone: material.zone\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        // TODO: @RMS MATERIALS OF MATERIAL ex: nerd to zeus purrely to noir\n\n        card.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n            return materialCard;\n        });\n\n        this.execMultipleChildCommand(this.commands);\n        \n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position!,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        card.materials = [];\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n\ninterface XYZMaterialsMoveData {\n    player: number,\n    id: number\n    overlayZone: FieldZone\n    zone: FieldZone\n}\n\nclass XYZMaterialsMove extends BaseCommand {\n    private data: XYZMaterialsMoveData;\n    private card!: Card;\n\n    constructor(data: XYZMaterialsMoveData) {\n        super();\n        this.data = data;\n    }\n\n    exec(): void {\n        this.card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        this.YGO.state.setCard(null, this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlay>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlay,\n            id: this.data.id,\n            originZone: this.data.zone,\n            overlayZone: this.data.overlayZone\n        });\n    }\n\n    undo(): void {\n        this.YGO.state.setCard(this.card, this.data.zone);\n    }\n}\n","import { Command } from \"../types/commands\";\nimport { ActivateCardCommand } from \"./ActivateCardCommand\";\nimport { BanishCommand } from \"./BanishCommand\";\nimport { DestroyCardCommand } from \"./DestroyCard\";\nimport { DrawFromDeckCommand } from \"./DrawFromDeckCommand\";\nimport { FieldSpellCommand } from \"./FieldSpellCommand\";\nimport { LinkSummonCommand } from \"./LinkSummonCommand\";\nimport { MillFromDeckCommand } from \"./MillFromDeckCommand\";\nimport { NormalSummonCommand } from \"./NormalSummonCommand\";\nimport { RevealCommand } from \"./RevealCommand\";\nimport { SendCardToGYCommand } from \"./SendCardToGY\";\nimport { SetCardCommand } from \"./SetCardCommand\";\nimport { SetMonsterCommand } from \"./SetMonsterCommand\";\nimport { ShuffleDeckCommand } from \"./ShuffleDeck\";\nimport { SpecialSummonCommand } from \"./SpecialSummonCommand\";\nimport { ToDeckCommand } from \"./ToDeckCommand\";\nimport { ToExtraDeckCommand } from \"./ToExtraDeckCommand\";\nimport { ToHandCommand } from \"./ToHandCommand\";\nimport { TributeSetCommand } from \"./TributeSetCommand\";\nimport { TributeSummonCommand } from \"./TributeSummonCommand\";\nimport { XYZAttachMaterialCommand } from \"./XYZAttachMaterialCommand\";\nimport { XYZDetachMaterialCommand } from \"./XYZDetachMaterialCommand\";\nimport { XYZSummonCommand } from \"./XYZSummonCommand\";\n\nexport const Commands = {\n    NormalSummonCommand,\n    SetMonsterCommand,\n    SetCardCommand,\n    SendCardToGYCommand,\n    BanishCommand,\n    DrawFromDeckCommand,\n    MillFromDeckCommand,\n    ActivateCardCommand,\n    SpecialSummonCommand,\n    TributeSummonCommand,\n    TributeSetCommand,\n    LinkSummonCommand,\n    XYZSummonCommand,\n    XYZAttachMaterialCommand,\n    XYZDetachMaterialCommand,\n    ToDeckCommand,\n    ShuffleDeckCommand,\n    DestroyCardCommand,\n    RevealCommand,\n    ToExtraDeckCommand,\n    ToHandCommand,\n    FieldSpellCommand,\n}\n\nexport const COMMANDS_BY_NAME: any = {\n    \"NormalSummonCommand\": NormalSummonCommand,\n    \"SetMonsterCommand\": SetMonsterCommand,\n    \"SetCardCommand\": SetCardCommand,\n    \"SendCardToGYCommand\": SendCardToGYCommand,\n    \"BanishCommand\": BanishCommand,\n    \"DrawFromDeckCommand\": DrawFromDeckCommand,\n    \"MillFromDeckCommand\": MillFromDeckCommand,\n    \"ActivateCardCommand\": ActivateCardCommand,\n    \"SpecialSummonCommand\": SpecialSummonCommand,\n    \"TributeSummonCommand\": TributeSummonCommand,\n    \"TributeSetCommand\": TributeSetCommand,\n    \"LinkSummonCommand\": LinkSummonCommand,\n    \"XYZSummonCommand\": XYZSummonCommand,\n    \"XYZAttachMaterialCommand\": XYZAttachMaterialCommand,\n    \"XYZDetachMaterialCommand\": XYZDetachMaterialCommand,\n    \"ToDeckCommand\": ToDeckCommand,\n    \"ShuffleDeckCommand\": ShuffleDeckCommand,\n    \"DestroyCardCommand\": DestroyCardCommand,\n    \"RevealCommand\": RevealCommand,\n    \"ToExtraDeckCommand\": ToExtraDeckCommand,\n    \"ToHandCommand\": ToHandCommand,\n    \"FieldSpellCommand\": FieldSpellCommand\n}\n\nexport function GetCommandByClassName<T = Command>(commandClassName: string): T | null {\n    return COMMANDS_BY_NAME[commandClassName];\n}","export class EventBus<T extends Record<string, (...args: any[]) => void>> {\n    private events: Map<keyof T, Function[]>;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    on<K extends keyof T>(event: K, listener: T[K]): void {\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n        this.events.get(event)!.push(listener);\n    }\n\n    dispatch<K extends keyof T>(event: K, ...args: Parameters<T[K]>): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            listeners.forEach(listener => listener(...args));\n        }\n    }\n\n    off<K extends keyof T>(event: K, listener: T[K]): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            this.events.set(\n                event,\n                listeners.filter(l => l !== listener)\n            );\n        }\n    }\n\n    clear<K extends keyof T>(event: K): void {\n        if (this.events.has(event)) {\n            this.events.delete(event);\n        }\n    }\n\n    clearAll(): void {\n        this.events.clear();\n    }\n}","import { Command } from \"../types/commands\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelEvents } from '../types/duel-events';\n\ntype YGODuelLogEventMap = {\n    'new-log': (log: YGODuelEvents.DuelLog) => void;\n    'update-logs': (logs: YGODuelEvents.DuelLog[]) => void;\n};\n\nexport class YGODuelLog {\n    public logs: YGODuelEvents.DuelLog[];\n    public events: EventBus<YGODuelLogEventMap>;\n\n    constructor() {\n        this.logs = [];\n        this.events = new EventBus();\n    }\n\n    dispatch<T extends YGODuelEvents.DuelLog>(log: T) {\n        this.logs.push(log);\n        this.events.dispatch(\"new-log\", log);\n        this.onLogsUpdated();\n    }\n\n    peek(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length == 0) return null;\n        return this.logs[this.logs.length - 1];\n    }\n\n    peekCommand(): number {\n        if (this.logs.length == 0) return -1;\n        return this.logs[this.logs.length - 1].commandId;\n    }\n\n    pop(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length === 0) return null;\n        return this.logs.pop() as YGODuelEvents.DuelLog;\n    }\n\n    removeCommand(command: Command, args?: { log: boolean }) {\n        for (let i = this.logs.length - 1; i >= 0; --i) {\n            if (this.logs[i].commandId === command.commandId) {\n                this.logs.splice(i, 1);\n            } else {\n                break;\n            }\n        }\n\n        if (args?.log !== false) {\n            this.events.dispatch(\"update-logs\", this.logs);\n        }\n\n        // const lastCommand = this.peekCommand();\n\n        // if (lastCommand === command) {\n        //     this.entries.pop();\n\n        //     if (args?.log !== false) {\n        //         // this.events.dispatch(\"remove\", logEntry);\n        //         this.events.dispatch(\"logs-updated\", this.entries);\n        //     }\n        // }\n    }\n\n    onLogsUpdated() {\n        this.events.dispatch(\"update-logs\", this.logs);\n    }\n}","import { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\nimport { YGOUtils } from \"./YGOUtils\";\n\nexport class YGOGameState {\n    public fields: PlayerField[];\n    private cardsInGame: Map<number, Card>;\n\n    constructor(props: YGOProps) {\n        this.fields = YGOUtils.initializePlayersFields(props);\n        this.cardsInGame = YGOUtils.getCardsInGame(this.fields);\n    }\n\n    getCardById(id: number, zone: FieldZone): Card {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone === \"GY\" || zone === \"GY2\") {\n            const card = this.fields[playerIndex].graveyard.find(c => c.id === id);\n\n            if (!card) {\n                throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n            }\n\n            return card;\n        }\n\n        const card = this.getCardFromZone(zone);\n\n        if (card && card.id === id) return card;\n\n        throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n    }\n\n    getCardFromZone(zone: FieldZone): Card | null {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].hand[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].monsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].spellTrapZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].graveyard[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].banishedZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].mainDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"ED-\") || zone.startsWith(\"ED2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraMonsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            const card = this.fields[playerIndex].fieldZone;\n            return card;\n        }\n\n        return null;\n    }\n\n    moveCardById(cardId: number, originZone: FieldZone, zone: FieldZone) {\n        const card = this.getCardById(cardId, originZone);\n        this.moveCard(card, originZone, zone);\n    }\n\n    moveCard(card: Card, originZone: FieldZone, zone: FieldZone) {\n        this.removeCard(originZone);\n        this.setCard(card, zone);\n    }\n\n    setCard(card: Card | null, zone: FieldZone): void {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\") || zone === \"H\" || zone === \"H2\") {\n            const handIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const hand = this.fields[playerIndex].hand;\n\n            if (handIndex == -1 && card) {\n                hand.push(card);\n            } else if (card) {\n                if (handIndex >= hand.length) {\n                    hand.push(card);\n                } else {\n                    hand.splice(handIndex, 0, card);\n                }\n            } else {\n                hand.splice(handIndex, 1);\n            }\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].monsterZone[zoneIndex] = card;\n            // todo check if monster etc \n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].spellTrapZone[zoneIndex] = card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].extraMonsterZone[zoneIndex] = card;\n        }\n        else if (zone.startsWith(\"ED\") || zone.startsWith(\"ED2\")) { // append to extra\n            if (zone.indexOf(\"-\") !== -1) {\n                const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n                if (!card) {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 1);\n                } else {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 0, card);\n                }\n            } else if (card) {\n                const isPendulum = card.isMainDeckCard && YGOGameUtils.isPendulumCard(card);\n                const extraDeck = this.fields[playerIndex].extraDeck;\n\n                if (isPendulum) {\n                    extraDeck.unshift(card); // add card to top of extraDeck\n                } else {\n                    const weight = YGOGameUtils.getCardBaseType(card);\n                    const index = extraDeck.findIndex(c => {\n                        const weight2 = YGOGameUtils.getCardBaseType(c);\n                        return weight < weight2 || (weight === weight2 && card.name < c.name);\n                    });\n\n                    if (index !== -1) {\n                        extraDeck.splice(index, 0, card);\n                    } else {\n                        extraDeck.push(card);\n                    }\n                }\n            } else {\n                throw new Error(\"No card to add to Extra Deck\");\n            }\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n\n            console.log(\"MOVE CARD TO DECK \", zone);\n\n            if (!card) {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 1);\n            } else {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 0, card);\n            }\n        } else if (zone === \"GY\" || zone === \"GY2\" || zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const gy = this.fields[playerIndex].graveyard;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    gy.unshift(card);\n                } else {\n                    gy.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    gy.pop();\n                } else {\n                    gy.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone === \"B\" || zone === \"B2\" || zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const banishZone = this.fields[playerIndex].banishedZone;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    banishZone.unshift(card);\n                } else {\n                    banishZone.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    banishZone.pop();\n                } else {\n                    banishZone.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            this.fields[playerIndex].fieldZone = card;\n        }\n    }\n\n    removeCard(zone: FieldZone): Card | null {\n        const card = this.getCardFromZone(zone);\n        this.setCard(null, zone);\n        // TODO Reset card\n        return card;\n    }\n\n    getCardData(cardId: number): Card | null {\n        return this.cardsInGame.get(cardId) || null;\n    }\n\n    shuffleDeck(player: number) {\n        const deck = this.fields[player].mainDeck;\n        if (deck.length === 0) return; // If the deck is empty, do nothing\n\n        for (let i = deck.length - 1; i > 0; i--) {\n            const cardIndex = Math.floor(Math.random() * (i + 1));\n            [deck[i], deck[cardIndex]] = [deck[cardIndex], deck[i]];\n        }\n    }\n\n    getPlayerIndexFromZone(zone: string): 0 | 1 {\n        return YGOUtils.getPlayerIndexFromZone(zone);\n    }\n\n    getAvailableZones(fieldZones: (\"M\" | \"M2\" | \"S\" | \"S2\" | \"F\" | \"F2\" | \"EMZ\")[]): FieldZone[] {\n        const result: FieldZone[] = [];\n\n        // TODO @RMS  make this player aware\n\n        for (const fieldZone of fieldZones) {\n            const player = this.getPlayerIndexFromZone(fieldZone);\n            const field = this.fields[player];\n            if (fieldZone === \"M\") {\n                field.monsterZone.forEach((data, index) => {\n                    const zone = `M${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"S\") {\n                field.spellTrapZone.forEach((data, index) => {\n                    const zone = `S${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"EMZ\") {\n                for (let i = 0; i < 2; ++i) {\n                    const data = field.extraDeck[i] || field.extraDeck[i];\n                    const zone = `EMZ-${i + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                }\n            } else if (fieldZone === \"F\") {\n                if (field.fieldZone) result.push(\"F\");\n            }\n        }\n\n        return result;\n    }\n}","import { Card, FieldZone } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\nexport class YGOReplayUtils {\n    static createReplayData(ygo: YGOCore) {\n        const players = ygo.props.players.map((playerData, playerIndex) => {\n            return {\n                name: playerData.name,\n                deck: playerData.mainDeck.map(c => c.id),\n                mainDeckOrder: ygo.getField(playerIndex).initialMainDeckOrder,\n                extraDeck: playerData.mainDeck.map(c => c.id),\n            }\n        });\n\n        const commands = ygo.commands.map(cmd => cmd.toJSON());\n\n        const endField: any = [];\n\n        for (let playerIndex = 0; playerIndex < ygo.state.fields.length; ++playerIndex) {\n            const playerEndField: any = [];\n            const field = ygo.getField(playerIndex);\n\n            for (let i = 0; i < field.monsterZone.length; ++i) {\n                if (field.monsterZone[i]) {\n                    const card = field.monsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"M\", playerIndex, i + 1);\n                    playerEndField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.spellTrapZone.length; ++i) {\n                if (field.spellTrapZone[i]) {\n                    const card = field.spellTrapZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"S\", playerIndex, i + 1);\n                    playerEndField.push({ id: card.id, zone });\n                }\n            }\n\n            for (let i = 0; i < field.extraMonsterZone.length; ++i) {\n                if (field.extraMonsterZone[i]) {\n                    const card = field.extraMonsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"EMZ\", playerIndex, i + 1);\n                    playerEndField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.graveyard.length; ++i) {\n                const card = field.graveyard[i];\n                const zone = YGOGameUtils.createZone(\"GY\", playerIndex);\n                playerEndField.push({ id: card.id, zone });\n            }\n\n            for (let i = 0; i < field.banishedZone.length; ++i) {\n                const card = field.banishedZone[i];\n                const zone = YGOGameUtils.createZone(\"B\", playerIndex);\n                const result: any = { id: card.id, zone };\n\n                if (YGOGameUtils.isFaceDown(card)) {\n                    result.position = \"facedown\"\n                }\n\n                playerEndField.push(result);\n            }\n\n            endField.push(playerEndField);\n        }\n\n        // todo get end field etc..\n        return {\n            players,\n            commands,\n            endField\n        }\n    }\n\n    private static getMonsterCardInfo(card: Card, zone: FieldZone): any {\n        const result: any = {\n            id: card.id,\n            zone\n        }\n\n        if (card.atk !== card.currentAtk) {\n            result.atk = card.currentAtk;\n        }\n\n        if (card.def !== card.def) {\n            result.atk = card.currentAtk;\n        }\n\n        if (card.position !== \"faceup-attack\") {\n            result.position = card.position;\n        }\n\n        if (card.materials.length > 0) {\n            result.materials = card.materials.map(materialCard => materialCard.id);\n        }\n\n        return result;\n    }\n}","import { GetCommandByClassName, Commands as YGOCommands } from \"../commands\";\nimport { Command } from \"../types/commands\";\nimport { PlayerField, YGOProps } from \"../types/types\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelLog } from \"./YGODuelLog\";\nimport { YGOGameState } from \"./YGOGameState\";\nimport { YGOReplayUtils } from \"./YGOReplayUtils\";\n\nexport class YGOCore {\n    // private\n    private commandId: number;\n    // public\n    public props: YGOProps;\n    public state: YGOGameState;\n    public commands: Command[];\n    public commandIndex: number = -1;\n    public duelLog: YGODuelLog;\n    public events: EventBus<any>;\n\n    constructor(props: YGOProps) {\n        this.props = props;\n        this.state = new YGOGameState(props);\n        this.duelLog = new YGODuelLog();\n        this.events = new EventBus();\n        this.commands = this.createYGOCommands(props.commands);\n        this.commandId = 0;\n    }\n\n    start() {\n        if (this.commands.length === 0) {\n            this.props.players.forEach((_, player) => {\n                const field = this.getField(player);\n                const numberOfCards = field.initialHandSize;\n                if (numberOfCards > 0 && field.hand.length === 0) {\n                    this.exec(new YGOCommands.DrawFromDeckCommand({\n                        player,\n                        numberOfCards\n                    }));\n                }\n            });\n        }\n    }\n\n    exec(command: Command): Command {\n        if (this.hasNextCommand()) {\n            this.commands.splice(this.commandIndex + 1, this.commands.length - this.commandIndex);\n        }\n        this.commandIndex = this.commands.length;\n        this.commands.push(command);\n        command.init(this);\n        command.exec();\n        return command;\n    }\n\n    peek(): Command | null {\n        return this.commands.length > 0 ? this.commands[this.commands.length - 1] : null;\n    }\n\n    redo(): Command | null {\n        if (!this.hasNextCommand()) return null;\n        this.commandIndex++;\n        const cmdToRedo = this.commands[this.commandIndex];\n        cmdToRedo.exec();\n\n        this.duelLog.onLogsUpdated();\n\n        return cmdToRedo;\n    }\n\n    undo(): Command | null {\n        if (!this.hasPrevCommand()) return null;\n\n        const cmdToUndo = this.commands[this.commandIndex];\n\n        this.duelLog.removeCommand(cmdToUndo);\n        cmdToUndo.undo();\n        this.commandIndex--;\n        this.duelLog.onLogsUpdated();\n\n        return cmdToUndo;\n    }\n\n    goToCommand(command: Command): boolean {\n\n        const commandIndex = this.commands.findIndex(c => c === command);\n\n        if (commandIndex === -1) return false;\n\n        if (commandIndex === this.commandIndex) return true;\n\n        if (commandIndex > this.commandIndex) {\n            while (this.commandIndex !== commandIndex && this.hasNextCommand()) {\n                this.redo();\n            }\n            return true;\n        } else {\n            while (this.commandIndex !== commandIndex && this.hasPrevCommand()) {\n                this.undo();\n            }\n            return true;\n        }\n    }\n\n    hasNextCommand() {\n        return this.commands.length - 1 > this.commandIndex;\n    }\n\n    hasPrevCommand() {\n        return this.commandIndex >= 0;\n    }\n\n    getNextCommandId() {\n        return ++this.commandId;\n    }\n\n    getReplayData() {\n\n        while (this.hasNextCommand()) {\n            this.redo();\n        }\n\n        return YGOReplayUtils.createReplayData(this);\n    }\n\n    getField(player: number): PlayerField {\n        return this.state.fields[player];\n    }\n\n    private createYGOCommands(commands?: any[]) {\n        if (Array.isArray(commands)) {\n            const loadedCommands = commands.map(cmd => {\n                const CommandClass = GetCommandByClassName(cmd.type);\n\n                if (!CommandClass) throw new Error(`Command \"${cmd.type}\" dont exists!`);\n\n                const command = new (CommandClass as any)(cmd.data)\n                command.init(this);\n                return command;\n            });\n            return loadedCommands;\n        }\n        return [];\n    }\n}","import { Commands } from './commands';\n\nexport * from './game/YGOCore';\nexport * from './game/YGODuelLog';\nexport * from './game/YGOGameUtils';\nexport * from './types/duel-events';\n\nexport const YGOCommands = Commands;"],"names":["BaseCommand","constructor","this","commandId","parent","init","ygo","YGO","getNextCommandId","getCommandId","_a","undefined","execChildCommand","command","exec","undoChildCommand","undo","undoMultipleChildCommand","commands","i","length","execMultipleChildCommand","isValid","toJSON","self","data","type","name","YGODuelEvents","CardBaseType","LogType","ActivateCardCommand","super","card","state","getCardById","id","originZone","zone","removeCard","setCard","console","log","prevPosition","position","duelLog","dispatch","player","Activate","YGOGameUtils","isLinkMonster","typeline","includes","isXYZMonter","isPendulumCard","frameType","isFaceUp","isFaceDown","hasLinkMonstersInField","field","monsterZone","some","extraMonsterZone","hasXyzMonstersInField","getPlayerIndexFromZone","createZone","getZoneInfo","args","split","playerIndex","zoneId","Number","endsWith","substring","zonePosition","getCardBaseType","startsWith","EffectMonster","Spell","RitualMonster","Trap","FusionMonster","SynchroMonster","XYZMonster","LinkMonster","NormalMonster","getCardsBaseType","cards","map","c","toSortedCards","sortCards","cardsToSort","cardsWeights","j","shuffleCards","positions","Array","index","Math","floor","random","temp","YGOUtils","parseMainDeck","mainDeck","parseCard","isMainDeckCard","parseExtraDeck","extraDeck","extra","owner","originalOwner","materials","getCardsInGame","fields","Map","has","set","getOverlayZone","zoneIndex","initializePlayersFields","props","shuffleDecks","options","cardIndex","lp","hand","initialHandSize","initialMainDeckOrder","spellTrapZone","fieldZone","graveyard","banishedZone","players","_","forEach","mainDeckOrder","swapIndex","getFieldsAsString","push","field1","getField","field2","join","_b","MoveCardCommand","materialsToGY","sendMaterialsToGy","overlayZone","material","SendToGY","reason","moveCard","BanishCommand","banishCommand","DestroyCardCommand","moveCardCommand","DrawFromDeckCommand","numberOfCards","pop","DrawCardFromDeck","newCards","reverse","cardInHandIndex","findIndex","splice","RevealCommand","Reveal","FieldSpellCommand","reveal","SendCardToGYCommand","LinkSummonCommand","LinkSummon","MillFromDeckCommand","max","min","NormalSummonCommand","SetCardCommand","SetMonsterCommand","ShuffleDeckCommand","cardPositions","Shuffle","SpecialSummonCommand","ToDeckCommand","getCommandType","isTopCard","getDeckIndex","deckIndex","shuffle","ToExtraDeckCommand","ToHandCommand","handIndex","TributeSetCommand","tributes","cmd","TributeSummonCommand","XYZAttachMaterialCommand","getCardFromZone","materialCardReference","XYZSummon","indexOf","XYZDetachMaterialCommand","materialIndex","XYZDetachMaterial","XYZSummonCommand","XYZMaterialsMove","XYZOverlay","Commands","COMMANDS_BY_NAME","EventBus","events","on","event","listener","get","listeners","off","filter","l","clear","delete","clearAll","YGODuelLog","logs","onLogsUpdated","peek","peekCommand","removeCommand","YGOGameState","cardsInGame","find","Error","moveCardById","cardId","isPendulum","unshift","weight","weight2","gyIndex","gy","banishZone","getCardData","shuffleDeck","deck","getAvailableZones","fieldZones","result","YGOReplayUtils","createReplayData","playerData","endField","playerEndField","getMonsterCardInfo","atk","currentAtk","def","materialCard","YGOCore","commandIndex","createYGOCommands","start","YGOCommands","hasNextCommand","redo","cmdToRedo","hasPrevCommand","cmdToUndo","goToCommand","getReplayData","isArray","CommandClass","commandClassName"],"mappings":"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"}