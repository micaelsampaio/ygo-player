{"version":3,"file":"index.js","sources":["../src/commands/BaseCommand.ts","../src/types/duel-events.ts","../src/types/types.ts","../src/game/YGOGameUtils.ts","../src/commands/ActivateCardCommand.ts","../src/game/YGOUtils.ts","../src/commands/MoveCardCommand.ts","../src/commands/BanishCommand.ts","../src/commands/ChangeCardAtkDefCommand.ts","../src/commands/ChangeCardPositionCommand.ts","../src/commands/DestroyCard.ts","../src/commands/DrawFromDeckCommand.ts","../src/commands/RevealCommand.ts","../src/commands/SendCardToGY.ts","../src/commands/FieldSpellCommand.ts","../src/commands/FlipCommand.ts","../src/commands/FusionSummonCommand.ts","../src/commands/LinkSummonCommand.ts","../src/commands/MillFromDeckCommand.ts","../src/commands/NormalSummonCommand.ts","../src/commands/SetCardCommand.ts","../src/commands/SetMonsterCommand.ts","../src/commands/ShuffleDeck.ts","../src/commands/SpecialSummonCommand.ts","../src/commands/StartHandCommand.ts","../src/commands/SynchroSummonCommand.ts","../src/commands/ToDeckCommand.ts","../src/commands/ToExtraDeckCommand.ts","../src/commands/ToHandCommand.ts","../src/commands/ToSTCommand.ts","../src/commands/TributeSetCommand.ts","../src/commands/TributeSummonCommand.ts","../src/commands/XYZAttachMaterialCommand.ts","../src/commands/XYZDetachMaterialCommand.ts","../src/commands/XYZSummonCommand.ts","../src/commands/index.ts","../src/utils/event-bus.ts","../src/game/YGODuelLog.ts","../src/game/YGOGameState.ts","../src/game/YGOReplayUtils.ts","../src/game/YGOCore.ts","../src/index.ts"],"sourcesContent":["import { YGOCore } from \"../game/YGOCore\";\nimport { CommandType, Command } from \"../types/commands\";\n\nexport abstract class BaseCommand implements Command {\n\n    protected YGO!: YGOCore;\n    public type!: CommandType;\n    public baseType!: string;\n    public commandId: number = -1;\n    public parent: Command | null = null;\n\n    constructor() { }\n\n    init(ygo: YGOCore) {\n        this.YGO = ygo;\n        this.commandId = this.YGO.getNextCommandId();\n    }\n\n    getCommandId() {\n        return this.parent?.commandId || this.commandId;\n    }\n\n    execChildCommand(command: Command): Command | undefined {\n        command.parent = this.parent ? this.parent : this;\n        command.init(this.YGO);\n        command.exec();\n        return command;\n    }\n\n    undoChildCommand(command: Command | undefined): Command | undefined {\n        command?.undo();\n        return command;\n    }\n\n    undoMultipleChildCommand(commands: Command[]): void {\n        for (let i = commands.length - 1; i >= 0; --i) {\n            commands[i]?.undo();\n        }\n    }\n\n    execMultipleChildCommand(commands: Command[]): void {\n        for (const command of commands) {\n            this.execChildCommand(command);\n        }\n    }\n\n    isValid(): boolean {\n        return true;\n    }\n\n    exec(): void {\n\n    }\n\n    undo(): void {\n\n    }\n\n    toJSON<T extends any = any>(): { type: string, data: T } {\n        const self = this as any;\n        const data = self.data || {};\n\n        return {\n            type: this.baseType,\n            data,\n        };\n    }\n}","import { CardPosition, FieldZone } from \"./types\";\n\nexport namespace YGODuelEvents {\n    export enum LogType {\n        NormalSummon = \"Normal Summon\",\n        SetMonster = \"Set Monster\",\n        SendToGY = \"Send To GY\",\n        Banish = \"Banish\",\n        BanishFD = \"Banish FD\",\n        StartHand = \"Start Hand\",\n        DrawCardFromDeck = \"Draw From Deck\",\n        MillCardFromDeck = \"Mill From Deck\",\n        TributeSummon = \"Tribute Summon\",\n        TributeSet = \"Tribute Set\",\n        ToHand = \"To Hand\",\n        ToExtraDeck = \"To Extra Deck\",\n        ToTopDeck = \"To Top Deck\",\n        ToBottomDeck = \"To Bottom Deck\",\n        SpecialSummon = \"Special Summon\",\n        SynchroSummon = \"Synchro Summon\",\n        LinkSummon = \"Link Summon\",\n        FusionSummon = \"Fusion Summon\",\n        XYZSummon = \"XYZ Summon\",\n        XYZAttachMaterial = \"XYZ Attach Material\",\n        XYZDetachMaterial = \"XYZ Detach Material\",\n        XYZOverlay = \"XYZOverlay\",\n        SetST = \"Set ST\",\n        Activate = \"Activate\",\n        MoveCard = \"Move Card\",\n        Shuffle = \"Shuffle\",\n        ToST = \"To ST\",\n        Reveal = \"Reveal\",\n        Target = \"Target\",\n        FieldSpell = \"Field Spell\",\n        ChangeCardPosition = \"Change Card Position\",\n        ChangeCardAtkDef = \"Change Card Atk Def\",\n        Flip = \"Flip\"\n    }\n\n    export interface DuelLog {\n        type: LogType;\n        player: number;\n        commandId: number;\n    }\n\n    export interface NormalSummon extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface MoveCard extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface ToHand extends MoveCard { }\n\n    export interface SetMonster extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone?: FieldZone;\n    }\n\n    export interface SetST extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone?: FieldZone;\n    }\n\n    export interface SendToGY extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone,\n        reason?: \"Fusion Summon\" | \"Synchro Summon\" | \"Link Summon\" | \"XYZ Material\" | undefined\n    }\n\n    export interface DrawFromDeck extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n    }\n\n    export interface StartHand extends DuelLog {\n        cards: { id: number, zone: FieldZone }[],\n        core: boolean\n    }\n\n    export interface FusionSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface SynchroSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface LinkSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZAttach extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZOverlay extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZDetach extends DuelLog {\n        id: number\n        overlayZone: FieldZone\n        materialIndex: number\n    }\n\n    export interface Activate extends DuelLog {\n        id: number\n        originZone?: FieldZone\n        zone: FieldZone\n        previousPosition: CardPosition\n        position: CardPosition\n    }\n\n    export interface Banish extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface Shuffle extends DuelLog { }\n\n    export interface Reveal extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n    }\n\n    export interface Target extends DuelLog {\n        id: number;\n        zone: FieldZone;\n    }\n\n    export interface ChangeCardPosition extends DuelLog {\n        id: number\n        originZone: FieldZone\n        previousPosition: CardPosition\n        position: CardPosition\n    }\n\n    export interface ChangeCardAtkDef extends DuelLog {\n        id: number;\n        zone: FieldZone;\n        atk: number | null\n        def: number | null\n    }\n\n    export interface Flip extends DuelLog {\n        id: number\n        originZone: FieldZone\n        previousPosition: CardPosition\n        position: CardPosition\n    }\n\n    export interface ToExtraDeck extends DuelLog {\n        id: number,\n        originZone: FieldZone\n    }\n\n    export interface MillCardFromDeck extends DuelLog {\n        // TODO\n    }\n}\n\n","export const NUM_ZONES: number = 5; // Number of primary zones (Monster, Spell/Trap, etc.)\nexport type PlayerSide = 0 | 1 | number; // 0 represents Player 1, 1 represents Player 2\n\nexport type CardPosition = \"faceup-attack\" | \"faceup-defense\" | \"faceup\" | \"facedown\";\n\nexport type FieldZone = `M-${1 | 2 | 3 | 4 | 5}`\n    | `M2-${1 | 2 | 3 | 4 | 5}`\n    | `S-${1 | 2 | 3 | 4 | 5}`\n    | `S2-${1 | 2 | 3 | 4 | 5}`\n    | `EMZ`\n    | `EMZ2`\n    | `EMZ-${1 | 2}`\n    | `EMZ2-${1 | 2}`\n    | `ORU-${1 | 2 | 3 | 4 | 5}` // Overlay Units ORU Xyz Materials\n    | `ORU2-${1 | 2 | 3 | 4 | 5}`\n    | `ORUEMZ-${1 | 2}` // Xyz Materials in extra monster zone :)\n    | `ORUEMZ2-${1 | 2}`\n    | \"H\"\n    | \"H2\"\n    | `H-${number}`\n    | `H2-${number}`\n    | \"F\"\n    | \"F2\"\n    | \"GY\"\n    | \"GY2\"\n    | `GY-${number}`\n    | `GY2-${number}`\n    | \"B\"\n    | \"B2\"\n    | `B-${number}`\n    | `B2-${number}`\n    | \"D\"\n    | \"D2\"\n    | `D-${number}`\n    | `D2-${number}`\n    | \"ED\"\n    | \"ED2\"\n    | `ED-${number}`\n    | `ED2-${number}`;\n\nexport type FieldZoneId = \"M\" | \"S\" | \"EMZ\" | \"GY\" | \"D\" | \"ED\" | \"B\" | \"F\" | \"ORU\" | \"ORUEMZ\" | \"H\";\n\nexport type FieldZoneData = { zone: FieldZoneId, player: number, zoneIndex: number }\n\nexport enum CardBaseType {\n    NormalMonster,\n    EffectMonster,\n    RitualMonster,\n    Spell,\n    Trap,\n    FusionMonster,\n    SynchroMonster,\n    XYZMonster,\n    LinkMonster,\n}\n\nexport interface YGOProps {\n    players: {\n        name: string,\n        mainDeck: CardData[], // Card Data is the same as https://ygoprodeck.com/api-guide\n        extraDeck: CardData[] // Card Data is the same as https://ygoprodeck.com/api-guide\n        mainDeckOrder?: number[]\n    }[],\n    commands?: { type: string, data: any }[]\n    options?: {\n        lp?: number, // default `8000`\n        draw?: number, // default `5`\n        shuffleDecks?: boolean // default value is `true`,\n        fieldState?: FileldStateEntry[][] // default\n    }\n}\n\nexport interface FileldStateEntry {\n    id: number,\n    zone: FieldZone\n    atk?: number\n    def?: number\n    owner?: number\n    position?: CardPosition\n    materials?: Array<{ id: number, owner?: number }>\n}\n\nexport interface CardData {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    attribute: string\n    card_images: any\n}\n\nexport interface Card {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    linkval: number\n    attribute: string\n    card_images: any\n    // game_data\n    index: number // internal unique ID\n    owner: number\n    isMainDeckCard: boolean\n    originalOwner: number\n    position: CardPosition\n    currentAtk: number\n    currentDef: number\n    materials: Card[]\n}\n\nexport interface PlayerInfo {\n    name: string;\n}\n\nexport interface PlayerField {\n    lp: number,\n    player: PlayerInfo\n    mainDeck: Card[]\n    extraDeck: Card[]\n    hand: Card[]\n    initialMainDeckOrder: number[];\n    graveyard: Card[]\n    banishedZone: Card[]\n    // Zones on the field where cards are actively played\n    monsterZone: Array<Card | null>\n    spellTrapZone: Array<Card | null>\n    fieldZone: Card | null;\n    extraMonsterZone: Array<Card | null>;\n}\n\nexport interface GameState {\n    players: PlayerInfo[];\n    fields: PlayerField[];\n}\n","import { Card, CardBaseType, FieldZone, FieldZoneId, FieldZoneData, PlayerField } from \"../types/types\";\n\n// Only functions for game utils\nexport class YGOGameUtils {\n\n    static isLinkMonster(card: Card): boolean {\n        return card.typeline?.includes(\"Link\");\n    }\n\n    static isMonster(card: Card): boolean {\n        return card.type?.includes(\"Monster\");\n    }\n\n    static isXYZMonster(card: Card) {\n        return card.typeline?.includes(\"Xyz\");\n    }\n\n    static isSynchroMonster(card: Card) {\n        return card.typeline?.includes(\"Synchro\");\n    }\n\n    static isFusionMonster(card: Card) {\n        return card.typeline?.includes(\"Fusion\");\n    }\n\n    static isPendulumCard(card: Card) {\n        return card.frameType?.includes(\"pendulum\");\n    }\n\n    static isFaceUp(card: Card): boolean {\n        return card.position.includes(\"faceup\");\n    }\n\n    static isFaceDown(card: Card): boolean {\n        return !this.isFaceUp(card);\n    }\n\n    static isSpellTrap(card: Card) {\n        return this.isSpell(card) || this.isTrap(card);\n    }\n\n    static isSpell(card: Card) {\n        return card.frameType.startsWith(\"spell\");\n    }\n\n    static isTrap(card: Card) {\n        return card.frameType.startsWith(\"trap\");\n    }\n\n    static isFieldSpell(card: Card) {\n        return card.race === \"Field\";\n    }\n\n    static isDefense(card: Card) {\n        return card.position === \"facedown\" || card.position === \"faceup-defense\";\n    }\n\n    static isAttack(card: Card) {\n        return card.position === \"faceup-attack\" || card.position === \"faceup\";\n    }\n\n    static hasLinkMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false);\n    }\n\n    static hasXyzMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isXYZMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isXYZMonster(card) : false);\n    }\n\n    static getPlayerIndexFromZone(zone: string): number {\n        const isPlayer2 = zone.includes(\"2-\");\n\n        if (isPlayer2) return 1;\n\n        switch (zone) {\n            case \"M2\":\n            case \"H2\":\n            case \"F2\":\n            case \"GY2\":\n            case \"EMZ2-1\":\n            case \"EMZ2-2\":\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    static createZone(zone: FieldZoneId, player: number, position?: number): FieldZone {\n\n        if (position === undefined) {\n            return `${zone}${player === 0 ? '' : '2'}` as FieldZone;\n        }\n\n        return `${zone}${player === 0 ? '' : '2'}-${position}` as FieldZone;\n    }\n\n    static getZoneData(zone: FieldZone): FieldZoneData {\n        const args = zone.split(\"-\");\n        let playerIndex = 0;\n        let zoneId = args[0];\n        const zoneIndex = args.length > 1 ? Number(args[1]) : -1;\n\n        if (args[0].endsWith(\"2\")) {\n            playerIndex = 1;\n            zoneId = zoneId.substring(0, zoneId.length - 1);\n        }\n\n        return {\n            zone: zoneId as FieldZoneId,\n            player: playerIndex,\n            zoneIndex: zoneIndex,\n        }\n    }\n\n    static getCardBaseType(card: Card): CardBaseType {\n        if (card.frameType.startsWith(\"effect\")) return CardBaseType.EffectMonster;\n        if (card.frameType.startsWith(\"spell\")) return CardBaseType.Spell;\n        if (card.frameType.startsWith(\"ritual\")) return CardBaseType.RitualMonster;\n        if (card.frameType.startsWith(\"trap\")) return CardBaseType.Trap;\n        if (card.frameType.includes(\"fusion\")) return CardBaseType.FusionMonster;\n        if (card.frameType.includes(\"synchro\")) return CardBaseType.SynchroMonster;\n        if (card.frameType.includes(\"xyz\")) return CardBaseType.XYZMonster;\n        if (card.frameType.includes(\"link\")) return CardBaseType.LinkMonster;\n        return CardBaseType.NormalMonster;\n    }\n\n    static getCardsBaseType(cards: Card[]): CardBaseType[] {\n        const result = cards.map(c => YGOGameUtils.getCardBaseType(c));\n        return result;\n    }\n\n    static toSortedCards(cards: Card[]) {\n        return this.sortCards([...cards]);\n    }\n\n    static sortCards(cardsToSort: Card[]) {\n        const cards = cardsToSort;\n        const cardsWeights = YGOGameUtils.getCardsBaseType(cards);\n\n        for (let i = 0; i < cards.length - 1; ++i) {\n            for (let j = 0; j < cards.length - i - 1; ++j) {\n                if (cardsWeights[j] > cardsWeights[j + 1] || (cardsWeights[j] === cardsWeights[j + 1] && cards[j].name > cards[j + 1].name)) {\n                    [cards[j], cards[j + 1]] = [cards[j + 1], cards[j]];\n                    [cardsWeights[j], cardsWeights[j + 1]] = [cardsWeights[j + 1], cardsWeights[j]];\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static shuffleCards(cards: Card[]): Array<number> {\n        const positions = Array<number>(cards.length);\n        for (let i = 0; i < cards.length; ++i) {\n            const index = Math.floor(Math.random() * cards.length);\n\n            positions[i] = index;\n\n            const temp = cards[i];\n            cards[i] = cards[index];\n            cards[index] = temp;\n        }\n        return positions;\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ActivateCardCommandData } from '../types/commands';\nimport { Card, CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ActivateCardCommand extends BaseCommand {\n    public baseType: string = \"ActivateCardCommand\";\n    private data: ActivateCardCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ActivateCardCommandData) {\n        super();\n        this.type = \"Activate\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone || this.data.zone)!;\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.originZone);\n            this.YGO.state.setCard(card, this.data.zone);\n\n            console.log(`Exec: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Exec: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        this.prevPosition = card.position;\n\n        if (YGOGameUtils.isFaceDown(card)) {\n            if (YGOGameUtils.isSpellTrap(card)) {\n                card.position = 'faceup';\n            } else {\n                card.position = 'faceup-attack';\n            }\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Activate>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            previousPosition: this.prevPosition,\n            position: card.position\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.zone);\n            this.YGO.state.setCard(card, this.data.originZone);\n\n            console.log(`Undo: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Undo: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { COMMANDS_BY_NAME } from \"../commands\";\nimport { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\n// Only internal functions for game utils\nexport class YGOUtils {\n    static getPlayerIndexFromZone(zone: string): number {\n        return YGOGameUtils.getPlayerIndexFromZone(zone);\n    }\n\n    static parseMainDeck({ mainDeck, player }: { mainDeck: Card[], player: number }): Card[] {\n        return mainDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: true }));\n    }\n\n    static parseExtraDeck({ extraDeck, player }: { extraDeck: Card[], player: number }): Card[] {\n        const extra = extraDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: false }));\n        YGOGameUtils.sortCards(extra);\n        return extra;\n    }\n\n    static parseCard({ card, player, isMainDeckCard }: { card: Card, player: number, isMainDeckCard: boolean }): Card {\n        card.owner = player;\n        card.originalOwner = player;\n        card.materials = [];\n        card.isMainDeckCard = isMainDeckCard;\n        card.position = \"facedown\";\n        return card;\n    }\n\n    static getCardsInGame(fields: PlayerField[]): Map<number, Card> {\n        const cards = new Map<number, Card>()\n\n        for (const field of fields) {\n            for (const card of field.mainDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.extraDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static getOverlayZone(zone: FieldZone): FieldZone {\n        const playerIndex = YGOUtils.getPlayerIndexFromZone(zone);\n        const zoneIndex = zone.split(\"-\")[1];\n\n        if (zone.startsWith(\"EMZ\")) {\n            return `ORU${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n        }\n\n        return `ORUEMZ${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n    }\n\n    static initializePlayersFields(props: YGOProps): [PlayerField, PlayerField] {\n        const { shuffleDecks = true } = props.options || {};\n        let cardIndex = 0;\n\n        const field1: PlayerField = {\n            lp: 8000,\n            player: { name: \"test\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            initialMainDeckOrder: [],\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        };\n\n        const field2: PlayerField = {\n            lp: 8000,\n            player: { name: \"test2\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            initialMainDeckOrder: [],\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        }\n\n        const fields: [PlayerField, PlayerField] = [field1, field2];\n\n        for (let playerIndex = 0; playerIndex < props.players.length; ++playerIndex) {\n            const player = props.players[playerIndex];\n            const field = fields[playerIndex];\n            field.initialMainDeckOrder = player.mainDeck.map((_, index) => index);\n            field.mainDeck = YGOUtils.parseMainDeck({ mainDeck: player.mainDeck as Card[], player: playerIndex });\n            field.extraDeck = YGOUtils.parseExtraDeck({ extraDeck: player.extraDeck as Card[], player: playerIndex });\n            field.mainDeck.forEach(card => card.index = ++cardIndex);\n            field.extraDeck.forEach(card => card.index = ++cardIndex);\n\n            if (player.mainDeckOrder) {\n                for (let i = 0; i < player.mainDeckOrder.length; ++i) {\n                    const swapIndex = player.mainDeckOrder[i];\n                    const temp = field.mainDeck[swapIndex];\n                    field.mainDeck[swapIndex] = field.mainDeck[i];\n                    field.mainDeck[i] = temp;\n                }\n            }\n        }\n\n        if (shuffleDecks) {\n            fields.forEach((field, playerIndex) => {\n                if (props.players[playerIndex]) {\n                    field.initialMainDeckOrder = props.players[playerIndex].mainDeckOrder || YGOGameUtils.shuffleCards(field.mainDeck)\n                }\n            });\n        }\n\n        this.recoverFields(fields, props.options?.fieldState);\n\n        return fields;\n    }\n\n    static getFieldsAsString(ygo: YGOCore) {\n        const log = [];\n\n        log.push(\"---- FIELD STATE ----\");\n\n        const field1 = ygo.getField(0);\n        const field2 = ygo.getField(1);\n\n        log.push(\"Player2: \" + field1.player.name);\n        log.push(\"Hand: \" + field2.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field2.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Monster Zone: \" + field2.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"-------\");\n        log.push(\"Extra Monster Zone: \" + ((field1.extraMonsterZone[0] || field2.extraMonsterZone[0])?.name || \"_\") + \" | \" + ((field1.extraMonsterZone[1] || field2.extraMonsterZone[1])?.name || \"_\"));\n        log.push(\"-------\");\n        log.push(\"Monster Zone: \" + field1.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field1.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Hand: \" + field1.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Player1: \" + field1.player.name);\n\n        return log.join(\"\\n\");\n    }\n\n    private static recoverFields(fields: PlayerField[], fieldState: FileldStateEntry[][] | undefined) {\n        if (Array.isArray(fieldState)) {\n            const cardsToRemoveFromDeck = [new Set(), new Set()];\n            const cardsToRemoveFromExtraDeck = [new Set(), new Set()];\n\n            const getCard = (player: number, id: number): Card => {\n\n                const card = fields[player].mainDeck.find(c => c.id === id && !cardsToRemoveFromDeck[player].has(c));\n\n                if (card) {\n                    cardsToRemoveFromDeck[player].add(card);\n                    return card;\n                }\n\n                const edCard = fields[player].extraDeck.find(c => c.id === id && !cardsToRemoveFromExtraDeck[player].has(c));\n\n                if (edCard) {\n                    cardsToRemoveFromExtraDeck[player].add(edCard);\n                    return edCard;\n                }\n\n                throw new Error(`Card \"${id}\" not found in player \"${player}\" deck`);\n            }\n\n            for (let i = 0; i < fieldState.length; ++i) {\n                const hand: Array<{ card: Card, index: number }> = [];\n                const graveyard: Array<{ card: Card, index: number }> = [];\n                const banished: Array<{ card: Card, index: number }> = [];\n\n                fieldState[i].forEach(cardInitialState => {\n                    const zoneData = YGOGameUtils.getZoneData(cardInitialState.zone);\n                    if (zoneData.zone === \"H\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        hand.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"M\") {\n                        const { position = \"faceup-attack\" } = cardInitialState;\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].monsterZone[zoneData.zoneIndex - 1] = card;\n\n                        if (YGOUtils.isNumeric(cardInitialState.atk)) card.currentAtk = Number(cardInitialState.atk);\n                        if (YGOUtils.isNumeric(cardInitialState.def)) card.currentDef = Number(cardInitialState.def);\n                        if (position) card.position = position;\n                        if (cardInitialState.materials) card.materials = cardInitialState.materials.map(({ id }) => getCard(zoneData.player, id)); // todo check owner\n                    } else if (zoneData.zone === \"EMZ\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].extraMonsterZone[zoneData.zoneIndex - 1] = card;\n\n                        if (YGOUtils.isNumeric(cardInitialState.atk)) card.currentAtk = Number(cardInitialState.atk);\n                        if (YGOUtils.isNumeric(cardInitialState.def)) card.currentDef = Number(cardInitialState.def);\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                        if (cardInitialState.materials) card.materials = cardInitialState.materials.map(({ id }) => getCard(zoneData.player, id)); // todo check owner\n                    }\n                    else if (zoneData.zone === \"S\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].spellTrapZone[zoneData.zoneIndex - 1] = card;\n\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                    } else if (zoneData.zone === \"F\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].fieldZone = card;\n\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                    } else if (zoneData.zone === \"GY\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        graveyard.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"B\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        banished.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"ED\") { // pendulumns\n                        // TODO\n                    }\n                });\n\n                if (hand.length > 0) {\n                    fields[i].hand = hand.toSorted((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n\n                if (graveyard.length > 0) {\n                    fields[i].graveyard = graveyard.toSorted((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n\n                if (banished.length > 0) {\n                    fields[i].hand = banished.toSorted((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n            }\n\n            for (let i = 0; i < fields.length; ++i) {\n                fields[i].mainDeck = fields[i].mainDeck.filter(c => !cardsToRemoveFromDeck[i].has(c))\n                fields[i].extraDeck = fields[i].extraDeck.filter(c => !cardsToRemoveFromDeck[i].has(c))\n            }\n        }\n    }\n\n    static isNumeric(val: any): boolean {\n        return !isNaN(Number(val));\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { MoveCardCommandData } from '../types/commands';\nimport { Card, CardPosition, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MoveCardCommand extends BaseCommand {\n    public baseType: string = \"MoveCardCommand\";\n    public data: MoveCardCommandData;\n    private prevPosition!: CardPosition;\n    private materialsToGY: Card[];\n\n    constructor(data: MoveCardCommandData) {\n        super();\n        const type = data.type || \"Move Card\";\n        this.type = type;\n        this.data = data;\n        this.materialsToGY = [];\n        this.data.type = type;\n    }\n\n    override exec(): void {\n        console.log(`Exec: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n        const { log = true } = this.data;\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        const zoneData = YGOGameUtils.getZoneData(this.data.zone);\n        const field = this.YGO.getField(zoneData.player);\n        let zone = this.data.zone;\n\n        if (this.data.zone === \"ED\" || this.data.zone === \"ED2\") {\n            this.data.position = YGOGameUtils.isPendulumCard(card) ? \"faceup\" : \"facedown\";\n        }\n\n        if (this.data.position) {\n            this.prevPosition = card.position;\n            card.position = this.data.position;\n        }\n\n        // XYZ send materials to GY if send card to Gy or banish\n        if (this.sendMaterialsToGy(card, this.data.zone)) {\n            const overlayZone = YGOUtils.getOverlayZone(this.data.originZone);\n            this.materialsToGY = card.materials;\n            card.materials.forEach(material => {\n                this.YGO.state.setCard(material, \"GY\");\n                this.YGO.duelLog.dispatch<YGODuelEvents.SendToGY>({\n                    player: this.data.player,\n                    commandId: this.getCommandId(),\n                    type: YGODuelEvents.LogType.SendToGY,\n                    id: material.id,\n                    originZone: overlayZone,\n                    zone: this.data.zone,\n                    reason: \"XYZ Material\"\n                });\n            });\n            card.materials = [];\n        }\n\n        // TODO IF PENDULUMN send cards to Extra Deck\n        this.YGO.state.moveCard(card, this.data.originZone, this.data.zone);\n\n        if (zoneData.zone === \"ED\") { // if sent to ED say the cardIndex\n            const extraDeckIndex = field.extraDeck.findIndex(c => c === card);\n            if (extraDeckIndex !== -1) {\n                zone = YGOGameUtils.createZone(zoneData.zone, zoneData.player, extraDeckIndex + 1);\n            }\n        }\n\n        if (log) {\n            this.YGO.duelLog.dispatch<any>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: this.type as any,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone,\n                reason: this.data.reason,\n                position: card.position\n            });\n        }\n    }\n\n    override undo(): void {\n        console.log(`Undo: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.materialsToGY.length > 0) {\n            this.materialsToGY.forEach(() => {\n                this.YGO.state.setCard(null, \"GY\");\n            });\n            card.materials = this.materialsToGY;\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n\n        this.YGO.state.moveCard(card, this.data.zone, this.data.originZone);\n    }\n\n    private sendMaterialsToGy(card: Card, zone: FieldZone): boolean {\n        if (!card.materials || card.materials.length === 0) return false;\n        if (this.data.zone.startsWith(\"GY\")) return true;\n        if (this.data.zone === \"B\" || this.data.zone === \"B2\") return true;\n        if (this.data.zone.startsWith(\"B-\") || this.data.zone.startsWith(\"B2-\")) return true;\n        return false;\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { BanishCommandData, Command } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class BanishCommand extends BaseCommand {\n    public baseType: string = \"BanishCommand\";\n    private data: BanishCommandData;\n    private zone: FieldZone;\n    private banishCommand: Command;\n\n    constructor(data: BanishCommandData) {\n        super();\n        this.data = data;\n        this.data.position = this.data.position || \"faceup\"\n        this.type = this.data.position === \"faceup\" ? \"Banish\" : \"Banish FD\";\n        this.zone = `B${this.data.player === 0 ? \"\" : \"2\"}-1`;\n\n        this.banishCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.banishCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.banishCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ChangeCardAtkDefCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOUtils } from '../game/YGOUtils';\n\nexport class ChangeCardAtkDefCommand extends BaseCommand {\n    private data: ChangeCardAtkDefCommandData;\n    private prevAtk: number | undefined;\n    private prevDef: number | undefined;\n\n    constructor(data: ChangeCardAtkDefCommandData) {\n        super();\n        this.type = \"Change Card Atk Def\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone)!;\n\n        if (YGOUtils.isNumeric(this.data.atk)) {\n            this.prevAtk = card.currentAtk;\n            card.currentAtk = Number(this.data.atk);\n        }\n\n        if (YGOUtils.isNumeric(this.data.def)) {\n            this.prevDef = card.currentDef;\n            card.currentAtk = Number(this.data.def);\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.ChangeCardAtkDef>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            zone: this.data.zone,\n            atk: YGOUtils.isNumeric(this.data.atk) ? Number(this.data.atk) : null,\n            def: YGOUtils.isNumeric(this.data.def) ? Number(this.data.def) : null,\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.prevAtk) {\n            card.currentAtk = this.prevAtk;\n        }\n\n        if (this.prevDef) {\n            card.currentDef = this.prevDef;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ChangeCardPositionCommandData } from '../types/commands';\nimport { CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class ChangeCardPositionCommand extends BaseCommand {\n    public baseType: string = \"ChangeCardPositionCommand\";\n    private data: ChangeCardPositionCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ChangeCardPositionCommandData) {\n        super();\n        this.type = \"Change Card Position\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone)!;\n\n        this.prevPosition = card.position;\n\n        card.position = this.data.position;\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.ChangeCardPosition>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.ChangeCardPosition,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            previousPosition: this.prevPosition,\n            position: this.data.position,\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, DestroyCardCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DestroyCardCommand extends BaseCommand {\n    public baseType: string = \"DestroyCardCommand\";\n    private data: DestroyCardCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: DestroyCardCommandData) {\n        super();\n\n        this.type = \"Destroy\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { DrawFromDeckCommandData } from '../types/commands';\nimport { Card, FieldZone } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DrawFromDeckCommand extends BaseCommand {\n    public baseType: string = \"DrawFromDeckCommand\";\n    private data: DrawFromDeckCommandData;\n    private cards: Card[];\n\n    constructor(data: DrawFromDeckCommandData) {\n        super();\n\n        this.type = \"Draw From Deck\";\n        this.data = data;\n        this.data.numberOfCards = this.data.numberOfCards || 1;\n        this.cards = [];\n    }\n\n    exec(): void {\n        console.log(`Exec: Draw ${this.data.numberOfCards} from Deck`);\n\n        this.cards = [];\n\n        const field = this.YGO.state.fields[this.data.player];\n\n        for (let i = 0; i < this.data.numberOfCards!; ++i) {\n            const card = field.mainDeck.pop()!;\n            console.log(\"DRAW\", card.name);\n\n            field.hand.push(card);\n            this.cards.push(card);\n\n            const originZone = YGOGameUtils.createZone(\"D\", this.data.player, field.mainDeck.length - 1);\n            const zone = YGOGameUtils.createZone(\"H\", this.data.player, field.hand.length);\n\n            this.YGO.duelLog.dispatch<YGODuelEvents.DrawFromDeck>({\n                commandId: this.getCommandId(),\n                player: this.data.player,\n                type: YGODuelEvents.LogType.DrawCardFromDeck,\n                id: card.id,\n                originZone,\n                zone,\n            });\n        }\n    }\n\n    undo(): void {\n        console.log(`Undo: Draw ${this.data.numberOfCards} from Deck`);\n\n        const newCards = [...this.cards].reverse();\n        const field = this.YGO.state.fields[this.data.player];\n\n        console.log(\"CARD DRAW UNDO\");\n        console.log(newCards.map(c => c.name));\n        console.log(\"DECK 1>>\", field.mainDeck.length);\n        for (const card of newCards) {\n            const cardInHandIndex = field.hand.findIndex(c => c === card);\n            if (cardInHandIndex !== -1) {\n                field.hand.splice(cardInHandIndex, 1);\n            }\n        }\n        field.mainDeck.push(...newCards);\n\n        console.log(field.hand.map(c => c.name));\n        console.log(\"DECK 2>>\", field.mainDeck.length);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { RevealCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class RevealCommand extends BaseCommand {\n    public baseType: string = \"RevealCommand\";\n    private data: RevealCommandData;\n\n    constructor(data: RevealCommandData) {\n        super();\n        this.type = \"Reveal\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        this.YGO.duelLog.dispatch<YGODuelEvents.Reveal>({\n            type: YGODuelEvents.LogType.Reveal,\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            id: this.data.id,\n            originZone: this.data.originZone\n        })\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SendCardToGYCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class SendCardToGYCommand extends BaseCommand {\n    public baseType: string = \"SendCardToGYCommand\";\n    private data: SendCardToGYCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: SendCardToGYCommandData) {\n        super();\n\n        this.type = \"Send To GY\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            reason: this.data.reason,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, FieldSpellCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { RevealCommand } from './RevealCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class FieldSpellCommand extends BaseCommand {\n    public baseType: string = \"FieldSpellCommand\";\n    private data: FieldSpellCommandData;\n    private commands: Command[];\n\n    constructor(data: FieldSpellCommandData) {\n        super();\n\n        this.type = \"Field Spell\";\n        this.data = data;\n        this.data.position = data.position === \"facedown\" ? \"facedown\" : \"faceup\";\n        this.commands = [];\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const fieldCard = this.YGO.getField(this.data.player).fieldZone;\n\n        if (fieldCard) {\n            this.commands.splice(0, 1, new SendCardToGYCommand({\n                player: this.data.player,\n                id: fieldCard.id,\n                originZone: YGOGameUtils.createZone(\"F\", this.data.player)\n            }));\n        }\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n\n        if (this.data.reveal) {\n            this.commands.push(new RevealCommand({\n                id: this.data.id,\n                originZone: this.data.zone,\n                player: this.data.player\n            }));\n        }\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { FlipCommandData } from '../types/commands';\nimport { CardPosition } from '../types/types';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class FlipCommand extends BaseCommand {\n    public baseType: string = \"FlipCommand\";\n    private data: FlipCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: FlipCommandData) {\n        super();\n        this.type = \"Flip\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone)!;\n\n        this.prevPosition = card.position;\n\n        if (YGOGameUtils.isFaceDown(card)) {\n            card.position = \"faceup-attack\";\n        } else {\n            card.position = \"faceup-defense\";\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Flip>({\n            type: YGODuelEvents.LogType.Flip,\n            commandId: this.getCommandId(),\n            player: this.data.player,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            previousPosition: this.prevPosition,\n            position: card.position,\n        })\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, FusionSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class FusionSummonCommand extends BaseCommand {\n    public baseType: string = \"FusionSummonCommand\";\n    private data: FusionSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: FusionSummonCommandData) {\n        super();\n        this.type = \"Fusion Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Fusion Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.SynchroSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.FusionSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position!,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, LinkSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { CardPosition } from '../types/types';\n\nexport class LinkSummonCommand extends BaseCommand {\n    public baseType: string = \"LinkSummonCommand\";\n    private data: LinkSummonCommandData;\n    private commands: Command[];\n    private position: CardPosition;\n\n    constructor(data: LinkSummonCommandData) {\n        super();\n        this.type = \"Link Summon\";\n        this.data = data;\n        this.position = \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Link Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.LinkSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.LinkSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, MillFromDeckCommandData } from '../types/commands';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MillFromDeckCommand extends BaseCommand {\n    public baseType: string = \"MillFromDeckCommand\";\n    private data: MillFromDeckCommandData;\n    private commands: Command[];\n\n    constructor(data: MillFromDeckCommandData) {\n        super();\n\n        this.type = \"Mill From Deck\";\n        const { numberOfCards = 1 } = data;\n        this.data = data;\n        this.data.numberOfCards = Math.max(1, numberOfCards);\n        this.commands = [];\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const field = this.YGO.getField(this.data.player);\n        const numberOfCards = Math.min(this.data.numberOfCards!, field.mainDeck.length);\n\n        for (let i = 0; i < numberOfCards!; ++i) {\n            const cardIndex = field.mainDeck.length - 1 - i;\n            const card = field.mainDeck[cardIndex];\n\n            // TODO LOG THIS SHIT :)\n\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: YGOGameUtils.createZone(\"D\", this.data.player, cardIndex + 1),\n                player: this.data.player\n            }))\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, NormalSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class NormalSummonCommand extends BaseCommand {\n    public baseType: string = \"NormalSummonCommand\";\n    private data: NormalSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: NormalSummonCommandData) {\n        super();\n        this.type = \"Normal Summon\";\n        this.data = data;\n        this.data.position = \"faceup-attack\";\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetCardCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { CardPosition } from '../types/types';\nimport { RevealCommand } from './RevealCommand';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class SetCardCommand extends BaseCommand {\n    public baseType: string = \"SetCardCommand\";\n    private data: SetCardCommandData;\n    private prevPosition: CardPosition | undefined;\n    private isMonster: boolean;\n    private commands: Command[];\n\n    constructor(data: SetCardCommandData) {\n        super();\n        this.type = \"Set ST\";\n        this.isMonster = false;\n        this.data = data;\n        this.commands = [];\n    }\n\n    init(ygo: YGOCore) {\n        super.init(ygo);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        const isMonster = YGOGameUtils.isMonster(card);\n        this.type = isMonster ? \"Set Monster\" : \"Set ST\";\n\n        this.commands = [];\n\n        if (this.data.zone) {\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.data.zone,\n                position: \"facedown\"\n            }));\n\n            if (this.data.reveal) {\n                this.commands.push(new RevealCommand({\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.zone,\n                }));\n            }\n        }\n    }\n\n    exec(): void {\n        if (this.commands.length > 0) {\n            this.execMultipleChildCommand(this.commands);\n        } else {\n            const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n            this.prevPosition = card.position;\n            card.position = \"facedown\";\n\n            if (this.type === \"Set Monster\") {\n                this.YGO.duelLog.dispatch<YGODuelEvents.SetMonster>({\n                    type: YGODuelEvents.LogType.SetMonster,\n                    commandId: this.getCommandId(),\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.originZone,\n                })\n            } else {\n                this.YGO.duelLog.dispatch<YGODuelEvents.SetMonster>({\n                    type: YGODuelEvents.LogType.SetST,\n                    commandId: this.getCommandId(),\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.originZone,\n                })\n            }\n        }\n    }\n\n    undo(): void {\n        if (this.commands.length > 0) {\n            this.undoMultipleChildCommand(this.commands);\n        }\n\n        if (this.prevPosition) {\n            const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetMonsterCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SetMonsterCommand extends BaseCommand {\n    public baseType: string = \"SetMonsterCommand\";\n    private data: SetMonsterCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SetMonsterCommandData) {\n        super();\n        this.type = \"Set Monster\";\n        this.data = data;\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"facedown\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ShuffleDeckCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ShuffleDeckCommand extends BaseCommand {\n    public baseType: string = \"ShuffleDeckCommand\";\n    private data: ShuffleDeckCommandData;\n    private cardPositions!: Array<number>;\n\n    constructor(data: ShuffleDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = \"Shuffle Deck\";\n    }\n\n    exec(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n\n        if (this.cardPositions) {\n            for (let i = 0; i < this.cardPositions.length; ++i) {\n                const index = this.cardPositions[i];\n                const temp = mainDeck[index];\n                mainDeck[index] = mainDeck[i];\n                mainDeck[i] = temp;\n            }\n        } else {\n            this.cardPositions = YGOGameUtils.shuffleCards(mainDeck);\n        }\n\n        if (this.data.log !== false) {\n            this.YGO.duelLog.dispatch<YGODuelEvents.Shuffle>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: YGODuelEvents.LogType.Shuffle\n            });\n        }\n    }\n\n    undo(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n        for (let i = 0; i < this.cardPositions.length; ++i) {\n            const index = this.cardPositions[i];\n            const temp = mainDeck[index];\n            mainDeck[index] = mainDeck[i];\n            mainDeck[i] = temp;\n        }\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SpecialSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SpecialSummonCommand extends BaseCommand {\n    public baseType: string = \"SpecialSummonCommand\";\n    private data: SpecialSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SpecialSummonCommandData) {\n        super();\n        this.type = \"Special Summon\";\n        this.data = data;\n        this.data.position = this.data.position || 'faceup-attack';\n\n        if (this.data.position !== 'faceup-attack'\n            && this.data.position !== 'faceup-defense') {\n            this.data.position = 'faceup-attack';\n        }\n\n        console.log(this.data);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: \"Special Summon\",\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { StartHandCommandData } from '../types/commands';\nimport { Card, FieldZone } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class StartHandCommand extends BaseCommand {\n    public baseType: string = \"StartHandCommand\";\n    private data: StartHandCommandData;\n    private cards: Card[];\n\n    constructor(data: StartHandCommandData) {\n        super();\n\n        this.type = \"Start Hand\";\n        this.data = data;\n        this.cards = [];\n        (this as any).core = true;\n    }\n\n    exec(): void {\n        const field = this.YGO.getField(this.data.player);\n\n        if (field.hand.length > 0) {\n            this.cards = field.hand.map(card => card);\n        } else {\n            this.cards = [];\n\n            for (let i = 0; i < this.data.numberOfCards; ++i) {\n                const card = field.mainDeck.pop()!;\n                field.hand.push(card);\n                this.cards.push(card);\n            }\n        }\n\n        const cards: { id: number, zone: FieldZone }[] = this.cards.map((card, handIndex) => {\n            return {\n                id: card.id,\n                zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex + 1)\n            }\n        });\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.StartHand>({\n            commandId: this.getCommandId(),\n            player: this.data.player,\n            type: YGODuelEvents.LogType.StartHand,\n            cards,\n            core: true,\n        });\n    }\n\n    undo(): void {\n        console.log(`Undo: Draw ${this.data.numberOfCards} from Deck`);\n\n        const newCards = [...this.cards].reverse();\n        const field = this.YGO.state.fields[this.data.player];\n\n        console.log(\"CARD DRAW UNDO\");\n        console.log(newCards.map(c => c.name));\n        console.log(\"DECK 1>>\", field.mainDeck.length);\n        for (const card of newCards) {\n            const cardInHandIndex = field.hand.findIndex(c => c === card);\n            if (cardInHandIndex !== -1) {\n                field.hand.splice(cardInHandIndex, 1);\n            }\n        }\n        field.mainDeck.push(...newCards);\n\n        console.log(field.hand.map(c => c.name));\n        console.log(\"DECK 2>>\", field.mainDeck.length);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SynchroSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class SynchroSummonCommand extends BaseCommand {\n    public baseType: string = \"SynchroSummonCommand\";\n    private data: SynchroSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: SynchroSummonCommandData) {\n        super();\n        this.type = \"Synchro Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Synchro Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.SynchroSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.SynchroSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position!,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToDeckCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { ShuffleDeckCommand } from './ShuffleDeck';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToDeckCommand extends BaseCommand {\n    public baseType: string = \"ToDeckCommand\";\n    private data: ToDeckCommandData;\n    private zone!: FieldZone;\n    private commands!: Command[];\n\n    constructor(data: ToDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = this.getCommandType();\n    }\n\n    private isTopCard() {\n        return this.data.position === \"top\";\n    }\n\n    private getCommandType() {\n        return this.isTopCard() ? \"To Top Deck\" : \"To Bottom Deck\";\n    }\n\n    private getDeckIndex(): number {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n\n        if (this.isTopCard()) {\n            return mainDeck.length + 1;\n        }\n\n        return 1;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        if (!this.commands) {\n            const { player, shuffle = false } = this.data;\n\n            const deckIndex = this.getDeckIndex();\n            this.zone = YGOGameUtils.createZone(\"D\", player, deckIndex);\n            this.commands = [];\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.zone,\n            }));\n\n            if (shuffle) {\n                this.commands.push(new ShuffleDeckCommand({ player: this.data.player }));\n            }\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToExtraDeckCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToExtraDeckCommand extends BaseCommand {\n    public baseType: string = \"ToExtraDeckCommand\";\n    private data: ToExtraDeckCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToExtraDeckCommandData) {\n        super();\n        this.type = \"To Extra Deck\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"ED\", this.data.player)\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToHandCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToHandCommand extends BaseCommand {\n    public baseType: string = \"ToHandCommand\";\n    private data: ToHandCommandData;\n    private command!: Command;\n\n    constructor(data: ToHandCommandData) {\n        super();\n        this.type = \"To Hand\";\n        this.data = data;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const handIndex = this.YGO.getField(this.data.player).hand.length + 1;\n\n        this.command = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex),\n            position: \"facedown\"\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.command);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.command);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToSTCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class ToSTCommand extends BaseCommand {\n    public baseType: string = \"ToSTCommand\";\n    private data: ToSTCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToSTCommandData) {\n        super();\n        this.type = \"To ST\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"faceup\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSetCommand extends BaseCommand {\n    public baseType: string = \"TributeSetCommand\";\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: TributeSummonCommandData) {\n        super();\n\n        this.type = \"Tribute Set\";\n        this.data = data;\n        this.data.position = \"facedown\";\n\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSummonCommand extends BaseCommand {\n    public baseType: string = \"TributeSummonCommand\";\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n    \n    constructor(data: TributeSummonCommandData) {\n        super();\n        this.type = \"Tribute Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }))\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { XYZAttachCommandData as XYZAttachMaterialCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZAttachMaterialCommand extends BaseCommand {\n    public baseType: string = \"XYZAttachMaterialCommand\";\n    private data: XYZAttachMaterialCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZAttachMaterialCommandData) {\n        super();\n        this.type = \"XYZ Attach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.YGO.state.setCard(null, this.data.originZone);\n        card.materials.push(this.materialCardReference);\n\n        console.log(\"TCL:: EXEC ATTACH:: \", this.materialCardReference.name, this.data.originZone);\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZAttach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.YGO.state.setCard(this.materialCardReference, this.data.originZone);\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { XYZDetachCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZDetachMaterialCommand extends BaseCommand {\n    public baseType: string = \"XYZDetachMaterialCommand\";\n    private data: XYZDetachCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZDetachCommandData) {\n        super();\n        this.type = \"XYZ Detach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = card.materials[this.data.materialIndex];\n        card.materials.splice(this.data.materialIndex, 1);\n\n        this.YGO.state.setCard(this.materialCardReference, \"GY\");\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZDetach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: card.id,\n            materialIndex: this.data.materialIndex,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n        this.YGO.state.setCard(null, \"GY\");\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { Card, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZSummonCommand extends BaseCommand {\n    public baseType: string = \"XYZSummonCommand\";\n    private data: XYZSummonCommandData;\n    private commands: Command[];\n    private overlayZone: FieldZone;\n\n    constructor(data: XYZSummonCommandData) {\n        super();\n        this.type = \"XYZ Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n        this.overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new XYZMaterialsMove({\n                player: this.data.player,\n                overlayZone: this.overlayZone,\n                id: material.id,\n                zone: material.zone\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        // TODO: @RMS MATERIALS OF MATERIAL ex: nerd to zeus purrely to noir\n\n        card.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n            return materialCard;\n        });\n\n        this.execMultipleChildCommand(this.commands);\n        \n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position!,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        card.materials = [];\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n\ninterface XYZMaterialsMoveData {\n    player: number,\n    id: number\n    overlayZone: FieldZone\n    zone: FieldZone\n}\n\nclass XYZMaterialsMove extends BaseCommand {\n    private data: XYZMaterialsMoveData;\n    private card!: Card;\n\n    constructor(data: XYZMaterialsMoveData) {\n        super();\n        this.data = data;\n    }\n\n    exec(): void {\n        this.card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        this.YGO.state.setCard(null, this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlay>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlay,\n            id: this.data.id,\n            originZone: this.data.zone,\n            overlayZone: this.data.overlayZone\n        });\n    }\n\n    undo(): void {\n        this.YGO.state.setCard(this.card, this.data.zone);\n    }\n}\n","import { Command } from \"../types/commands\";\nimport { ActivateCardCommand } from \"./ActivateCardCommand\";\nimport { BanishCommand } from \"./BanishCommand\";\nimport { ChangeCardAtkDefCommand } from \"./ChangeCardAtkDefCommand\";\nimport { ChangeCardPositionCommand } from \"./ChangeCardPositionCommand\";\nimport { DestroyCardCommand } from \"./DestroyCard\";\nimport { DrawFromDeckCommand } from \"./DrawFromDeckCommand\";\nimport { FieldSpellCommand } from \"./FieldSpellCommand\";\nimport { FlipCommand } from \"./FlipCommand\";\nimport { FusionSummonCommand } from \"./FusionSummonCommand\";\nimport { LinkSummonCommand } from \"./LinkSummonCommand\";\nimport { MillFromDeckCommand } from \"./MillFromDeckCommand\";\nimport { MoveCardCommand } from \"./MoveCardCommand\";\nimport { NormalSummonCommand } from \"./NormalSummonCommand\";\nimport { RevealCommand } from \"./RevealCommand\";\nimport { SendCardToGYCommand } from \"./SendCardToGY\";\nimport { SetCardCommand } from \"./SetCardCommand\";\nimport { SetMonsterCommand } from \"./SetMonsterCommand\";\nimport { ShuffleDeckCommand } from \"./ShuffleDeck\";\nimport { SpecialSummonCommand } from \"./SpecialSummonCommand\";\nimport { StartHandCommand } from \"./StartHandCommand\";\nimport { SynchroSummonCommand } from \"./SynchroSummonCommand\";\nimport { ToDeckCommand } from \"./ToDeckCommand\";\nimport { ToExtraDeckCommand } from \"./ToExtraDeckCommand\";\nimport { ToHandCommand } from \"./ToHandCommand\";\nimport { ToSTCommand } from \"./ToSTCommand\";\nimport { TributeSetCommand } from \"./TributeSetCommand\";\nimport { TributeSummonCommand } from \"./TributeSummonCommand\";\nimport { XYZAttachMaterialCommand } from \"./XYZAttachMaterialCommand\";\nimport { XYZDetachMaterialCommand } from \"./XYZDetachMaterialCommand\";\nimport { XYZSummonCommand } from \"./XYZSummonCommand\";\n\nexport const Commands = {\n    NormalSummonCommand,\n    SetMonsterCommand,\n    SetCardCommand,\n    SendCardToGYCommand,\n    BanishCommand,\n    DrawFromDeckCommand,\n    MillFromDeckCommand,\n    ActivateCardCommand,\n    SpecialSummonCommand,\n    TributeSummonCommand,\n    TributeSetCommand,\n    LinkSummonCommand,\n    FusionSummonCommand,\n    SynchroSummonCommand,\n    XYZSummonCommand,\n    XYZAttachMaterialCommand,\n    XYZDetachMaterialCommand,\n    ToDeckCommand,\n    ShuffleDeckCommand,\n    DestroyCardCommand,\n    RevealCommand,\n    ToExtraDeckCommand,\n    ToHandCommand,\n    FieldSpellCommand,\n    ChangeCardPositionCommand,\n    ChangeCardAtkDefCommand,\n    FlipCommand,\n    ToSTCommand,\n    MoveCardCommand,\n}\n\nexport const COMMANDS_BY_NAME: any = {\n    \"NormalSummonCommand\": NormalSummonCommand,\n    \"SetMonsterCommand\": SetMonsterCommand,\n    \"SetCardCommand\": SetCardCommand,\n    \"SendCardToGYCommand\": SendCardToGYCommand,\n    \"BanishCommand\": BanishCommand,\n    \"DrawFromDeckCommand\": DrawFromDeckCommand,\n    \"MillFromDeckCommand\": MillFromDeckCommand,\n    \"ActivateCardCommand\": ActivateCardCommand,\n    \"SpecialSummonCommand\": SpecialSummonCommand,\n    \"TributeSummonCommand\": TributeSummonCommand,\n    \"TributeSetCommand\": TributeSetCommand,\n    \"LinkSummonCommand\": LinkSummonCommand,\n    \"FusionSummonCommand\": FusionSummonCommand,\n    \"SynchroSummonCommand\": SynchroSummonCommand,\n    \"XYZSummonCommand\": XYZSummonCommand,\n    \"XYZAttachMaterialCommand\": XYZAttachMaterialCommand,\n    \"XYZDetachMaterialCommand\": XYZDetachMaterialCommand,\n    \"ToDeckCommand\": ToDeckCommand,\n    \"ShuffleDeckCommand\": ShuffleDeckCommand,\n    \"DestroyCardCommand\": DestroyCardCommand,\n    \"RevealCommand\": RevealCommand,\n    \"ToExtraDeckCommand\": ToExtraDeckCommand,\n    \"ToHandCommand\": ToHandCommand,\n    \"FieldSpellCommand\": FieldSpellCommand,\n    \"ChangeCardPositionCommand\": ChangeCardPositionCommand,\n    \"ChangeCardAtkDefCommand\": ChangeCardAtkDefCommand,\n    \"FlipCommand\": FlipCommand,\n    \"ToSTCommand\": ToSTCommand,\n    \"MoveCardCommand\": MoveCardCommand,\n    \"StartHandCommand\": StartHandCommand,\n}\n\nexport function GetCommandByClassName<T = Command>(commandClassName: string): T | null {\n    return COMMANDS_BY_NAME[commandClassName];\n}","export class EventBus<T extends Record<string, (...args: any[]) => void>> {\n    private events: Map<keyof T, Function[]>;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    on<K extends keyof T>(event: K, listener: T[K]): void {\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n        this.events.get(event)!.push(listener);\n    }\n\n    dispatch<K extends keyof T>(event: K, ...args: Parameters<T[K]>): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            listeners.forEach(listener => listener(...args));\n        }\n    }\n\n    off<K extends keyof T>(event: K, listener: T[K]): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            this.events.set(\n                event,\n                listeners.filter(l => l !== listener)\n            );\n        }\n    }\n\n    clear<K extends keyof T>(event: K): void {\n        if (this.events.has(event)) {\n            this.events.delete(event);\n        }\n    }\n\n    clearAll(): void {\n        this.events.clear();\n    }\n}","import { Command } from \"../types/commands\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelEvents } from '../types/duel-events';\n\ntype YGODuelLogEventMap = {\n    'new-log': (log: YGODuelEvents.DuelLog) => void;\n    'update-logs': (logs: YGODuelEvents.DuelLog[]) => void;\n};\n\nexport class YGODuelLog {\n    public logs: YGODuelEvents.DuelLog[];\n    public events: EventBus<YGODuelLogEventMap>;\n\n    constructor() {\n        this.logs = [];\n        this.events = new EventBus();\n    }\n\n    dispatch<T extends YGODuelEvents.DuelLog>(log: T) {\n        this.logs.push(log);\n        this.events.dispatch(\"new-log\", log);\n        this.onLogsUpdated();\n    }\n\n    peek(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length == 0) return null;\n        return this.logs[this.logs.length - 1];\n    }\n\n    peekCommand(): number {\n        if (this.logs.length == 0) return -1;\n        return this.logs[this.logs.length - 1].commandId;\n    }\n\n    pop(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length === 0) return null;\n        return this.logs.pop() as YGODuelEvents.DuelLog;\n    }\n\n    removeCommand(command: Command, args?: { log: boolean }) {\n        const commandIndex = this.logs.findIndex(cmd => cmd.commandId === command.commandId);\n\n        if (commandIndex !== -1) {\n            this.logs.splice(commandIndex, this.logs.length - commandIndex);\n        }\n\n        if (args?.log !== false) {\n            this.events.dispatch(\"update-logs\", this.logs);\n        }\n    }\n\n    onLogsUpdated() {\n        this.events.dispatch(\"update-logs\", this.logs);\n    }\n}","import { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\nimport { YGOUtils } from \"./YGOUtils\";\n\nexport class YGOGameState {\n    public fields: PlayerField[];\n    private cardsInGame: Map<number, Card>;\n\n    constructor(props: YGOProps) {\n        this.fields = YGOUtils.initializePlayersFields(props);\n        this.cardsInGame = YGOUtils.getCardsInGame(this.fields);\n    }\n\n    getCardById(id: number, zone: FieldZone): Card {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone === \"GY\" || zone === \"GY2\") {\n            const card = this.fields[playerIndex].graveyard.find(c => c.id === id);\n\n            if (!card) {\n                throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n            }\n\n            return card;\n        }\n\n        const card = this.getCardFromZone(zone);\n\n        if (card && card.id === id) return card;\n\n        throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n    }\n\n    getCardFromZone(zone: FieldZone): Card | null {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].hand[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].monsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].spellTrapZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].graveyard[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].banishedZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].mainDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"ED-\") || zone.startsWith(\"ED2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraMonsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            const card = this.fields[playerIndex].fieldZone;\n            return card;\n        }\n\n        return null;\n    }\n\n    moveCardById(cardId: number, originZone: FieldZone, zone: FieldZone) {\n        const card = this.getCardById(cardId, originZone);\n        this.moveCard(card, originZone, zone);\n    }\n\n    moveCard(card: Card, originZone: FieldZone, zone: FieldZone) {\n        this.removeCard(originZone);\n        this.setCard(card, zone);\n    }\n\n    setCard(card: Card | null, zone: FieldZone): void {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\") || zone === \"H\" || zone === \"H2\") {\n            const handIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const hand = this.fields[playerIndex].hand;\n\n            if (handIndex == -1 && card) {\n                hand.push(card);\n            } else if (card) {\n                if (handIndex >= hand.length) {\n                    hand.push(card);\n                } else {\n                    hand.splice(handIndex, 0, card);\n                }\n            } else {\n                hand.splice(handIndex, 1);\n            }\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].monsterZone[zoneIndex] = card;\n            // todo check if monster etc \n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].spellTrapZone[zoneIndex] = card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].extraMonsterZone[zoneIndex] = card;\n        }\n        else if (zone.startsWith(\"ED\") || zone.startsWith(\"ED2\")) { // append to extra\n            console.log(\"MOVE CARD TO ED >> Card:\", zone, card?.id)\n            if (zone.indexOf(\"-\") !== -1) {\n                const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n                if (!card) {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 1);\n                } else {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 0, card);\n                }\n            } else if (card) {\n                const isPendulum = card.isMainDeckCard && YGOGameUtils.isPendulumCard(card);\n                const extraDeck = this.fields[playerIndex].extraDeck;\n\n                if (isPendulum) {\n                    extraDeck.unshift(card); // add card to top of extraDeck\n                } else {\n                    const weight = YGOGameUtils.getCardBaseType(card);\n                    const index = extraDeck.findIndex(c => {\n                        const weight2 = YGOGameUtils.getCardBaseType(c);\n                        if (weight < weight2) return true;\n                        if (weight === weight2) {\n                            if (card.name === c.name && card.index < c.index) return true;\n                        }\n                        return card.name < c.name;\n                    });\n\n                    console.log(\"MY NEW INDEX >>\", index);\n\n                    if (index !== -1) {\n                        extraDeck.splice(index, 0, card);\n                    } else {\n                        extraDeck.push(card);\n                    }\n                }\n            } else {\n                throw new Error(\"No card to add to Extra Deck\");\n            }\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n\n            console.log(\"MOVE CARD TO DECK \", zone);\n\n            if (!card) {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 1);\n            } else {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 0, card);\n            }\n        } else if (zone === \"GY\" || zone === \"GY2\" || zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const gy = this.fields[playerIndex].graveyard;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    gy.unshift(card);\n                } else {\n                    gy.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    gy.pop();\n                } else {\n                    gy.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone === \"B\" || zone === \"B2\" || zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const banishZone = this.fields[playerIndex].banishedZone;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    banishZone.unshift(card);\n                } else {\n                    banishZone.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    banishZone.pop();\n                } else {\n                    banishZone.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            this.fields[playerIndex].fieldZone = card;\n        }\n    }\n\n    removeCard(zone: FieldZone): Card | null {\n        const card = this.getCardFromZone(zone);\n        this.setCard(null, zone);\n        // TODO Reset card\n        return card;\n    }\n\n    getCardData(cardId: number): Card | null {\n        return this.cardsInGame.get(cardId) || null;\n    }\n\n    shuffleDeck(player: number) {\n        const deck = this.fields[player].mainDeck;\n        if (deck.length === 0) return; // If the deck is empty, do nothing\n\n        for (let i = deck.length - 1; i > 0; i--) {\n            const cardIndex = Math.floor(Math.random() * (i + 1));\n            [deck[i], deck[cardIndex]] = [deck[cardIndex], deck[i]];\n        }\n    }\n\n    getPlayerIndexFromZone(zone: string): number {\n        return YGOUtils.getPlayerIndexFromZone(zone);\n    }\n\n    getAvailableZones(fieldZones: (\"M\" | \"M2\" | \"S\" | \"S2\" | \"F\" | \"F2\" | \"EMZ\")[]): FieldZone[] {\n        const result: FieldZone[] = [];\n\n        // TODO @RMS  make this player aware\n\n        for (const fieldZone of fieldZones) {\n            const player = this.getPlayerIndexFromZone(fieldZone);\n            const field = this.fields[player];\n            if (fieldZone === \"M\") {\n                field.monsterZone.forEach((data, index) => {\n                    const zone = `M${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"S\") {\n                field.spellTrapZone.forEach((data, index) => {\n                    const zone = `S${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"EMZ\") {\n                for (let i = 0; i < 2; ++i) {\n                    const data = field.extraDeck[i] || field.extraDeck[i];\n                    const zone = `EMZ-${i + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                }\n            } else if (fieldZone === \"F\") {\n                if (field.fieldZone) result.push(\"F\");\n            }\n        }\n\n        return result;\n    }\n}","import { Card, FieldZone, FileldStateEntry, PlayerField } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\nexport class YGOReplayUtils {\n    static createReplayData(ygo: YGOCore) {\n        const players = ygo.props.players.map((playerData, playerIndex) => {\n            return {\n                name: playerData.name,\n                deck: playerData.mainDeck.map(c => c.id),\n                mainDeckOrder: ygo.getField(playerIndex).initialMainDeckOrder,\n                extraDeck: playerData.mainDeck.map(c => c.id),\n            }\n        });\n\n        const commands = ygo.commands.map(cmd => cmd.toJSON());\n        const endField: any = [];\n\n        for (let playerIndex = 0; playerIndex < ygo.state.fields.length; ++playerIndex) {\n            const playerEndField: any = [];\n            const field = ygo.getField(playerIndex);\n\n            for (let i = 0; i < field.monsterZone.length; ++i) {\n                if (field.monsterZone[i]) {\n                    const card = field.monsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"M\", playerIndex, i + 1);\n                    playerEndField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.spellTrapZone.length; ++i) {\n                if (field.spellTrapZone[i]) {\n                    const card = field.spellTrapZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"S\", playerIndex, i + 1);\n                    playerEndField.push({ id: card.id, zone });\n                }\n            }\n\n            for (let i = 0; i < field.extraMonsterZone.length; ++i) {\n                if (field.extraMonsterZone[i]) {\n                    const card = field.extraMonsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"EMZ\", playerIndex, i + 1);\n                    playerEndField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.graveyard.length; ++i) {\n                const card = field.graveyard[i];\n                const zone = YGOGameUtils.createZone(\"GY\", playerIndex);\n                playerEndField.push({ id: card.id, zone });\n            }\n\n            for (let i = 0; i < field.banishedZone.length; ++i) {\n                const card = field.banishedZone[i];\n                const zone = YGOGameUtils.createZone(\"B\", playerIndex);\n                const result: any = { id: card.id, zone };\n\n                if (YGOGameUtils.isFaceDown(card)) {\n                    result.position = \"facedown\"\n                }\n\n                playerEndField.push(result);\n            }\n\n            endField.push(playerEndField);\n        }\n\n        // todo get end field etc..\n        return {\n            players,\n            commands,\n            endField\n        }\n    }\n\n    private static getMonsterCardInfo(card: Card, zone: FieldZone): any {\n        const result: any = {\n            id: card.id,\n            zone\n        }\n\n        if (card.atk !== card.currentAtk) {\n            result.atk = card.currentAtk;\n        }\n\n        if (card.def !== card.currentDef) {\n            result.def = card.currentDef;\n        }\n\n        if (card.position !== \"faceup-attack\") {\n            result.position = card.position;\n        }\n\n        if (card.materials.length > 0) {\n            result.materials = card.materials.map(materialCard => ({ id: materialCard.id })); // TODO OWner of the card\n        }\n\n        return result;\n    }\n}","import { GetCommandByClassName, Commands as YGOCommands } from \"../commands\";\nimport { StartHandCommand } from \"../commands/StartHandCommand\";\nimport { Command } from \"../types/commands\";\nimport { PlayerField, YGOProps } from \"../types/types\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelLog } from \"./YGODuelLog\";\nimport { YGOGameState } from \"./YGOGameState\";\nimport { YGOReplayUtils } from \"./YGOReplayUtils\";\n\nexport class YGOCore {\n    // private\n    private commandId: number;\n    // public\n    public props: YGOProps;\n    public state: YGOGameState;\n    public commands: Command[];\n    public commandIndex: number = -1;\n    public duelLog: YGODuelLog;\n    public events: EventBus<any>;\n\n    constructor(props: YGOProps) {\n        this.props = props;\n        this.state = new YGOGameState(props);\n        this.duelLog = new YGODuelLog();\n        this.events = new EventBus();\n        this.commands = this.createYGOCommands(props.commands);\n        this.commandId = 0;\n    }\n\n    start() {\n        const { draw: cardsToDrawInStart = 5 } = this.props.options || {};\n\n        if (this.commands.length === 0) {\n            this.props.players.forEach((_, player) => {\n                this.exec(new StartHandCommand({\n                    player,\n                    numberOfCards: cardsToDrawInStart\n                }));\n            });\n        }\n    }\n\n    exec(command: Command): Command {\n        if (this.hasNextCommand()) {\n            this.commands.splice(this.commandIndex + 1, this.commands.length - this.commandIndex);\n        }\n        this.commandIndex = this.commands.length;\n        this.commands.push(command);\n        command.init(this);\n        command.exec();\n        return command;\n    }\n\n    peek(): Command | null {\n        return this.commands.length > 0 ? this.commands[this.commands.length - 1] : null;\n    }\n\n    redo(): Command | null {\n        if (!this.hasNextCommand()) return null;\n        this.commandIndex++;\n        const cmdToRedo = this.commands[this.commandIndex];\n        cmdToRedo.exec();\n\n        this.duelLog.onLogsUpdated();\n\n        return cmdToRedo;\n    }\n\n    undo(): Command | null {\n        if (!this.hasPrevCommand()) return null;\n\n        const cmdToUndo = this.commands[this.commandIndex];\n\n        this.duelLog.removeCommand(cmdToUndo);\n        cmdToUndo.undo();\n        this.commandIndex--;\n        this.duelLog.onLogsUpdated();\n\n        return cmdToUndo;\n    }\n\n    goToCommand(command: Command): boolean {\n\n        const commandIndex = this.commands.findIndex(c => c === command);\n\n        if (commandIndex === -1) return false;\n\n        if (commandIndex === this.commandIndex) return true;\n\n        if (commandIndex > this.commandIndex) {\n            while (this.commandIndex !== commandIndex && this.hasNextCommand()) {\n                this.redo();\n            }\n            return true;\n        } else {\n            while (this.commandIndex !== commandIndex && this.hasPrevCommand()) {\n                this.undo();\n            }\n            return true;\n        }\n    }\n\n    hasNextCommand() {\n        return this.commands.length - 1 > this.commandIndex;\n    }\n\n    hasPrevCommand() {\n        return this.commandIndex >= 0;\n    }\n\n    getNextCommandId() {\n        return ++this.commandId;\n    }\n\n    getReplayData() {\n\n        while (this.hasNextCommand()) {\n            this.redo();\n        }\n\n        return YGOReplayUtils.createReplayData(this);\n    }\n\n    getField(player: number): PlayerField {\n        return this.state.fields[player];\n    }\n\n    private createYGOCommands(commands?: any[]) {\n        if (Array.isArray(commands)) {\n            const loadedCommands = commands.map(cmd => {\n                const CommandClass = GetCommandByClassName(cmd.type);\n\n                if (!CommandClass) throw new Error(`Command \"${cmd.type}\" dont exists!`);\n\n                const command = new (CommandClass as any)(cmd.data)\n                command.init(this);\n                return command;\n            });\n            return loadedCommands;\n        }\n        return [];\n    }\n}","import { Commands } from './commands';\n\nexport * from './game/YGOCore';\nexport * from './game/YGODuelLog';\nexport * from './game/YGOGameUtils';\nexport * from './types/duel-events';\n\nexport const YGOCommands = Commands;\n\nexport const debug_version = 3;"],"names":["BaseCommand","constructor","this","commandId","parent","init","ygo","YGO","getNextCommandId","getCommandId","_a","undefined","execChildCommand","command","exec","undoChildCommand","undo","undoMultipleChildCommand","commands","i","length","execMultipleChildCommand","isValid","toJSON","data","type","baseType","YGODuelEvents","CardBaseType","LogType","YGOGameUtils","isLinkMonster","card","typeline","includes","isMonster","isXYZMonster","isSynchroMonster","isFusionMonster","isPendulumCard","frameType","isFaceUp","position","isFaceDown","isSpellTrap","isSpell","isTrap","startsWith","isFieldSpell","race","isDefense","isAttack","hasLinkMonstersInField","field","monsterZone","some","extraMonsterZone","hasXyzMonstersInField","getPlayerIndexFromZone","zone","createZone","player","getZoneData","args","split","playerIndex","zoneId","zoneIndex","Number","endsWith","substring","getCardBaseType","EffectMonster","Spell","RitualMonster","Trap","FusionMonster","SynchroMonster","XYZMonster","LinkMonster","NormalMonster","getCardsBaseType","cards","map","c","toSortedCards","sortCards","cardsToSort","cardsWeights","j","name","shuffleCards","positions","Array","index","Math","floor","random","temp","ActivateCardCommand","super","state","getCardById","id","originZone","removeCard","setCard","console","log","prevPosition","duelLog","dispatch","Activate","previousPosition","YGOUtils","parseMainDeck","mainDeck","parseCard","isMainDeckCard","parseExtraDeck","extraDeck","extra","owner","originalOwner","materials","getCardsInGame","fields","Map","has","set","getOverlayZone","initializePlayersFields","props","shuffleDecks","options","cardIndex","lp","hand","initialMainDeckOrder","spellTrapZone","fieldZone","graveyard","banishedZone","players","_","forEach","mainDeckOrder","swapIndex","recoverFields","fieldState","getFieldsAsString","push","field1","getField","field2","join","_b","isArray","cardsToRemoveFromDeck","Set","cardsToRemoveFromExtraDeck","getCard","find","add","edCard","Error","banished","cardInitialState","zoneData","isNumeric","atk","currentAtk","def","currentDef","toSorted","card1","card2","cardInHand","filter","val","isNaN","MoveCardCommand","materialsToGY","sendMaterialsToGy","overlayZone","material","SendToGY","reason","moveCard","extraDeckIndex","findIndex","BanishCommand","banishCommand","ChangeCardAtkDefCommand","prevAtk","prevDef","ChangeCardPositionCommand","ChangeCardPosition","DestroyCardCommand","moveCardCommand","DrawFromDeckCommand","numberOfCards","pop","DrawCardFromDeck","newCards","reverse","cardInHandIndex","splice","RevealCommand","Reveal","SendCardToGYCommand","FieldSpellCommand","fieldCard","reveal","FlipCommand","Flip","FusionSummonCommand","FusionSummon","LinkSummonCommand","LinkSummon","MillFromDeckCommand","max","min","NormalSummonCommand","SetCardCommand","SetMonster","SetST","SetMonsterCommand","ShuffleDeckCommand","cardPositions","Shuffle","SpecialSummonCommand","StartHandCommand","core","handIndex","StartHand","SynchroSummonCommand","SynchroSummon","ToDeckCommand","getCommandType","isTopCard","getDeckIndex","shuffle","deckIndex","ToExtraDeckCommand","ToHandCommand","ToSTCommand","TributeSetCommand","tributes","cmd","TributeSummonCommand","XYZAttachMaterialCommand","getCardFromZone","materialCardReference","XYZSummon","indexOf","XYZDetachMaterialCommand","materialIndex","XYZDetachMaterial","XYZSummonCommand","XYZMaterialsMove","XYZOverlay","Commands","COMMANDS_BY_NAME","EventBus","events","on","event","listener","get","listeners","off","l","clear","delete","clearAll","YGODuelLog","logs","onLogsUpdated","peek","peekCommand","removeCommand","commandIndex","YGOGameState","cardsInGame","moveCardById","cardId","isPendulum","unshift","weight","weight2","gyIndex","gy","banishZone","getCardData","shuffleDeck","deck","getAvailableZones","fieldZones","result","YGOReplayUtils","createReplayData","playerData","endField","playerEndField","getMonsterCardInfo","materialCard","YGOCore","createYGOCommands","start","draw","cardsToDrawInStart","hasNextCommand","redo","cmdToRedo","hasPrevCommand","cmdToUndo","goToCommand","getReplayData","CommandClass","commandClassName","YGOCommands","debug_version"],"mappings":"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"}