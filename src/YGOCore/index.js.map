{"version":3,"file":"index.js","sources":["../src/commands/BaseCommand.ts","../src/types/duel-events.ts","../src/types/types.ts","../src/commands/ActivateCardCommand.ts","../src/game/YGOGameUtils.ts","../src/game/YGOUtils.ts","../src/commands/MoveCardCommand.ts","../src/commands/BanishCommand.ts","../src/commands/ChangeCardAtkDefCommand.ts","../src/commands/ChangeCardPositionCommand.ts","../src/commands/DestroyCard.ts","../src/commands/DrawFromDeckCommand.ts","../src/commands/RevealCommand.ts","../src/commands/SendCardToGY.ts","../src/commands/FieldSpellCommand.ts","../src/commands/FlipCommand.ts","../src/commands/FusionSummonCommand.ts","../src/commands/LinkSummonCommand.ts","../src/commands/MillFromDeckCommand.ts","../src/commands/NormalSummonCommand.ts","../src/commands/SetCardCommand.ts","../src/commands/SetMonsterCommand.ts","../src/commands/ShuffleDeck.ts","../src/commands/SpecialSummonCommand.ts","../src/commands/SynchroSummonCommand.ts","../src/commands/ToDeckCommand.ts","../src/commands/ToExtraDeckCommand.ts","../src/commands/ToHandCommand.ts","../src/commands/ToSTCommand.ts","../src/commands/TributeSetCommand.ts","../src/commands/TributeSummonCommand.ts","../src/commands/XYZAttachMaterialCommand.ts","../src/commands/XYZDetachMaterialCommand.ts","../src/commands/XYZSummonCommand.ts","../src/commands/index.ts","../src/commands/StartHandCommand.ts","../src/utils/event-bus.ts","../src/game/YGODuelLog.ts","../src/game/YGOGameState.ts","../src/game/YGOReplayUtils.ts","../src/game/YGOCore.ts","../src/index.ts"],"sourcesContent":["import { YGOCore } from \"../game/YGOCore\";\nimport { CommandType, Command } from \"../types/commands\";\n\nexport abstract class BaseCommand implements Command {\n\n    protected YGO!: YGOCore;\n    public type!: CommandType;\n    public baseType!: string;\n    public commandId: number = -1;\n    public parent: Command | null = null;\n\n    constructor() { }\n\n    init(ygo: YGOCore) {\n        this.YGO = ygo;\n        this.commandId = this.YGO.getNextCommandId();\n    }\n\n    getCommandId() {\n        return this.parent?.commandId || this.commandId;\n    }\n\n    execChildCommand(command: Command): Command | undefined {\n        command.parent = this.parent ? this.parent : this;\n        command.init(this.YGO);\n        command.exec();\n        return command;\n    }\n\n    undoChildCommand(command: Command | undefined): Command | undefined {\n        command?.undo();\n        return command;\n    }\n\n    undoMultipleChildCommand(commands: Command[]): void {\n        for (let i = commands.length - 1; i >= 0; --i) {\n            commands[i]?.undo();\n        }\n    }\n\n    execMultipleChildCommand(commands: Command[]): void {\n        for (const command of commands) {\n            this.execChildCommand(command);\n        }\n    }\n\n    isValid(): boolean {\n        return true;\n    }\n\n    exec(): void {\n\n    }\n\n    undo(): void {\n\n    }\n\n    toJSON<T extends any = any>(): { type: string, data: T } {\n        const self = this as any;\n        const data = self.data || {};\n\n        return {\n            type: this.baseType,\n            data,\n        };\n    }\n}","import { CardPosition, FieldZone } from \"./types\";\n\nexport namespace YGODuelEvents {\n    export enum LogType {\n        NormalSummon = \"Normal Summon\",\n        SetMonster = \"Set Monster\",\n        SendToGY = \"Send To GY\",\n        Banish = \"Banish\",\n        BanishFD = \"Banish FD\",\n        StartHand = \"Start Hand\",\n        DrawCardFromDeck = \"Draw From Deck\",\n        MillCardFromDeck = \"Mill From Deck\",\n        TributeSummon = \"Tribute Summon\",\n        TributeSet = \"Tribute Set\",\n        ToHand = \"To Hand\",\n        ToExtraDeck = \"To Extra Deck\",\n        ToTopDeck = \"To Top Deck\",\n        ToBottomDeck = \"To Bottom Deck\",\n        SpecialSummon = \"Special Summon\",\n        SynchroSummon = \"Synchro Summon\",\n        LinkSummon = \"Link Summon\",\n        FusionSummon = \"Fusion Summon\",\n        XYZSummon = \"XYZ Summon\",\n        XYZAttachMaterial = \"XYZ Attach Material\",\n        XYZDetachMaterial = \"XYZ Detach Material\",\n        XYZOverlay = \"XYZOverlay\",\n        SetST = \"Set ST\",\n        Activate = \"Activate\",\n        ChangeBattlePosition = \"Change Battle Position\",\n        MoveCard = \"Move Card\",\n        Shuffle = \"Shuffle\",\n        ToST = \"To ST\",\n        Reveal = \"Reveal\",\n        Target = \"Target\",\n        FieldSpell = \"Field Spell\",\n        ChangeCardPosition = \"Change Card Position\",\n        ChangeCardAtkDef = \"Change Card Atk Def\",\n        Flip = \"Flip\"\n    }\n\n    export interface DuelLog {\n        type: LogType;\n        player: number;\n        commandId: number;\n    }\n\n    export interface NormalSummon extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface MoveCard extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface ToHand extends MoveCard { }\n\n    export interface SetMonster extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n    }\n\n    export interface SendToGY extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone,\n        reason?: \"Fusion Summon\" | \"Synchro Summon\" | \"Link Summon\" | \"XYZ Material\" | undefined\n    }\n\n    export interface DrawFromDeck extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n    }\n\n    export interface StartHand extends DuelLog {\n        cards: { id: number, zone: FieldZone }[],\n        core: boolean\n    }\n\n    export interface FusionSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface SynchroSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface LinkSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZAttach extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZOverlay extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZDetach extends DuelLog {\n        id: number\n        overlayZone: FieldZone\n        materialIndex: number\n    }\n\n    export interface Activate extends DuelLog {\n        id: number,\n        originZone?: FieldZone,\n        zone: FieldZone\n    }\n\n    export interface Banish extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface Shuffle extends DuelLog { }\n\n    export interface Reveal extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n    }\n\n    export interface Target extends DuelLog {\n        id: number;\n        zone: FieldZone;\n    }\n\n    export interface ChangeCardPosition extends DuelLog {\n        id: number;\n        zone: FieldZone;\n        position: CardPosition\n    }\n\n    export interface ChangeCardAtkDef extends DuelLog {\n        id: number;\n        zone: FieldZone;\n        atk: number | null\n        def: number | null\n    }\n\n    export interface Flip extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n    }\n\n    export interface ToExtraDeck extends DuelLog {\n        id: number,\n        originZone: FieldZone\n    }\n\n    export interface MillCardFromDeck extends DuelLog {\n        // TODO\n    }\n}\n\n","export const NUM_ZONES: number = 5; // Number of primary zones (Monster, Spell/Trap, etc.)\nexport type PlayerSide = 0 | 1 | number; // 0 represents Player 1, 1 represents Player 2\n\nexport type CardPosition = \"faceup-attack\" | \"faceup-defense\" | \"faceup\" | \"facedown\";\n\nexport type FieldZone = `M-${1 | 2 | 3 | 4 | 5}`\n    | `M2-${1 | 2 | 3 | 4 | 5}`\n    | `S-${1 | 2 | 3 | 4 | 5}`\n    | `S2-${1 | 2 | 3 | 4 | 5}`\n    | `EMZ`\n    | `EMZ2`\n    | `EMZ-${1 | 2}`\n    | `EMZ2-${1 | 2}`\n    | `ORU-${1 | 2 | 3 | 4 | 5}` // Overlay Units ORU Xyz Materials\n    | `ORU2-${1 | 2 | 3 | 4 | 5}`\n    | `ORUEMZ-${1 | 2}` // Xyz Materials in extra monster zone :)\n    | `ORUEMZ2-${1 | 2}`\n    | \"H\"\n    | \"H2\"\n    | `H-${number}`\n    | `H2-${number}`\n    | \"F\"\n    | \"F2\"\n    | \"GY\"\n    | \"GY2\"\n    | `GY-${number}`\n    | `GY2-${number}`\n    | \"B\"\n    | \"B2\"\n    | `B-${number}`\n    | `B2-${number}`\n    | \"D\"\n    | \"D2\"\n    | `D-${number}`\n    | `D2-${number}`\n    | \"ED\"\n    | \"ED2\"\n    | `ED-${number}`\n    | `ED2-${number}`;\n\nexport type FieldZoneId = \"M\" | \"S\" | \"EMZ\" | \"GY\" | \"D\" | \"ED\" | \"B\" | \"F\" | \"ORU\" | \"ORUEMZ\" | \"H\";\n\nexport type FieldZoneData = { zone: FieldZoneId, player: number, zoneIndex: number }\n\nexport enum CardBaseType {\n    NormalMonster,\n    EffectMonster,\n    RitualMonster,\n    Spell,\n    Trap,\n    FusionMonster,\n    SynchroMonster,\n    XYZMonster,\n    LinkMonster,\n}\n\nexport interface YGOProps {\n    players: {\n        name: string,\n        mainDeck: CardData[], // Card Data is the same as https://ygoprodeck.com/api-guide\n        extraDeck: CardData[] // Card Data is the same as https://ygoprodeck.com/api-guide\n        mainDeckOrder?: number[]\n    }[],\n    commands?: { type: string, data: any }[]\n    options?: {\n        lp?: number, // default `8000`\n        draw?: number, // default `5`\n        shuffleDecks?: boolean // default value is `true`,\n        fieldState?: FileldStateEntry[][] // default\n    }\n}\n\nexport interface FileldStateEntry {\n    id: number,\n    zone: FieldZone\n    atk?: number\n    def?: number\n    owner?: number\n    position?: CardPosition\n    materials?: Array<{ id: number, owner?: number }>\n}\n\nexport interface CardData {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    attribute: string\n    card_images: any\n}\n\nexport interface Card {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    linkval: number\n    attribute: string\n    card_images: any\n    // game_data\n    index: number // internal unique ID\n    owner: number\n    isMainDeckCard: boolean\n    originalOwner: number\n    position: CardPosition\n    currentAtk: number\n    currentDef: number\n    materials: Card[]\n}\n\nexport interface PlayerInfo {\n    name: string;\n}\n\nexport interface PlayerField {\n    lp: number,\n    player: PlayerInfo\n    mainDeck: Card[]\n    extraDeck: Card[]\n    hand: Card[]\n    initialMainDeckOrder: number[];\n    graveyard: Card[]\n    banishedZone: Card[]\n    // Zones on the field where cards are actively played\n    monsterZone: Array<Card | null>\n    spellTrapZone: Array<Card | null>\n    fieldZone: Card | null;\n    extraMonsterZone: Array<Card | null>;\n}\n\nexport interface GameState {\n    players: PlayerInfo[];\n    fields: PlayerField[];\n}\n","import { BaseCommand } from './BaseCommand';\nimport { ActivateCardCommandData } from '../types/commands';\nimport { Card, CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class ActivateCardCommand extends BaseCommand {\n    public baseType: string = \"ActivateCardCommand\";\n    private data: ActivateCardCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ActivateCardCommandData) {\n        super();\n        this.type = \"Activate\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone || this.data.zone)!;\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.originZone);\n            this.YGO.state.setCard(card, this.data.zone);\n\n            console.log(`Exec: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Exec: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        this.prevPosition = card.position;\n\n        if (card.type === \"Spell Card\" || card.type === \"Trap Card\") {\n            card.position = \"faceup\";\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Activate>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.zone);\n            this.YGO.state.setCard(card, this.data.originZone);\n\n            console.log(`Undo: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Undo: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { Card, CardBaseType, FieldZone, FieldZoneId, FieldZoneData, PlayerField } from \"../types/types\";\n\n// Only functions for game utils\nexport class YGOGameUtils {\n\n    static isLinkMonster(card: Card): boolean {\n        return card.typeline?.includes(\"Link\");\n    }\n\n    static isMonster(card: Card): boolean {\n        return card.type?.includes(\"Monster\");\n    }\n\n    static isXYZMonster(card: Card) {\n        return card.typeline?.includes(\"Xyz\");\n    }\n\n    static isSynchroMonster(card: Card) {\n        return card.typeline?.includes(\"Synchro\");\n    }\n\n    static isFusionMonster(card: Card) {\n        return card.typeline?.includes(\"Fusion\");\n    }\n\n    static isPendulumCard(card: Card) {\n        return card.frameType?.includes(\"pendulum\");\n    }\n\n    static isFaceUp(card: Card): boolean {\n        return card.position.includes(\"faceup\");\n    }\n\n    static isFaceDown(card: Card): boolean {\n        return !this.isFaceUp(card);\n    }\n\n    static isSpellTrap(card: Card) {\n        return this.isSpell(card) || this.isTrap(card);\n    }\n\n    static isSpell(card: Card) {\n        return card.frameType.startsWith(\"spell\");\n    }\n\n    static isTrap(card: Card) {\n        return card.frameType.startsWith(\"trap\");\n    }\n\n    static isFieldSpell(card: Card) {\n        return card.race === \"Field\";\n    }\n\n    static isDefense(card: Card) {\n        return card.position === \"facedown\" || card.position === \"faceup-defense\";\n    }\n\n    static isAttack(card: Card) {\n        return card.position === \"faceup-attack\" || card.position === \"faceup\";\n    }\n\n    static hasLinkMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false);\n    }\n\n    static hasXyzMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isXYZMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isXYZMonster(card) : false);\n    }\n\n    static getPlayerIndexFromZone(zone: string): number {\n        const isPlayer2 = zone.includes(\"2-\");\n\n        if (isPlayer2) return 1;\n\n        switch (zone) {\n            case \"M2\":\n            case \"H2\":\n            case \"F2\":\n            case \"GY2\":\n            case \"EMZ2-1\":\n            case \"EMZ2-2\":\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    static createZone(zone: FieldZoneId, player: number, position?: number): FieldZone {\n\n        if (position === undefined) {\n            return `${zone}${player === 0 ? '' : '2'}` as FieldZone;\n        }\n\n        return `${zone}${player === 0 ? '' : '2'}-${position}` as FieldZone;\n    }\n\n    static getZoneData(zone: FieldZone): FieldZoneData {\n        const args = zone.split(\"-\");\n        let playerIndex = 0;\n        let zoneId = args[0];\n        const zoneIndex = args.length > 1 ? Number(args[1]) : -1;\n\n        if (args[0].endsWith(\"2\")) {\n            playerIndex = 1;\n            zoneId = zoneId.substring(0, zoneId.length - 1);\n        }\n\n        return {\n            zone: zoneId as FieldZoneId,\n            player: playerIndex,\n            zoneIndex: zoneIndex,\n        }\n    }\n\n    static getCardBaseType(card: Card): CardBaseType {\n        if (card.frameType.startsWith(\"effect\")) return CardBaseType.EffectMonster;\n        if (card.frameType.startsWith(\"spell\")) return CardBaseType.Spell;\n        if (card.frameType.startsWith(\"ritual\")) return CardBaseType.RitualMonster;\n        if (card.frameType.startsWith(\"trap\")) return CardBaseType.Trap;\n        if (card.frameType.includes(\"fusion\")) return CardBaseType.FusionMonster;\n        if (card.frameType.includes(\"synchro\")) return CardBaseType.SynchroMonster;\n        if (card.frameType.includes(\"xyz\")) return CardBaseType.XYZMonster;\n        if (card.frameType.includes(\"link\")) return CardBaseType.LinkMonster;\n        return CardBaseType.NormalMonster;\n    }\n\n    static getCardsBaseType(cards: Card[]): CardBaseType[] {\n        const result = cards.map(c => YGOGameUtils.getCardBaseType(c));\n        return result;\n    }\n\n    static toSortedCards(cards: Card[]) {\n        return this.sortCards([...cards]);\n    }\n\n    static sortCards(cardsToSort: Card[]) {\n        const cards = cardsToSort;\n        const cardsWeights = YGOGameUtils.getCardsBaseType(cards);\n\n        for (let i = 0; i < cards.length - 1; ++i) {\n            for (let j = 0; j < cards.length - i - 1; ++j) {\n                if (cardsWeights[j] > cardsWeights[j + 1] || (cardsWeights[j] === cardsWeights[j + 1] && cards[j].name > cards[j + 1].name)) {\n                    [cards[j], cards[j + 1]] = [cards[j + 1], cards[j]];\n                    [cardsWeights[j], cardsWeights[j + 1]] = [cardsWeights[j + 1], cardsWeights[j]];\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static shuffleCards(cards: Card[]): Array<number> {\n        const positions = Array<number>(cards.length);\n        for (let i = 0; i < cards.length; ++i) {\n            const index = Math.floor(Math.random() * cards.length);\n\n            positions[i] = index;\n\n            const temp = cards[i];\n            cards[i] = cards[index];\n            cards[index] = temp;\n        }\n        return positions;\n    }\n}","import { COMMANDS_BY_NAME } from \"../commands\";\nimport { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\n// Only internal functions for game utils\nexport class YGOUtils {\n    static getPlayerIndexFromZone(zone: string): number {\n        return YGOGameUtils.getPlayerIndexFromZone(zone);\n    }\n\n    static parseMainDeck({ mainDeck, player }: { mainDeck: Card[], player: number }): Card[] {\n        return mainDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: true }));\n    }\n\n    static parseExtraDeck({ extraDeck, player }: { extraDeck: Card[], player: number }): Card[] {\n        const extra = extraDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: false }));\n        YGOGameUtils.sortCards(extra);\n        return extra;\n    }\n\n    static parseCard({ card, player, isMainDeckCard }: { card: Card, player: number, isMainDeckCard: boolean }): Card {\n        card.owner = player;\n        card.originalOwner = player;\n        card.materials = [];\n        card.isMainDeckCard = isMainDeckCard;\n        card.position = \"facedown\";\n        return card;\n    }\n\n    static getCardsInGame(fields: PlayerField[]): Map<number, Card> {\n        const cards = new Map<number, Card>()\n\n        for (const field of fields) {\n            for (const card of field.mainDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.extraDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static getOverlayZone(zone: FieldZone): FieldZone {\n        const playerIndex = YGOUtils.getPlayerIndexFromZone(zone);\n        const zoneIndex = zone.split(\"-\")[1];\n\n        if (zone.startsWith(\"EMZ\")) {\n            return `ORU${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n        }\n\n        return `ORUEMZ${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n    }\n\n    static initializePlayersFields(props: YGOProps): [PlayerField, PlayerField] {\n        const { shuffleDecks = true } = props.options || {};\n        let cardIndex = 0;\n\n        const field1: PlayerField = {\n            lp: 8000,\n            player: { name: \"test\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            initialMainDeckOrder: [],\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        };\n\n        const field2: PlayerField = {\n            lp: 8000,\n            player: { name: \"test2\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            initialMainDeckOrder: [],\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        }\n\n        const fields: [PlayerField, PlayerField] = [field1, field2];\n\n        for (let playerIndex = 0; playerIndex < props.players.length; ++playerIndex) {\n            const player = props.players[playerIndex];\n            const field = fields[playerIndex];\n            field.initialMainDeckOrder = player.mainDeck.map((_, index) => index);\n            field.mainDeck = YGOUtils.parseMainDeck({ mainDeck: player.mainDeck as Card[], player: playerIndex });\n            field.extraDeck = YGOUtils.parseExtraDeck({ extraDeck: player.extraDeck as Card[], player: playerIndex });\n            field.mainDeck.forEach(card => card.index = ++cardIndex);\n            field.extraDeck.forEach(card => card.index = ++cardIndex);\n\n            if (player.mainDeckOrder) {\n                for (let i = 0; i < player.mainDeckOrder.length; ++i) {\n                    const swapIndex = player.mainDeckOrder[i];\n                    const temp = field.mainDeck[swapIndex];\n                    field.mainDeck[swapIndex] = field.mainDeck[i];\n                    field.mainDeck[i] = temp;\n                }\n            }\n        }\n\n        if (shuffleDecks) {\n            fields.forEach((field, playerIndex) => {\n                if (props.players[playerIndex]) {\n                    field.initialMainDeckOrder = props.players[playerIndex].mainDeckOrder || YGOGameUtils.shuffleCards(field.mainDeck)\n                }\n            });\n        }\n\n        this.recoverFields(fields, props.options?.fieldState);\n\n        return fields;\n    }\n\n    static getFieldsAsString(ygo: YGOCore) {\n        const log = [];\n\n        log.push(\"---- FIELD STATE ----\");\n\n        const field1 = ygo.getField(0);\n        const field2 = ygo.getField(1);\n\n        log.push(\"Player2: \" + field1.player.name);\n        log.push(\"Hand: \" + field2.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field2.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Monster Zone: \" + field2.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"-------\");\n        log.push(\"Extra Monster Zone: \" + ((field1.extraMonsterZone[0] || field2.extraMonsterZone[0])?.name || \"_\") + \" | \" + ((field1.extraMonsterZone[1] || field2.extraMonsterZone[1])?.name || \"_\"));\n        log.push(\"-------\");\n        log.push(\"Monster Zone: \" + field1.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field1.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Hand: \" + field1.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Player1: \" + field1.player.name);\n\n        return log.join(\"\\n\");\n    }\n\n    private static recoverFields(fields: PlayerField[], fieldState: FileldStateEntry[][] | undefined) {\n        if (Array.isArray(fieldState)) {\n            const cardsToRemoveFromDeck = [new Set(), new Set()];\n            const cardsToRemoveFromExtraDeck = [new Set(), new Set()];\n\n            const getCard = (player: number, id: number): Card => {\n\n                const card = fields[player].mainDeck.find(c => c.id === id && !cardsToRemoveFromDeck[player].has(c));\n\n                if (card) {\n                    cardsToRemoveFromDeck[player].add(card);\n                    return card;\n                }\n\n                const edCard = fields[player].extraDeck.find(c => c.id === id && !cardsToRemoveFromExtraDeck[player].has(c));\n\n                if (edCard) {\n                    cardsToRemoveFromExtraDeck[player].add(edCard);\n                    return edCard;\n                }\n\n                throw new Error(`Card \"${id}\" not found in player \"${player}\" deck`);\n            }\n\n            for (let i = 0; i < fieldState.length; ++i) {\n                const hand: Array<{ card: Card, index: number }> = [];\n                const graveyard: Array<{ card: Card, index: number }> = [];\n                const banished: Array<{ card: Card, index: number }> = [];\n\n                fieldState[i].forEach(cardInitialState => {\n                    const zoneData = YGOGameUtils.getZoneData(cardInitialState.zone);\n                    if (zoneData.zone === \"H\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        hand.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"M\") {\n                        const { position = \"faceup-attack\" } = cardInitialState;\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].monsterZone[zoneData.zoneIndex - 1] = card;\n\n                        if (YGOUtils.isNumeric(cardInitialState.atk)) card.currentAtk = Number(cardInitialState.atk);\n                        if (YGOUtils.isNumeric(cardInitialState.def)) card.currentDef = Number(cardInitialState.def);\n                        if (position) card.position = position;\n                        if (cardInitialState.materials) card.materials = cardInitialState.materials.map(({ id }) => getCard(zoneData.player, id)); // todo check owner\n                    } else if (zoneData.zone === \"EMZ\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].extraMonsterZone[zoneData.zoneIndex - 1] = card;\n\n                        if (YGOUtils.isNumeric(cardInitialState.atk)) card.currentAtk = Number(cardInitialState.atk);\n                        if (YGOUtils.isNumeric(cardInitialState.def)) card.currentDef = Number(cardInitialState.def);\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                        if (cardInitialState.materials) card.materials = cardInitialState.materials.map(({ id }) => getCard(zoneData.player, id)); // todo check owner\n                    }\n                    else if (zoneData.zone === \"S\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].spellTrapZone[zoneData.zoneIndex - 1] = card;\n\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                    } else if (zoneData.zone === \"F\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].fieldZone = card;\n\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                    } else if (zoneData.zone === \"GY\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        graveyard.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"B\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        banished.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"ED\") { // pendulumns\n                        // TODO\n                    }\n                });\n\n                if (hand.length > 0) {\n                    fields[i].hand = hand.toSorted((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n\n                if (graveyard.length > 0) {\n                    fields[i].graveyard = graveyard.toSorted((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n\n                if (banished.length > 0) {\n                    fields[i].hand = banished.toSorted((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n            }\n\n            for (let i = 0; i < fields.length; ++i) {\n                fields[i].mainDeck = fields[i].mainDeck.filter(c => !cardsToRemoveFromDeck[i].has(c))\n                fields[i].extraDeck = fields[i].extraDeck.filter(c => !cardsToRemoveFromDeck[i].has(c))\n            }\n        }\n    }\n\n    static isNumeric(val: any): boolean {\n        return !isNaN(Number(val));\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { MoveCardCommandData } from '../types/commands';\nimport { Card, CardPosition, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MoveCardCommand extends BaseCommand {\n    public baseType: string = \"MoveCardCommand\";\n    public data: MoveCardCommandData;\n    private prevPosition!: CardPosition;\n    private materialsToGY: Card[];\n\n    constructor(data: MoveCardCommandData) {\n        super();\n        const type = data.type || \"Move Card\";\n        this.type = type;\n        this.data = data;\n        this.materialsToGY = [];\n        this.data.type = type;\n    }\n\n    override exec(): void {\n        console.log(`Exec: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n        const { log = true } = this.data;\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        const zoneData = YGOGameUtils.getZoneData(this.data.zone);\n        const field = this.YGO.getField(zoneData.player);\n        let zone = this.data.zone;\n\n        if (this.data.zone === \"ED\" || this.data.zone === \"ED2\") {\n            this.data.position = YGOGameUtils.isPendulumCard(card) ? \"faceup\" : \"facedown\";\n        }\n\n        if (this.data.position) {\n            this.prevPosition = card.position;\n            card.position = this.data.position;\n        }\n\n        // XYZ send materials to GY if send card to Gy or banish\n        if (this.sendMaterialsToGy(card, this.data.zone)) {\n            const overlayZone = YGOUtils.getOverlayZone(this.data.originZone);\n            this.materialsToGY = card.materials;\n            card.materials.forEach(material => {\n                this.YGO.state.setCard(material, \"GY\");\n                this.YGO.duelLog.dispatch<YGODuelEvents.SendToGY>({\n                    player: this.data.player,\n                    commandId: this.getCommandId(),\n                    type: YGODuelEvents.LogType.SendToGY,\n                    id: material.id,\n                    originZone: overlayZone,\n                    zone: this.data.zone,\n                    reason: \"XYZ Material\"\n                });\n            });\n            card.materials = [];\n        }\n\n        // TODO IF PENDULUMN send cards to Extra Deck\n        this.YGO.state.moveCard(card, this.data.originZone, this.data.zone);\n\n        if (zoneData.zone === \"ED\") { // if sent to ED say the cardIndex\n            const extraDeckIndex = field.extraDeck.findIndex(c => c === card);\n            if (extraDeckIndex !== -1) {\n                zone = YGOGameUtils.createZone(zoneData.zone, zoneData.player, extraDeckIndex + 1);\n            }\n        }\n\n        if (log) {\n            this.YGO.duelLog.dispatch<any>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: this.type as any,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone,\n                reason: this.data.reason,\n                position: card.position\n            });\n        }\n    }\n\n    override undo(): void {\n        console.log(`Undo: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.materialsToGY.length > 0) {\n            this.materialsToGY.forEach(() => {\n                this.YGO.state.setCard(null, \"GY\");\n            });\n            card.materials = this.materialsToGY;\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n\n        this.YGO.state.moveCard(card, this.data.zone, this.data.originZone);\n    }\n\n    private sendMaterialsToGy(card: Card, zone: FieldZone): boolean {\n        if (!card.materials || card.materials.length === 0) return false;\n        if (this.data.zone.startsWith(\"GY\")) return true;\n        if (this.data.zone === \"B\" || this.data.zone === \"B2\") return true;\n        if (this.data.zone.startsWith(\"B-\") || this.data.zone.startsWith(\"B2-\")) return true;\n        return false;\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { BanishCommandData, Command } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class BanishCommand extends BaseCommand {\n    public baseType: string = \"BanishCommand\";\n    private data: BanishCommandData;\n    private zone: FieldZone;\n    private banishCommand: Command;\n\n    constructor(data: BanishCommandData) {\n        super();\n        this.data = data;\n        this.data.position = this.data.position || \"faceup\"\n        this.type = this.data.position === \"faceup\" ? \"Banish\" : \"Banish FD\";\n        this.zone = `B${this.data.player === 0 ? \"\" : \"2\"}-1`;\n\n        this.banishCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.banishCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.banishCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ChangeCardAtkDefCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOUtils } from '../game/YGOUtils';\n\nexport class ChangeCardAtkDefCommand extends BaseCommand {\n    private data: ChangeCardAtkDefCommandData;\n    private prevAtk: number | undefined;\n    private prevDef: number | undefined;\n\n    constructor(data: ChangeCardAtkDefCommandData) {\n        super();\n        this.type = \"Change Card Atk Def\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone)!;\n\n        if (YGOUtils.isNumeric(this.data.atk)) {\n            this.prevAtk = card.currentAtk;\n            card.currentAtk = Number(this.data.atk);\n        }\n\n        if (YGOUtils.isNumeric(this.data.def)) {\n            this.prevDef = card.currentDef;\n            card.currentAtk = Number(this.data.def);\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.ChangeCardAtkDef>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            zone: this.data.zone,\n            atk: YGOUtils.isNumeric(this.data.atk) ? Number(this.data.atk) : null,\n            def: YGOUtils.isNumeric(this.data.def) ? Number(this.data.def) : null,\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.prevAtk) {\n            card.currentAtk = this.prevAtk;\n        }\n\n        if (this.prevDef) {\n            card.currentDef = this.prevDef;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ChangeCardPositionCommandData } from '../types/commands';\nimport { CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class ChangeCardPositionCommand extends BaseCommand {\n    public baseType: string = \"ChangeCardPositionCommand\";\n    private data: ChangeCardPositionCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ChangeCardPositionCommandData) {\n        super();\n        this.type = \"Change Card Position\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone)!;\n\n        this.prevPosition = card.position;\n\n        card.position = this.data.position;\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.ChangeCardPosition>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            zone: this.data.zone,\n            position: this.data.position,\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, DestroyCardCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DestroyCardCommand extends BaseCommand {\n    public baseType: string = \"DestroyCardCommand\";\n    private data: DestroyCardCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: DestroyCardCommandData) {\n        super();\n\n        this.type = \"Destroy\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { DrawFromDeckCommandData } from '../types/commands';\nimport { Card, FieldZone } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DrawFromDeckCommand extends BaseCommand {\n    public baseType: string = \"DrawFromDeckCommand\";\n    private data: DrawFromDeckCommandData;\n    private cards: Card[];\n\n    constructor(data: DrawFromDeckCommandData) {\n        super();\n\n        this.type = \"Draw From Deck\";\n        this.data = data;\n        this.data.numberOfCards = this.data.numberOfCards || 1;\n        this.cards = [];\n    }\n\n    exec(): void {\n        console.log(`Exec: Draw ${this.data.numberOfCards} from Deck`);\n\n        this.cards = [];\n\n        const field = this.YGO.state.fields[this.data.player];\n\n        for (let i = 0; i < this.data.numberOfCards!; ++i) {\n            const card = field.mainDeck.pop()!;\n            console.log(\"DRAW\", card.name);\n\n            field.hand.push(card);\n            this.cards.push(card);\n\n            const originZone = YGOGameUtils.createZone(\"D\", this.data.player, field.mainDeck.length - 1);\n            const zone = YGOGameUtils.createZone(\"H\", this.data.player, field.hand.length);\n\n            this.YGO.duelLog.dispatch<YGODuelEvents.DrawFromDeck>({\n                commandId: this.getCommandId(),\n                player: this.data.player,\n                type: YGODuelEvents.LogType.DrawCardFromDeck,\n                id: card.id,\n                originZone,\n                zone,\n            });\n        }\n    }\n\n    undo(): void {\n        console.log(`Undo: Draw ${this.data.numberOfCards} from Deck`);\n\n        const newCards = [...this.cards].reverse();\n        const field = this.YGO.state.fields[this.data.player];\n\n        console.log(\"CARD DRAW UNDO\");\n        console.log(newCards.map(c => c.name));\n        console.log(\"DECK 1>>\", field.mainDeck.length);\n        for (const card of newCards) {\n            const cardInHandIndex = field.hand.findIndex(c => c === card);\n            if (cardInHandIndex !== -1) {\n                field.hand.splice(cardInHandIndex, 1);\n            }\n        }\n        field.mainDeck.push(...newCards);\n\n        console.log(field.hand.map(c => c.name));\n        console.log(\"DECK 2>>\", field.mainDeck.length);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { RevealCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class RevealCommand extends BaseCommand {\n    public baseType: string = \"RevealCommand\";\n    private data: RevealCommandData;\n\n    constructor(data: RevealCommandData) {\n        super();\n        this.type = \"Reveal\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        this.YGO.duelLog.dispatch<YGODuelEvents.Reveal>({\n            type: YGODuelEvents.LogType.Reveal,\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            id: this.data.id,\n            originZone: this.data.originZone\n        })\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SendCardToGYCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class SendCardToGYCommand extends BaseCommand {\n    public baseType: string = \"SendCardToGYCommand\";\n    private data: SendCardToGYCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: SendCardToGYCommandData) {\n        super();\n\n        this.type = \"Send To GY\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            reason: this.data.reason,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, FieldSpellCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { RevealCommand } from './RevealCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class FieldSpellCommand extends BaseCommand {\n    public baseType: string = \"FieldSpellCommand\";\n    private data: FieldSpellCommandData;\n    private commands: Command[];\n\n    constructor(data: FieldSpellCommandData) {\n        super();\n\n        this.type = \"Field Spell\";\n        this.data = data;\n        this.data.position = data.position === \"facedown\" ? \"facedown\" : \"faceup\";\n        this.commands = [];\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const fieldCard = this.YGO.getField(this.data.player).fieldZone;\n\n        if (fieldCard) {\n            this.commands.splice(0, 1, new SendCardToGYCommand({\n                player: this.data.player,\n                id: fieldCard.id,\n                originZone: YGOGameUtils.createZone(\"F\", this.data.player)\n            }));\n        }\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n\n        if (this.data.reveal) {\n            this.commands.push(new RevealCommand({\n                id: this.data.id,\n                originZone: this.data.zone,\n                player: this.data.player\n            }));\n        }\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { FlipCommandData } from '../types/commands';\nimport { CardPosition } from '../types/types';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class FlipCommand extends BaseCommand {\n    public baseType: string = \"FlipCommand\";\n    private data: FlipCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: FlipCommandData) {\n        super();\n        this.type = \"Flip\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone)!;\n\n        this.prevPosition = card.position;\n\n        if (YGOGameUtils.isFaceDown(card)) {\n            card.position = \"faceup-attack\";\n        } else {\n            card.position = \"faceup-defense\";\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Flip>({\n            type: YGODuelEvents.LogType.Flip,\n            commandId: this.getCommandId(),\n            player: this.data.player,\n            id: this.data.id,\n            originZone: this.data.originZone,\n        })\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, FusionSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class FusionSummonCommand extends BaseCommand {\n    public baseType: string = \"FusionSummonCommand\";\n    private data: FusionSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: FusionSummonCommandData) {\n        super();\n        this.type = \"Fusion Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Fusion Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.SynchroSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.FusionSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position!,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, LinkSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { CardPosition } from '../types/types';\n\nexport class LinkSummonCommand extends BaseCommand {\n    public baseType: string = \"LinkSummonCommand\";\n    private data: LinkSummonCommandData;\n    private commands: Command[];\n    private position: CardPosition;\n\n    constructor(data: LinkSummonCommandData) {\n        super();\n        this.type = \"Link Summon\";\n        this.data = data;\n        this.position = \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Link Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.LinkSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.LinkSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, MillFromDeckCommandData } from '../types/commands';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MillFromDeckCommand extends BaseCommand {\n    public baseType: string = \"MillFromDeckCommand\";\n    private data: MillFromDeckCommandData;\n    private commands: Command[];\n\n    constructor(data: MillFromDeckCommandData) {\n        super();\n\n        this.type = \"Mill From Deck\";\n        const { numberOfCards = 1 } = data;\n        this.data = data;\n        this.data.numberOfCards = Math.max(1, numberOfCards);\n        this.commands = [];\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const field = this.YGO.getField(this.data.player);\n        const numberOfCards = Math.min(this.data.numberOfCards!, field.mainDeck.length);\n\n        for (let i = 0; i < numberOfCards!; ++i) {\n            const cardIndex = field.mainDeck.length - 1 - i;\n            const card = field.mainDeck[cardIndex];\n\n            // TODO LOG THIS SHIT :)\n\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: YGOGameUtils.createZone(\"D\", this.data.player, cardIndex + 1),\n                player: this.data.player\n            }))\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, NormalSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class NormalSummonCommand extends BaseCommand {\n    public baseType: string = \"NormalSummonCommand\";\n    private data: NormalSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: NormalSummonCommandData) {\n        super();\n        this.type = \"Normal Summon\";\n        this.data = data;\n        this.data.position = \"faceup-attack\";\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetCardCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { CardPosition } from '../types/types';\nimport { RevealCommand } from './RevealCommand';\n\nexport class SetCardCommand extends BaseCommand {\n    public baseType: string = \"SetCardCommand\";\n    private data: SetCardCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    private commands: Command[];\n\n    constructor(data: SetCardCommandData) {\n        super();\n        this.type = \"Set ST\";\n        this.data = data;\n        this.commands = [];\n\n        if (this.data.zone) {\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.data.zone,\n                position: \"facedown\"\n            }));\n\n            if (this.data.reveal) {\n                this.commands.push(new RevealCommand({\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.zone,\n                }));\n            }\n        }\n    }\n\n    exec(): void {\n        if (this.commands.length > 0) {\n            this.execMultipleChildCommand(this.commands);\n        } else {\n            const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n            this.prevPosition = card.position;\n            card.position = \"facedown\";\n        }\n    }\n\n    undo(): void {\n        if (this.commands.length > 0) {\n            this.undoMultipleChildCommand(this.commands);\n        }\n\n        if (this.prevPosition) {\n            const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetMonsterCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SetMonsterCommand extends BaseCommand {\n    public baseType: string = \"SetMonsterCommand\";\n    private data: SetMonsterCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SetMonsterCommandData) {\n        super();\n        this.type = \"Set Monster\";\n        this.data = data;\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"facedown\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ShuffleDeckCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ShuffleDeckCommand extends BaseCommand {\n    public baseType: string = \"ShuffleDeckCommand\";\n    private data: ShuffleDeckCommandData;\n    private cardPositions!: Array<number>;\n\n    constructor(data: ShuffleDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = \"Shuffle Deck\";\n    }\n\n    exec(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n\n        if (this.cardPositions) {\n            for (let i = 0; i < this.cardPositions.length; ++i) {\n                const index = this.cardPositions[i];\n                const temp = mainDeck[index];\n                mainDeck[index] = mainDeck[i];\n                mainDeck[i] = temp;\n            }\n        } else {\n            this.cardPositions = YGOGameUtils.shuffleCards(mainDeck);\n        }\n\n        if (this.data.log !== false) {\n            this.YGO.duelLog.dispatch<YGODuelEvents.Shuffle>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: YGODuelEvents.LogType.Shuffle\n            });\n        }\n    }\n\n    undo(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n        for (let i = 0; i < this.cardPositions.length; ++i) {\n            const index = this.cardPositions[i];\n            const temp = mainDeck[index];\n            mainDeck[index] = mainDeck[i];\n            mainDeck[i] = temp;\n        }\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SpecialSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SpecialSummonCommand extends BaseCommand {\n    public baseType: string = \"SpecialSummonCommand\";\n    private data: SpecialSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SpecialSummonCommandData) {\n        super();\n        this.type = \"Special Summon\";\n        this.data = data;\n        this.data.position = this.data.position || 'faceup-attack';\n\n        if (this.data.position !== 'faceup-attack'\n            && this.data.position !== 'faceup-defense') {\n            this.data.position = 'faceup-attack';\n        }\n\n        console.log(this.data);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: \"Special Summon\",\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SynchroSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class SynchroSummonCommand extends BaseCommand {\n    public baseType: string = \"SynchroSummonCommand\";\n    private data: SynchroSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: SynchroSummonCommandData) {\n        super();\n        this.type = \"Synchro Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Synchro Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.SynchroSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.SynchroSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position!,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToDeckCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { ShuffleDeckCommand } from './ShuffleDeck';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class ToDeckCommand extends BaseCommand {\n    public baseType: string = \"ToDeckCommand\";\n    private data: ToDeckCommandData;\n    private zone!: FieldZone;\n    private commands!: Command[];\n\n    constructor(data: ToDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = this.getCommandType();\n    }\n\n    private isTopCard() {\n        return this.data.position === \"top\";\n    }\n\n    private getCommandType() {\n        return this.isTopCard() ? \"To Top Deck\" : \"To Bottom Deck\";\n    }\n\n    private getDeckIndex(): number {\n        const mainDeck = this.YGO.state.fields[0].mainDeck;\n\n        if (this.isTopCard()) {\n            return mainDeck.length + 1;\n        }\n\n        return 1;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        if (!this.commands) {\n            const deckIndex = this.getDeckIndex();\n            this.zone = `D${this.data.player === 0 ? \"\" : \"2\"}-${deckIndex}`;\n            this.commands = [];\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.zone,\n                //position: \"facedown\", // TODO DECIDE\n            }));\n\n            const { shuffle = false } = this.data;\n\n            if (shuffle) {\n                this.commands.push(new ShuffleDeckCommand({ player: this.data.player }));\n            }\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToExtraDeckCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToExtraDeckCommand extends BaseCommand {\n    public baseType: string = \"ToExtraDeckCommand\";\n    private data: ToExtraDeckCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToExtraDeckCommandData) {\n        super();\n        this.type = \"To Extra Deck\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"ED\", this.data.player)\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToHandCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToHandCommand extends BaseCommand {\n    public baseType: string = \"ToHandCommand\";\n    private data: ToHandCommandData;\n    private command!: Command;\n\n    constructor(data: ToHandCommandData) {\n        super();\n        this.type = \"To Hand\";\n        this.data = data;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const handIndex = this.YGO.getField(this.data.player).hand.length + 1;\n\n        this.command = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex),\n            position: \"facedown\"\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.command);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.command);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToSTCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class ToSTCommand extends BaseCommand {\n    public baseType: string = \"ToSTCommand\";\n    private data: ToSTCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToSTCommandData) {\n        super();\n        this.type = \"To ST\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"faceup\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSetCommand extends BaseCommand {\n    public baseType: string = \"TributeSetCommand\";\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: TributeSummonCommandData) {\n        super();\n\n        this.type = \"Tribute Set\";\n        this.data = data;\n        this.data.position = \"facedown\";\n\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSummonCommand extends BaseCommand {\n    public baseType: string = \"TributeSummonCommand\";\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n    \n    constructor(data: TributeSummonCommandData) {\n        super();\n        this.type = \"Tribute Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }))\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { XYZAttachCommandData as XYZAttachMaterialCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZAttachMaterialCommand extends BaseCommand {\n    public baseType: string = \"XYZAttachMaterialCommand\";\n    private data: XYZAttachMaterialCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZAttachMaterialCommandData) {\n        super();\n        this.type = \"XYZ Attach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.YGO.state.setCard(null, this.data.originZone);\n        card.materials.push(this.materialCardReference);\n\n        console.log(\"TCL:: EXEC ATTACH:: \", this.materialCardReference.name, this.data.originZone);\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZAttach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.YGO.state.setCard(this.materialCardReference, this.data.originZone);\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { XYZDetachCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZDetachMaterialCommand extends BaseCommand {\n    public baseType: string = \"XYZDetachMaterialCommand\";\n    private data: XYZDetachCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZDetachCommandData) {\n        super();\n        this.type = \"XYZ Detach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = card.materials[this.data.materialIndex];\n        card.materials.splice(this.data.materialIndex, 1);\n\n        this.YGO.state.setCard(this.materialCardReference, \"GY\");\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZDetach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: card.id,\n            materialIndex: this.data.materialIndex,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n        this.YGO.state.setCard(null, \"GY\");\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { Card, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZSummonCommand extends BaseCommand {\n    public baseType: string = \"XYZSummonCommand\";\n    private data: XYZSummonCommandData;\n    private commands: Command[];\n    private overlayZone: FieldZone;\n\n    constructor(data: XYZSummonCommandData) {\n        super();\n        this.type = \"XYZ Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n        this.overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new XYZMaterialsMove({\n                player: this.data.player,\n                overlayZone: this.overlayZone,\n                id: material.id,\n                zone: material.zone\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        // TODO: @RMS MATERIALS OF MATERIAL ex: nerd to zeus purrely to noir\n\n        card.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n            return materialCard;\n        });\n\n        this.execMultipleChildCommand(this.commands);\n        \n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position!,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        card.materials = [];\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n\ninterface XYZMaterialsMoveData {\n    player: number,\n    id: number\n    overlayZone: FieldZone\n    zone: FieldZone\n}\n\nclass XYZMaterialsMove extends BaseCommand {\n    private data: XYZMaterialsMoveData;\n    private card!: Card;\n\n    constructor(data: XYZMaterialsMoveData) {\n        super();\n        this.data = data;\n    }\n\n    exec(): void {\n        this.card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        this.YGO.state.setCard(null, this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlay>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlay,\n            id: this.data.id,\n            originZone: this.data.zone,\n            overlayZone: this.data.overlayZone\n        });\n    }\n\n    undo(): void {\n        this.YGO.state.setCard(this.card, this.data.zone);\n    }\n}\n","import { Command } from \"../types/commands\";\nimport { ActivateCardCommand } from \"./ActivateCardCommand\";\nimport { BanishCommand } from \"./BanishCommand\";\nimport { ChangeCardAtkDefCommand } from \"./ChangeCardAtkDefCommand\";\nimport { ChangeCardPositionCommand } from \"./ChangeCardPositionCommand\";\nimport { DestroyCardCommand } from \"./DestroyCard\";\nimport { DrawFromDeckCommand } from \"./DrawFromDeckCommand\";\nimport { FieldSpellCommand } from \"./FieldSpellCommand\";\nimport { FlipCommand } from \"./FlipCommand\";\nimport { FusionSummonCommand } from \"./FusionSummonCommand\";\nimport { LinkSummonCommand } from \"./LinkSummonCommand\";\nimport { MillFromDeckCommand } from \"./MillFromDeckCommand\";\nimport { NormalSummonCommand } from \"./NormalSummonCommand\";\nimport { RevealCommand } from \"./RevealCommand\";\nimport { SendCardToGYCommand } from \"./SendCardToGY\";\nimport { SetCardCommand } from \"./SetCardCommand\";\nimport { SetMonsterCommand } from \"./SetMonsterCommand\";\nimport { ShuffleDeckCommand } from \"./ShuffleDeck\";\nimport { SpecialSummonCommand } from \"./SpecialSummonCommand\";\nimport { SynchroSummonCommand } from \"./SynchroSummonCommand\";\nimport { ToDeckCommand } from \"./ToDeckCommand\";\nimport { ToExtraDeckCommand } from \"./ToExtraDeckCommand\";\nimport { ToHandCommand } from \"./ToHandCommand\";\nimport { ToSTCommand } from \"./ToSTCommand\";\nimport { TributeSetCommand } from \"./TributeSetCommand\";\nimport { TributeSummonCommand } from \"./TributeSummonCommand\";\nimport { XYZAttachMaterialCommand } from \"./XYZAttachMaterialCommand\";\nimport { XYZDetachMaterialCommand } from \"./XYZDetachMaterialCommand\";\nimport { XYZSummonCommand } from \"./XYZSummonCommand\";\n\nexport const Commands = {\n    NormalSummonCommand,\n    SetMonsterCommand,\n    SetCardCommand,\n    SendCardToGYCommand,\n    BanishCommand,\n    DrawFromDeckCommand,\n    MillFromDeckCommand,\n    ActivateCardCommand,\n    SpecialSummonCommand,\n    TributeSummonCommand,\n    TributeSetCommand,\n    LinkSummonCommand,\n    FusionSummonCommand,\n    SynchroSummonCommand,\n    XYZSummonCommand,\n    XYZAttachMaterialCommand,\n    XYZDetachMaterialCommand,\n    ToDeckCommand,\n    ShuffleDeckCommand,\n    DestroyCardCommand,\n    RevealCommand,\n    ToExtraDeckCommand,\n    ToHandCommand,\n    FieldSpellCommand,\n    ChangeCardPositionCommand,\n    ChangeCardAtkDefCommand,\n    FlipCommand,\n    ToSTCommand,\n}\n\nexport const COMMANDS_BY_NAME: any = {\n    \"NormalSummonCommand\": NormalSummonCommand,\n    \"SetMonsterCommand\": SetMonsterCommand,\n    \"SetCardCommand\": SetCardCommand,\n    \"SendCardToGYCommand\": SendCardToGYCommand,\n    \"BanishCommand\": BanishCommand,\n    \"DrawFromDeckCommand\": DrawFromDeckCommand,\n    \"MillFromDeckCommand\": MillFromDeckCommand,\n    \"ActivateCardCommand\": ActivateCardCommand,\n    \"SpecialSummonCommand\": SpecialSummonCommand,\n    \"TributeSummonCommand\": TributeSummonCommand,\n    \"TributeSetCommand\": TributeSetCommand,\n    \"LinkSummonCommand\": LinkSummonCommand,\n    \"FusionSummonCommand\": FusionSummonCommand,\n    \"SynchroSummonCommand\": SynchroSummonCommand,\n    \"XYZSummonCommand\": XYZSummonCommand,\n    \"XYZAttachMaterialCommand\": XYZAttachMaterialCommand,\n    \"XYZDetachMaterialCommand\": XYZDetachMaterialCommand,\n    \"ToDeckCommand\": ToDeckCommand,\n    \"ShuffleDeckCommand\": ShuffleDeckCommand,\n    \"DestroyCardCommand\": DestroyCardCommand,\n    \"RevealCommand\": RevealCommand,\n    \"ToExtraDeckCommand\": ToExtraDeckCommand,\n    \"ToHandCommand\": ToHandCommand,\n    \"FieldSpellCommand\": FieldSpellCommand,\n    \"ChangeCardPositionCommand\": ChangeCardPositionCommand,\n    \"ChangeCardAtkDefCommand\": ChangeCardAtkDefCommand,\n    \"FlipCommand\": FlipCommand,\n    \"ToSTCommand\": ToSTCommand,\n}\n\nexport function GetCommandByClassName<T = Command>(commandClassName: string): T | null {\n    return COMMANDS_BY_NAME[commandClassName];\n}","import { BaseCommand } from './BaseCommand';\nimport { StartHandCommandData } from '../types/commands';\nimport { Card, FieldZone } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class StartHandCommand extends BaseCommand {\n    public baseType: string = \"StartHandCommand\";\n    private data: StartHandCommandData;\n    private cards: Card[];\n\n    constructor(data: StartHandCommandData) {\n        super();\n\n        this.type = \"Start Hand\";\n        this.data = data;\n        this.cards = [];\n        (this as any).core = true;\n    }\n\n    exec(): void {\n        const field = this.YGO.getField(this.data.player);\n\n        if (field.hand.length > 0) {\n            this.cards = field.hand.map(card => card);\n        } else {\n            this.cards = [];\n\n            for (let i = 0; i < this.data.numberOfCards; ++i) {\n                const card = field.mainDeck.pop()!;\n                field.hand.push(card);\n                this.cards.push(card);\n            }\n        }\n\n        const cards: { id: number, zone: FieldZone }[] = this.cards.map((card, handIndex) => {\n            return {\n                id: card.id,\n                zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex + 1)\n            }\n        });\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.StartHand>({\n            commandId: this.getCommandId(),\n            player: this.data.player,\n            type: YGODuelEvents.LogType.StartHand,\n            cards,\n            core: true,\n        });\n    }\n\n    undo(): void {\n        console.log(`Undo: Draw ${this.data.numberOfCards} from Deck`);\n\n        const newCards = [...this.cards].reverse();\n        const field = this.YGO.state.fields[this.data.player];\n\n        console.log(\"CARD DRAW UNDO\");\n        console.log(newCards.map(c => c.name));\n        console.log(\"DECK 1>>\", field.mainDeck.length);\n        for (const card of newCards) {\n            const cardInHandIndex = field.hand.findIndex(c => c === card);\n            if (cardInHandIndex !== -1) {\n                field.hand.splice(cardInHandIndex, 1);\n            }\n        }\n        field.mainDeck.push(...newCards);\n\n        console.log(field.hand.map(c => c.name));\n        console.log(\"DECK 2>>\", field.mainDeck.length);\n    }\n}\n","export class EventBus<T extends Record<string, (...args: any[]) => void>> {\n    private events: Map<keyof T, Function[]>;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    on<K extends keyof T>(event: K, listener: T[K]): void {\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n        this.events.get(event)!.push(listener);\n    }\n\n    dispatch<K extends keyof T>(event: K, ...args: Parameters<T[K]>): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            listeners.forEach(listener => listener(...args));\n        }\n    }\n\n    off<K extends keyof T>(event: K, listener: T[K]): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            this.events.set(\n                event,\n                listeners.filter(l => l !== listener)\n            );\n        }\n    }\n\n    clear<K extends keyof T>(event: K): void {\n        if (this.events.has(event)) {\n            this.events.delete(event);\n        }\n    }\n\n    clearAll(): void {\n        this.events.clear();\n    }\n}","import { Command } from \"../types/commands\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelEvents } from '../types/duel-events';\n\ntype YGODuelLogEventMap = {\n    'new-log': (log: YGODuelEvents.DuelLog) => void;\n    'update-logs': (logs: YGODuelEvents.DuelLog[]) => void;\n};\n\nexport class YGODuelLog {\n    public logs: YGODuelEvents.DuelLog[];\n    public events: EventBus<YGODuelLogEventMap>;\n\n    constructor() {\n        this.logs = [];\n        this.events = new EventBus();\n    }\n\n    dispatch<T extends YGODuelEvents.DuelLog>(log: T) {\n        this.logs.push(log);\n        this.events.dispatch(\"new-log\", log);\n        this.onLogsUpdated();\n    }\n\n    peek(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length == 0) return null;\n        return this.logs[this.logs.length - 1];\n    }\n\n    peekCommand(): number {\n        if (this.logs.length == 0) return -1;\n        return this.logs[this.logs.length - 1].commandId;\n    }\n\n    pop(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length === 0) return null;\n        return this.logs.pop() as YGODuelEvents.DuelLog;\n    }\n\n    removeCommand(command: Command, args?: { log: boolean }) {\n        const commandIndex = this.logs.findIndex(cmd => cmd.commandId === command.commandId);\n\n        if (commandIndex !== -1) {\n            this.logs.splice(commandIndex, this.logs.length - commandIndex);\n        }\n\n        if (args?.log !== false) {\n            this.events.dispatch(\"update-logs\", this.logs);\n        }\n    }\n\n    onLogsUpdated() {\n        this.events.dispatch(\"update-logs\", this.logs);\n    }\n}","import { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\nimport { YGOUtils } from \"./YGOUtils\";\n\nexport class YGOGameState {\n    public fields: PlayerField[];\n    private cardsInGame: Map<number, Card>;\n\n    constructor(props: YGOProps) {\n        this.fields = YGOUtils.initializePlayersFields(props);\n        this.cardsInGame = YGOUtils.getCardsInGame(this.fields);\n    }\n\n    getCardById(id: number, zone: FieldZone): Card {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone === \"GY\" || zone === \"GY2\") {\n            const card = this.fields[playerIndex].graveyard.find(c => c.id === id);\n\n            if (!card) {\n                throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n            }\n\n            return card;\n        }\n\n        const card = this.getCardFromZone(zone);\n\n        if (card && card.id === id) return card;\n\n        throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n    }\n\n    getCardFromZone(zone: FieldZone): Card | null {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].hand[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].monsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].spellTrapZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].graveyard[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].banishedZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].mainDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"ED-\") || zone.startsWith(\"ED2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraMonsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            const card = this.fields[playerIndex].fieldZone;\n            return card;\n        }\n\n        return null;\n    }\n\n    moveCardById(cardId: number, originZone: FieldZone, zone: FieldZone) {\n        const card = this.getCardById(cardId, originZone);\n        this.moveCard(card, originZone, zone);\n    }\n\n    moveCard(card: Card, originZone: FieldZone, zone: FieldZone) {\n        this.removeCard(originZone);\n        this.setCard(card, zone);\n    }\n\n    setCard(card: Card | null, zone: FieldZone): void {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\") || zone === \"H\" || zone === \"H2\") {\n            const handIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const hand = this.fields[playerIndex].hand;\n\n            if (handIndex == -1 && card) {\n                hand.push(card);\n            } else if (card) {\n                if (handIndex >= hand.length) {\n                    hand.push(card);\n                } else {\n                    hand.splice(handIndex, 0, card);\n                }\n            } else {\n                hand.splice(handIndex, 1);\n            }\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].monsterZone[zoneIndex] = card;\n            // todo check if monster etc \n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].spellTrapZone[zoneIndex] = card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].extraMonsterZone[zoneIndex] = card;\n        }\n        else if (zone.startsWith(\"ED\") || zone.startsWith(\"ED2\")) { // append to extra\n            console.log(\"MOVE CARD TO ED >> Card:\", zone, card?.id)\n            if (zone.indexOf(\"-\") !== -1) {\n                const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n                if (!card) {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 1);\n                } else {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 0, card);\n                }\n            } else if (card) {\n                const isPendulum = card.isMainDeckCard && YGOGameUtils.isPendulumCard(card);\n                const extraDeck = this.fields[playerIndex].extraDeck;\n\n                if (isPendulum) {\n                    extraDeck.unshift(card); // add card to top of extraDeck\n                } else {\n                    const weight = YGOGameUtils.getCardBaseType(card);\n                    const index = extraDeck.findIndex(c => {\n                        const weight2 = YGOGameUtils.getCardBaseType(c);\n                        if (weight < weight2) return true;\n                        if (weight === weight2) {\n                            if (card.name === c.name && card.index < c.index) return true;\n                        }\n                        return card.name < c.name;\n                    });\n\n                    console.log(\"MY NEW INDEX >>\", index);\n\n                    if (index !== -1) {\n                        extraDeck.splice(index, 0, card);\n                    } else {\n                        extraDeck.push(card);\n                    }\n                }\n            } else {\n                throw new Error(\"No card to add to Extra Deck\");\n            }\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n\n            console.log(\"MOVE CARD TO DECK \", zone);\n\n            if (!card) {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 1);\n            } else {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 0, card);\n            }\n        } else if (zone === \"GY\" || zone === \"GY2\" || zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const gy = this.fields[playerIndex].graveyard;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    gy.unshift(card);\n                } else {\n                    gy.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    gy.pop();\n                } else {\n                    gy.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone === \"B\" || zone === \"B2\" || zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const banishZone = this.fields[playerIndex].banishedZone;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    banishZone.unshift(card);\n                } else {\n                    banishZone.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    banishZone.pop();\n                } else {\n                    banishZone.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            this.fields[playerIndex].fieldZone = card;\n        }\n    }\n\n    removeCard(zone: FieldZone): Card | null {\n        const card = this.getCardFromZone(zone);\n        this.setCard(null, zone);\n        // TODO Reset card\n        return card;\n    }\n\n    getCardData(cardId: number): Card | null {\n        return this.cardsInGame.get(cardId) || null;\n    }\n\n    shuffleDeck(player: number) {\n        const deck = this.fields[player].mainDeck;\n        if (deck.length === 0) return; // If the deck is empty, do nothing\n\n        for (let i = deck.length - 1; i > 0; i--) {\n            const cardIndex = Math.floor(Math.random() * (i + 1));\n            [deck[i], deck[cardIndex]] = [deck[cardIndex], deck[i]];\n        }\n    }\n\n    getPlayerIndexFromZone(zone: string): number {\n        return YGOUtils.getPlayerIndexFromZone(zone);\n    }\n\n    getAvailableZones(fieldZones: (\"M\" | \"M2\" | \"S\" | \"S2\" | \"F\" | \"F2\" | \"EMZ\")[]): FieldZone[] {\n        const result: FieldZone[] = [];\n\n        // TODO @RMS  make this player aware\n\n        for (const fieldZone of fieldZones) {\n            const player = this.getPlayerIndexFromZone(fieldZone);\n            const field = this.fields[player];\n            if (fieldZone === \"M\") {\n                field.monsterZone.forEach((data, index) => {\n                    const zone = `M${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"S\") {\n                field.spellTrapZone.forEach((data, index) => {\n                    const zone = `S${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"EMZ\") {\n                for (let i = 0; i < 2; ++i) {\n                    const data = field.extraDeck[i] || field.extraDeck[i];\n                    const zone = `EMZ-${i + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                }\n            } else if (fieldZone === \"F\") {\n                if (field.fieldZone) result.push(\"F\");\n            }\n        }\n\n        return result;\n    }\n}","import { Card, FieldZone, FileldStateEntry, PlayerField } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\nexport class YGOReplayUtils {\n    static createReplayData(ygo: YGOCore) {\n        const players = ygo.props.players.map((playerData, playerIndex) => {\n            return {\n                name: playerData.name,\n                deck: playerData.mainDeck.map(c => c.id),\n                mainDeckOrder: ygo.getField(playerIndex).initialMainDeckOrder,\n                extraDeck: playerData.mainDeck.map(c => c.id),\n            }\n        });\n\n        const commands = ygo.commands.map(cmd => cmd.toJSON());\n        const endField: any = [];\n\n        for (let playerIndex = 0; playerIndex < ygo.state.fields.length; ++playerIndex) {\n            const playerEndField: any = [];\n            const field = ygo.getField(playerIndex);\n\n            for (let i = 0; i < field.monsterZone.length; ++i) {\n                if (field.monsterZone[i]) {\n                    const card = field.monsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"M\", playerIndex, i + 1);\n                    playerEndField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.spellTrapZone.length; ++i) {\n                if (field.spellTrapZone[i]) {\n                    const card = field.spellTrapZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"S\", playerIndex, i + 1);\n                    playerEndField.push({ id: card.id, zone });\n                }\n            }\n\n            for (let i = 0; i < field.extraMonsterZone.length; ++i) {\n                if (field.extraMonsterZone[i]) {\n                    const card = field.extraMonsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"EMZ\", playerIndex, i + 1);\n                    playerEndField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.graveyard.length; ++i) {\n                const card = field.graveyard[i];\n                const zone = YGOGameUtils.createZone(\"GY\", playerIndex);\n                playerEndField.push({ id: card.id, zone });\n            }\n\n            for (let i = 0; i < field.banishedZone.length; ++i) {\n                const card = field.banishedZone[i];\n                const zone = YGOGameUtils.createZone(\"B\", playerIndex);\n                const result: any = { id: card.id, zone };\n\n                if (YGOGameUtils.isFaceDown(card)) {\n                    result.position = \"facedown\"\n                }\n\n                playerEndField.push(result);\n            }\n\n            endField.push(playerEndField);\n        }\n\n        // todo get end field etc..\n        return {\n            players,\n            commands,\n            endField\n        }\n    }\n\n    private static getMonsterCardInfo(card: Card, zone: FieldZone): any {\n        const result: any = {\n            id: card.id,\n            zone\n        }\n\n        if (card.atk !== card.currentAtk) {\n            result.atk = card.currentAtk;\n        }\n\n        if (card.def !== card.currentDef) {\n            result.def = card.currentDef;\n        }\n\n        if (card.position !== \"faceup-attack\") {\n            result.position = card.position;\n        }\n\n        if (card.materials.length > 0) {\n            result.materials = card.materials.map(materialCard => ({ id: materialCard.id })); // TODO OWner of the card\n        }\n\n        return result;\n    }\n}","import { GetCommandByClassName, Commands as YGOCommands } from \"../commands\";\nimport { StartHandCommand } from \"../commands/StartHandCommand\";\nimport { Command } from \"../types/commands\";\nimport { PlayerField, YGOProps } from \"../types/types\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelLog } from \"./YGODuelLog\";\nimport { YGOGameState } from \"./YGOGameState\";\nimport { YGOReplayUtils } from \"./YGOReplayUtils\";\n\nexport class YGOCore {\n    // private\n    private commandId: number;\n    // public\n    public props: YGOProps;\n    public state: YGOGameState;\n    public commands: Command[];\n    public commandIndex: number = -1;\n    public duelLog: YGODuelLog;\n    public events: EventBus<any>;\n\n    constructor(props: YGOProps) {\n        this.props = props;\n        this.state = new YGOGameState(props);\n        this.duelLog = new YGODuelLog();\n        this.events = new EventBus();\n        this.commands = this.createYGOCommands(props.commands);\n        this.commandId = 0;\n    }\n\n    start() {\n        const { draw: cardsToDrawInStart = 5 } = this.props.options || {};\n\n        if (this.commands.length === 0) {\n            this.props.players.forEach((_, player) => {\n                this.exec(new StartHandCommand({\n                    player,\n                    numberOfCards: cardsToDrawInStart\n                }));\n            });\n        }\n    }\n\n    exec(command: Command): Command {\n        if (this.hasNextCommand()) {\n            this.commands.splice(this.commandIndex + 1, this.commands.length - this.commandIndex);\n        }\n        this.commandIndex = this.commands.length;\n        this.commands.push(command);\n        command.init(this);\n        command.exec();\n        return command;\n    }\n\n    peek(): Command | null {\n        return this.commands.length > 0 ? this.commands[this.commands.length - 1] : null;\n    }\n\n    redo(): Command | null {\n        if (!this.hasNextCommand()) return null;\n        this.commandIndex++;\n        const cmdToRedo = this.commands[this.commandIndex];\n        cmdToRedo.exec();\n\n        this.duelLog.onLogsUpdated();\n\n        return cmdToRedo;\n    }\n\n    undo(): Command | null {\n        if (!this.hasPrevCommand()) return null;\n\n        const cmdToUndo = this.commands[this.commandIndex];\n\n        this.duelLog.removeCommand(cmdToUndo);\n        cmdToUndo.undo();\n        this.commandIndex--;\n        this.duelLog.onLogsUpdated();\n\n        return cmdToUndo;\n    }\n\n    goToCommand(command: Command): boolean {\n\n        const commandIndex = this.commands.findIndex(c => c === command);\n\n        if (commandIndex === -1) return false;\n\n        if (commandIndex === this.commandIndex) return true;\n\n        if (commandIndex > this.commandIndex) {\n            while (this.commandIndex !== commandIndex && this.hasNextCommand()) {\n                this.redo();\n            }\n            return true;\n        } else {\n            while (this.commandIndex !== commandIndex && this.hasPrevCommand()) {\n                this.undo();\n            }\n            return true;\n        }\n    }\n\n    hasNextCommand() {\n        return this.commands.length - 1 > this.commandIndex;\n    }\n\n    hasPrevCommand() {\n        return this.commandIndex >= 0;\n    }\n\n    getNextCommandId() {\n        return ++this.commandId;\n    }\n\n    getReplayData() {\n\n        while (this.hasNextCommand()) {\n            this.redo();\n        }\n\n        return YGOReplayUtils.createReplayData(this);\n    }\n\n    getField(player: number): PlayerField {\n        return this.state.fields[player];\n    }\n\n    private createYGOCommands(commands?: any[]) {\n        if (Array.isArray(commands)) {\n            const loadedCommands = commands.map(cmd => {\n                const CommandClass = GetCommandByClassName(cmd.type);\n\n                if (!CommandClass) throw new Error(`Command \"${cmd.type}\" dont exists!`);\n\n                const command = new (CommandClass as any)(cmd.data)\n                command.init(this);\n                return command;\n            });\n            return loadedCommands;\n        }\n        return [];\n    }\n}","import { Commands } from './commands';\n\nexport * from './game/YGOCore';\nexport * from './game/YGODuelLog';\nexport * from './game/YGOGameUtils';\nexport * from './types/duel-events';\n\nexport const YGOCommands = Commands;\n\nexport const debug_version = 2;"],"names":["BaseCommand","constructor","this","commandId","parent","init","ygo","YGO","getNextCommandId","getCommandId","_a","undefined","execChildCommand","command","exec","undoChildCommand","undo","undoMultipleChildCommand","commands","i","length","execMultipleChildCommand","isValid","toJSON","data","type","baseType","YGODuelEvents","CardBaseType","LogType","ActivateCardCommand","super","card","state","getCardById","id","originZone","zone","removeCard","setCard","console","log","prevPosition","position","duelLog","dispatch","player","Activate","YGOGameUtils","isLinkMonster","typeline","includes","isMonster","isXYZMonster","isSynchroMonster","isFusionMonster","isPendulumCard","frameType","isFaceUp","isFaceDown","isSpellTrap","isSpell","isTrap","startsWith","isFieldSpell","race","isDefense","isAttack","hasLinkMonstersInField","field","monsterZone","some","extraMonsterZone","hasXyzMonstersInField","getPlayerIndexFromZone","createZone","getZoneData","args","split","playerIndex","zoneId","zoneIndex","Number","endsWith","substring","getCardBaseType","EffectMonster","Spell","RitualMonster","Trap","FusionMonster","SynchroMonster","XYZMonster","LinkMonster","NormalMonster","getCardsBaseType","cards","map","c","toSortedCards","sortCards","cardsToSort","cardsWeights","j","name","shuffleCards","positions","Array","index","Math","floor","random","temp","YGOUtils","parseMainDeck","mainDeck","parseCard","isMainDeckCard","parseExtraDeck","extraDeck","extra","owner","originalOwner","materials","getCardsInGame","fields","Map","has","set","getOverlayZone","initializePlayersFields","props","shuffleDecks","options","cardIndex","lp","hand","initialMainDeckOrder","spellTrapZone","fieldZone","graveyard","banishedZone","players","_","forEach","mainDeckOrder","swapIndex","recoverFields","fieldState","getFieldsAsString","push","field1","getField","field2","join","_b","isArray","cardsToRemoveFromDeck","Set","cardsToRemoveFromExtraDeck","getCard","find","add","edCard","Error","banished","cardInitialState","zoneData","isNumeric","atk","currentAtk","def","currentDef","toSorted","card1","card2","cardInHand","filter","val","isNaN","MoveCardCommand","materialsToGY","sendMaterialsToGy","overlayZone","material","SendToGY","reason","moveCard","extraDeckIndex","findIndex","BanishCommand","banishCommand","ChangeCardAtkDefCommand","prevAtk","prevDef","ChangeCardPositionCommand","DestroyCardCommand","moveCardCommand","DrawFromDeckCommand","numberOfCards","pop","DrawCardFromDeck","newCards","reverse","cardInHandIndex","splice","RevealCommand","Reveal","SendCardToGYCommand","FieldSpellCommand","fieldCard","reveal","FlipCommand","Flip","FusionSummonCommand","FusionSummon","LinkSummonCommand","LinkSummon","MillFromDeckCommand","max","min","NormalSummonCommand","SetCardCommand","SetMonsterCommand","ShuffleDeckCommand","cardPositions","Shuffle","SpecialSummonCommand","SynchroSummonCommand","SynchroSummon","ToDeckCommand","getCommandType","isTopCard","getDeckIndex","deckIndex","shuffle","ToExtraDeckCommand","ToHandCommand","handIndex","ToSTCommand","TributeSetCommand","tributes","cmd","TributeSummonCommand","XYZAttachMaterialCommand","getCardFromZone","materialCardReference","XYZSummon","indexOf","XYZDetachMaterialCommand","materialIndex","XYZDetachMaterial","XYZSummonCommand","XYZMaterialsMove","XYZOverlay","Commands","COMMANDS_BY_NAME","StartHandCommand","core","StartHand","EventBus","events","on","event","listener","get","listeners","off","l","clear","delete","clearAll","YGODuelLog","logs","onLogsUpdated","peek","peekCommand","removeCommand","commandIndex","YGOGameState","cardsInGame","moveCardById","cardId","isPendulum","unshift","weight","weight2","gyIndex","gy","banishZone","getCardData","shuffleDeck","deck","getAvailableZones","fieldZones","result","YGOReplayUtils","createReplayData","playerData","endField","playerEndField","getMonsterCardInfo","materialCard","YGOCore","createYGOCommands","start","draw","cardsToDrawInStart","hasNextCommand","redo","cmdToRedo","hasPrevCommand","cmdToUndo","goToCommand","getReplayData","CommandClass","commandClassName","YGOCommands","debug_version"],"mappings":"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"}