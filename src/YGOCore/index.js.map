{"version":3,"file":"index.js","sources":["../src/commands/BaseCommand.ts","../src/types/duel-events.ts","../src/types/types.ts","../src/game/YGOGameUtils.ts","../src/commands/ActivateCardCommand.ts","../src/game/YGOUtils.ts","../src/commands/XYZMoveMaterials.ts","../src/commands/MoveCardCommand.ts","../src/commands/BanishCommand.ts","../src/commands/ChangeCardAtkDefCommand.ts","../src/commands/ChangeCardPositionCommand.ts","../src/commands/DestroyCard.ts","../src/commands/DrawFromDeckCommand.ts","../src/commands/RevealCommand.ts","../src/commands/SendCardToGY.ts","../src/commands/FieldSpellCommand.ts","../src/commands/FlipCommand.ts","../src/commands/FusionSummonCommand.ts","../src/commands/LinkSummonCommand.ts","../src/commands/MillFromDeckCommand.ts","../src/commands/NormalSummonCommand.ts","../src/commands/SetCardCommand.ts","../src/commands/SetMonsterCommand.ts","../src/commands/ShuffleDeck.ts","../src/commands/SpecialSummonCommand.ts","../src/commands/StartHandCommand.ts","../src/commands/SynchroSummonCommand.ts","../src/commands/TargetCommand.ts","../src/commands/ToDeckCommand.ts","../src/commands/ToExtraDeckCommand.ts","../src/commands/ToHandCommand.ts","../src/commands/ToSTCommand.ts","../src/commands/TributeSetCommand.ts","../src/commands/TributeSummonCommand.ts","../src/commands/XYZAttachMaterialCommand.ts","../src/commands/XYZDetachMaterialCommand.ts","../src/commands/XYZOverlaySummonCommand.ts","../src/commands/XYZSummonCommand.ts","../src/commands/index.ts","../src/commands/JSONCommand.ts","../src/utils/event-bus.ts","../src/game/YGODuelLog.ts","../src/game/YGOGameState.ts","../src/game/YGOReplayUtils.ts","../src/game/YGOCore.ts","../src/index.ts"],"sourcesContent":["import { YGOCore } from \"../game/YGOCore\";\nimport { CommandType, Command } from \"../types/commands\";\n\nexport abstract class BaseCommand implements Command {\n\n    protected YGO!: YGOCore;\n    public type!: CommandType;\n    public baseType!: string;\n    public timestamp!: number;\n    public commandId: number = -1;\n    public parent: Command | null = null;\n\n    constructor() { }\n\n    init(ygo: YGOCore) {\n        this.YGO = ygo;\n        this.commandId = this.YGO.getNextCommandId();\n        this.timestamp = this.YGO.getCurrentTime();\n    }\n\n    getCommandId() {\n        return this.parent?.commandId || this.commandId;\n    }\n\n    execChildCommand(command: Command): Command | undefined {\n        command.parent = this.parent ? this.parent : this;\n        command.init(this.YGO);\n        command.exec();\n        return command;\n    }\n\n    undoChildCommand(command: Command | undefined): Command | undefined {\n        command?.undo();\n        return command;\n    }\n\n    undoMultipleChildCommand(commands: Command[]): void {\n        for (let i = commands.length - 1; i >= 0; --i) {\n            commands[i]?.undo();\n        }\n    }\n\n    execMultipleChildCommand(commands: Command[]): void {\n        for (const command of commands) {\n            this.execChildCommand(command);\n        }\n    }\n\n    isValid(): boolean {\n        return true;\n    }\n\n    exec(): void {\n\n    }\n\n    undo(): void {\n\n    }\n\n    toJSON<T extends any = any>(): { type: string, data: T } {\n        const self = this as any;\n        const data = self.data || {};\n\n        return {\n            type: this.baseType,\n            data,\n        };\n    }\n}","import { CardPosition, FieldZone } from \"./types\";\n\nexport namespace YGODuelEvents {\n    export enum LogType {\n        NormalSummon = \"Normal Summon\",\n        SetMonster = \"Set Monster\",\n        SendToGY = \"Send To GY\",\n        Banish = \"Banish\",\n        BanishFD = \"Banish FD\",\n        StartHand = \"Start Hand\",\n        DrawCardFromDeck = \"Draw From Deck\",\n        MillCardFromDeck = \"Mill From Deck\",\n        TributeSummon = \"Tribute Summon\",\n        TributeSet = \"Tribute Set\",\n        ToHand = \"To Hand\",\n        ToExtraDeck = \"To Extra Deck\",\n        ToTopDeck = \"To Top Deck\",\n        ToBottomDeck = \"To Bottom Deck\",\n        Destroy = \"Destroy\",\n        SpecialSummon = \"Special Summon\",\n        SynchroSummon = \"Synchro Summon\",\n        LinkSummon = \"Link Summon\",\n        FusionSummon = \"Fusion Summon\",\n        XYZSummon = \"XYZ Summon\",\n        XYZOverlaySummon = \"XYZ Overlay Summon\",\n        XYZAttachMaterial = \"XYZ Attach Material\",\n        XYZDetachMaterial = \"XYZ Detach Material\",\n        XYZOverlay = \"XYZOverlay\",\n        SetST = \"Set ST\",\n        Activate = \"Activate\",\n        MoveCard = \"Move Card\",\n        Shuffle = \"Shuffle\",\n        ToST = \"To ST\",\n        Reveal = \"Reveal\",\n        Target = \"Target\",\n        FieldSpell = \"Field Spell\",\n        ChangeCardPosition = \"Change Card Position\",\n        ChangeCardAtkDef = \"Change Card Atk Def\",\n        Flip = \"Flip\"\n    }\n\n    export interface DuelLog {\n        type: LogType;\n        player: number;\n        commandId: number;\n    }\n\n    export interface NormalSummon extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface MoveCard extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface ToHand extends MoveCard { }\n\n    export interface SetMonster extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone?: FieldZone;\n    }\n\n    export interface SetST extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone?: FieldZone;\n    }\n\n    export interface SendToGY extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone,\n        reason?: \"Fusion Summon\" | \"Synchro Summon\" | \"Link Summon\" | \"XYZ Material\" | undefined\n    }\n\n    export interface DrawFromDeck extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n    }\n\n    export interface StartHand extends DuelLog {\n        cards: { id: number, zone: FieldZone }[],\n        core: boolean\n    }\n\n    export interface FusionSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n            owner: number\n        }>\n    }\n\n    export interface SynchroSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface LinkSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        materials: Array<{\n            id: number\n            zone: FieldZone\n            owner: number\n        }>\n    }\n\n    export interface XYZSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZOverlaySummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZAttach extends DuelLog {\n        id: number\n        materialId: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZOverlay extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZDetach extends DuelLog {\n        id: number\n        overlayZone: FieldZone\n        owner: number\n        materialId: number\n        materialIndex: number\n    }\n\n    export interface Activate extends DuelLog {\n        id: number\n        originZone?: FieldZone\n        zone: FieldZone\n        previousPosition: CardPosition\n        position: CardPosition\n    }\n\n    export interface Target extends DuelLog {\n        id: number\n        originZone: FieldZone\n    }\n\n    export interface Banish extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface Shuffle extends DuelLog { }\n\n    export interface Reveal extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n    }\n\n    export interface ChangeCardPosition extends DuelLog {\n        id: number\n        originZone: FieldZone\n        previousPosition: CardPosition\n        position: CardPosition\n    }\n\n    export interface ChangeCardAtkDef extends DuelLog {\n        id: number;\n        zone: FieldZone;\n        atk: number | null\n        def: number | null\n    }\n\n    export interface Flip extends DuelLog {\n        id: number\n        originZone: FieldZone\n        previousPosition: CardPosition\n        position: CardPosition\n    }\n\n    export interface ToExtraDeck extends DuelLog {\n        id: number,\n        originZone: FieldZone\n    }\n\n    export interface MillCardFromDeck extends DuelLog {\n        // TODO\n    }\n\n    export interface Destroy extends MoveCard {\n\n    }\n\n}\n\n","import { BaseCommand } from \"../commands/BaseCommand\";\nimport { Command } from \"./commands\";\nimport { YGODuelEvents } from \"./duel-events\";\n\nexport const NUM_ZONES: number = 5; // Number of primary zones (Monster, Spell/Trap, etc.)\nexport type PlayerSide = 0 | 1 | number; // 0 represents Player 1, 1 represents Player 2\n\nexport type CardPosition = \"faceup-attack\" | \"faceup-defense\" | \"faceup\" | \"facedown\";\n\nexport type FieldZone = `M-${1 | 2 | 3 | 4 | 5}`\n    | `M2-${1 | 2 | 3 | 4 | 5}`\n    | `S-${1 | 2 | 3 | 4 | 5}`\n    | `S2-${1 | 2 | 3 | 4 | 5}`\n    | `EMZ`\n    | `EMZ2`\n    | `EMZ-${1 | 2}`\n    | `EMZ2-${1 | 2}`\n    | `ORU-${1 | 2 | 3 | 4 | 5}` // Overlay Units ORU Xyz Materials\n    | `ORU2-${1 | 2 | 3 | 4 | 5}`\n    | `ORUEMZ-${1 | 2}` // Xyz Materials in extra monster zone :)\n    | `ORUEMZ2-${1 | 2}`\n    | \"H\"\n    | \"H2\"\n    | `H-${number}`\n    | `H2-${number}`\n    | \"F\"\n    | \"F2\"\n    | \"GY\"\n    | \"GY2\"\n    | `GY-${number}`\n    | `GY2-${number}`\n    | \"B\"\n    | \"B2\"\n    | `B-${number}`\n    | `B2-${number}`\n    | \"D\"\n    | \"D2\"\n    | `D-${number}`\n    | `D2-${number}`\n    | \"ED\"\n    | \"ED2\"\n    | `ED-${number}`\n    | `ED2-${number}`;\n\nexport type FieldZoneId = \"M\" | \"S\" | \"EMZ\" | \"GY\" | \"D\" | \"ED\" | \"B\" | \"F\" | \"ORU\" | \"ORUEMZ\" | \"H\";\n\nexport type FieldZoneData = { zone: FieldZoneId, player: number, zoneIndex: number }\n\nexport enum CardBaseType {\n    NormalMonster,\n    EffectMonster,\n    RitualMonster,\n    Spell,\n    Trap,\n    FusionMonster,\n    SynchroMonster,\n    XYZMonster,\n    LinkMonster,\n}\n\nexport interface YGOPropsOptions {\n    lp?: number // default `8000`\n    draw?: number // default `5`\n    shuffleDecks?: boolean // default value is `true`,\n    fieldState?: FileldStateEntry[] // default,\n    startCommand?: number\n    execCommands?: boolean\n    currentGameTime?: number\n}\n\nexport interface YGOPropsPlayer {\n    name: string,\n    mainDeck: CardData[], // Card Data is the same as https://ygoprodeck.com/api-guide\n    extraDeck: CardData[] // Card Data is the same as https://ygoprodeck.com/api-guide\n}\n\nexport interface YGOProps {\n    players: YGOPropsPlayer[],\n    commands?: { type: string, data: any }[]\n    options?: YGOPropsOptions\n}\n\nexport interface FileldStateEntry {\n    id: number,\n    zone: FieldZone\n    atk?: number\n    def?: number\n    owner?: number\n    position?: CardPosition\n    materials?: Array<{ id: number, owner?: number }>\n}\n\nexport interface CardData {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    attribute: string\n    card_images: any\n}\n\nexport interface Card {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    linkval: number\n    attribute: string\n    card_images: any\n    // game_data\n    index: number // internal unique ID\n    owner: number\n    isMainDeckCard: boolean\n    originalOwner: number\n    position: CardPosition\n    currentAtk: number\n    currentDef: number\n    materials: Card[]\n}\n\nexport interface PlayerInfo {\n    name: string;\n}\n\nexport interface PlayerField {\n    lp: number,\n    player: PlayerInfo\n    mainDeck: Card[]\n    extraDeck: Card[]\n    hand: Card[]\n    data: {\n        mainDeckOrdered: number[];\n        extraDeckOrdered: number[];\n    }\n    graveyard: Card[]\n    banishedZone: Card[]\n    // Zones on the field where cards are actively played\n    monsterZone: Array<Card | null>\n    spellTrapZone: Array<Card | null>\n    fieldZone: Card | null;\n    extraMonsterZone: Array<Card | null>;\n}\n\nexport interface GameState {\n    players: PlayerInfo[];\n    fields: PlayerField[];\n}\n\nexport interface YGOReplayData {\n    players: {\n        name: string\n        mainDeck: number[]\n        extraDeck: number[]\n    }[]\n    initialField: FileldStateEntry[]\n    endField: FileldStateEntry[]\n    commands: any[]\n}\n\nexport type YGOCoreEvents = {\n    \"command-created\": (args: { command: Command }) => void\n    \"command-executed\": (args: { command: Command }) => void\n    \"command-redo\": (args: { command: Command }) => void\n    \"command-undo\": (args: { command: Command }) => void\n    'new-log': (log: YGODuelEvents.DuelLog) => void\n    'update-logs': (logs: YGODuelEvents.DuelLog[]) => void\n    'set-player': (args: { player: number }) => void\n    'set-duel-phase': (args: { phase: YGOPhase }) => void\n}\n\nexport enum YGOPhase {\n    DrawPhase = \"Draw Phase\",\n    StandbyPhase = \"Standby Phase\",\n    MainPhase1 = \"Main Phase 1\",\n    BattlePhase = \"Battle Phase\",\n    MainPhase2 = \"Main Phase 2\",\n    EndPhase = \"End Phase\",\n}","import { Card, CardBaseType, FieldZone, FieldZoneId, FieldZoneData, PlayerField } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\n\n// Only functions for game utils\nexport class YGOGameUtils {\n\n    static isLinkMonster(card: Card): boolean {\n        return card.typeline?.includes(\"Link\");\n    }\n\n    static isMonster(card: Card): boolean {\n        return card.type?.includes(\"Monster\");\n    }\n\n    static isXYZMonster(card: Card) {\n        return card.typeline?.includes(\"Xyz\");\n    }\n\n    static isSynchroMonster(card: Card) {\n        return card.typeline?.includes(\"Synchro\");\n    }\n\n    static isFusionMonster(card: Card) {\n        return card.typeline?.includes(\"Fusion\");\n    }\n\n    static isPendulumCard(card: Card) {\n        return card.frameType?.includes(\"pendulum\");\n    }\n\n    static isFaceUp(card: Card): boolean {\n        return card.position.includes(\"faceup\");\n    }\n\n    static isFaceDown(card: Card): boolean {\n        return !this.isFaceUp(card);\n    }\n\n    static isSpellTrap(card: Card) {\n        return this.isSpell(card) || this.isTrap(card);\n    }\n\n    static isSpell(card: Card) {\n        return card.frameType.startsWith(\"spell\");\n    }\n\n    static isTrap(card: Card) {\n        return card.frameType.startsWith(\"trap\");\n    }\n\n    static isFieldSpell(card: Card) {\n        return card.race === \"Field\";\n    }\n\n    static isDefense(card: Card) {\n        return card.position === \"facedown\" || card.position === \"faceup-defense\";\n    }\n\n    static isAttack(card: Card) {\n        return card.position === \"faceup-attack\" || card.position === \"faceup\";\n    }\n\n    static hasLinkMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false);\n    }\n\n    static hasXyzMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isXYZMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isXYZMonster(card) : false);\n    }\n\n    static XyzMonstersInFieldCounter(field: PlayerField) {\n        let counter = 0;\n\n        field.monsterZone.forEach(card => {\n            if (card && YGOGameUtils.isXYZMonster(card)) {\n                counter++;\n            }\n        });\n\n        field.extraMonsterZone.forEach(card => {\n            if (card && YGOGameUtils.isXYZMonster(card)) {\n                counter++;\n            }\n        });\n\n        return counter;\n    }\n\n    static XyzMonstersInFieldsCounter(duel: YGOCore) {\n        let counter = 0;\n\n        duel.state.fields.forEach(field => {\n            field.monsterZone.forEach(card => {\n                if (card && YGOGameUtils.isXYZMonster(card)) {\n                    counter++;\n                }\n            });\n\n            field.extraMonsterZone.forEach(card => {\n                if (card && YGOGameUtils.isXYZMonster(card)) {\n                    counter++;\n                }\n            });\n        })\n\n        return counter;\n    }\n\n    static getPlayerIndexFromZone(zone: string): number {\n        const isPlayer2 = zone.includes(\"2-\");\n\n        if (isPlayer2) return 1;\n\n        switch (zone) {\n            case \"M2\":\n            case \"H2\":\n            case \"F2\":\n            case \"GY2\":\n            case \"EMZ2-1\":\n            case \"EMZ2-2\":\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    static createZone(zone: FieldZoneId, player: number, position?: number): FieldZone {\n\n        if (position === undefined || position === -1) {\n            return `${zone}${player === 0 ? '' : '2'}` as FieldZone;\n        }\n\n        return `${zone}${player === 0 ? '' : '2'}-${position}` as FieldZone;\n    }\n\n    static createOverlayZone(zone: string, player: number, zoneIndex: number): FieldZone {\n\n        if (zone === \"EMZ\") {\n            return `ORU${player === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n        }\n\n        return `ORUEMZ${player === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n    }\n\n    static getZoneData(zone: FieldZone): FieldZoneData {\n        const args = zone.split(\"-\");\n        let playerIndex = 0;\n        let zoneId = args[0];\n        const zoneIndex = args.length > 1 ? Number(args[1]) : -1;\n\n        if (args[0].endsWith(\"2\")) {\n            playerIndex = 1;\n            zoneId = zoneId.substring(0, zoneId.length - 1);\n        }\n\n        return {\n            zone: zoneId as FieldZoneId,\n            player: playerIndex,\n            zoneIndex: zoneIndex,\n        }\n    }\n\n    static getCardBaseType(card: Card): CardBaseType {\n        if (card.frameType.startsWith(\"effect\")) return CardBaseType.EffectMonster;\n        if (card.frameType.startsWith(\"spell\")) return CardBaseType.Spell;\n        if (card.frameType.startsWith(\"ritual\")) return CardBaseType.RitualMonster;\n        if (card.frameType.startsWith(\"trap\")) return CardBaseType.Trap;\n        if (card.frameType.includes(\"fusion\")) return CardBaseType.FusionMonster;\n        if (card.frameType.includes(\"synchro\")) return CardBaseType.SynchroMonster;\n        if (card.frameType.includes(\"xyz\")) return CardBaseType.XYZMonster;\n        if (card.frameType.includes(\"link\")) return CardBaseType.LinkMonster;\n        return CardBaseType.NormalMonster;\n    }\n\n    static getCardsBaseType(cards: Card[]): CardBaseType[] {\n        const result = cards.map(c => YGOGameUtils.getCardBaseType(c));\n        return result;\n    }\n\n    static toSortedCards(cards: Card[]) {\n        return this.sortCards([...cards]);\n    }\n\n    static sortCards(cardsToSort: Card[]) {\n        const cards = cardsToSort;\n        const cardsWeights = YGOGameUtils.getCardsBaseType(cards);\n\n        for (let i = 0; i < cards.length - 1; ++i) {\n            for (let j = 0; j < cards.length - i - 1; ++j) {\n                if (cardsWeights[j] > cardsWeights[j + 1] || (cardsWeights[j] === cardsWeights[j + 1] && cards[j].name > cards[j + 1].name)) {\n                    [cards[j], cards[j + 1]] = [cards[j + 1], cards[j]];\n                    [cardsWeights[j], cardsWeights[j + 1]] = [cardsWeights[j + 1], cardsWeights[j]];\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static shuffleCards(cards: Card[]): Array<number> {\n        const positions = Array<number>(cards.length);\n        for (let i = 0; i < cards.length; ++i) {\n            const index = Math.floor(Math.random() * cards.length);\n\n            positions[i] = index;\n\n            const temp = cards[i];\n            cards[i] = cards[index];\n            cards[index] = temp;\n        }\n        return positions;\n    }\n\n    static invertPlayerInZone(zone: FieldZone): FieldZone {\n        const zoneData = this.getZoneData(zone);\n        return this.createZone(zoneData.zone, 1 - zoneData.player, zoneData.zoneIndex);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ActivateCardCommandData } from '../types/commands';\nimport { Card, CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ActivateCardCommand extends BaseCommand {\n    public baseType: string = \"ActivateCardCommand\";\n    private data: ActivateCardCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ActivateCardCommandData) {\n        super();\n        this.type = \"Activate\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone || this.data.zone)!;\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.originZone);\n            this.YGO.state.setCard(card, this.data.zone);\n\n            console.log(`Exec: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Exec: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        this.prevPosition = card.position;\n\n        if (YGOGameUtils.isFaceDown(card)) {\n            if (YGOGameUtils.isSpellTrap(card)) {\n                card.position = 'faceup';\n            } else {\n                card.position = 'faceup-attack';\n            }\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Activate>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            previousPosition: this.prevPosition,\n            position: card.position\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.zone);\n            this.YGO.state.setCard(card, this.data.originZone);\n\n            console.log(`Undo: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Undo: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { COMMANDS_BY_NAME } from \"../commands\";\nimport { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps, YGOPropsPlayer } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\n// Only internal functions for game utils\nexport class YGOUtils {\n    static getPlayerIndexFromZone(zone: string): number {\n        return YGOGameUtils.getPlayerIndexFromZone(zone);\n    }\n\n    static parseMainDeck({ mainDeck, player }: { mainDeck: Card[], player: number }): Card[] {\n        return mainDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: true }));\n    }\n\n    static parseExtraDeck({ extraDeck, player }: { extraDeck: Card[], player: number }): Card[] {\n        const extra = extraDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: false }));\n        YGOGameUtils.sortCards(extra);\n        return extra;\n    }\n\n    static parseCard({ card, player, isMainDeckCard }: { card: Card, player: number, isMainDeckCard: boolean }): Card {\n        if (!card) throw new Error(\"card is required to be parsed\");\n        card.owner = player;\n        card.originalOwner = player;\n        card.materials = [];\n        card.isMainDeckCard = isMainDeckCard;\n        card.position = \"facedown\";\n        return card;\n    }\n\n    static getCardsInGame(fields: PlayerField[]): Map<number, Card> {\n        const cards = new Map<number, Card>()\n\n        for (const field of fields) {\n\n            for (const card of field.mainDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.extraDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.monsterZone) {\n                if (card && !cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.spellTrapZone) {\n                if (card && !cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.extraMonsterZone) {\n                if (card && !cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.graveyard) {\n                if (card && !cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.banishedZone) {\n                if (card && !cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static getOverlayZone(zone: FieldZone): FieldZone {\n        const playerIndex = YGOUtils.getPlayerIndexFromZone(zone);\n        const zoneIndex = zone.split(\"-\")[1];\n\n        if (zone.startsWith(\"EMZ\")) {\n            return `ORUEMZ${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n        }\n\n        return `ORU${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n    }\n\n    static initializePlayersFields(props: YGOProps): [PlayerField, PlayerField] {\n        const { shuffleDecks = true } = props.options || {};\n        let cardIndex = 0;\n\n        const field1: PlayerField = {\n            lp: 8000,\n            player: { name: \"test\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            data: {\n                mainDeckOrdered: [],\n                extraDeckOrdered: []\n            },\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        };\n\n        const field2: PlayerField = {\n            lp: 8000,\n            player: { name: \"test2\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            data: {\n                mainDeckOrdered: [],\n                extraDeckOrdered: []\n            },\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        }\n\n        const fields: [PlayerField, PlayerField] = [field1, field2];\n\n        for (let playerIndex = 0; playerIndex < props.players.length; ++playerIndex) {\n            const player = props.players[playerIndex];\n            const field = fields[playerIndex];\n            field.mainDeck = YGOUtils.parseMainDeck({ mainDeck: player.mainDeck as Card[], player: playerIndex });\n            field.extraDeck = YGOUtils.parseExtraDeck({ extraDeck: player.extraDeck as Card[], player: playerIndex });\n            field.mainDeck.forEach(card => card.index = ++cardIndex);\n            field.extraDeck.forEach(card => card.index = ++cardIndex);\n        }\n\n        if (shuffleDecks) {\n            fields.forEach((field, playerIndex) => {\n                if (props.players[playerIndex]) {\n                    YGOGameUtils.shuffleCards(field.mainDeck);\n                }\n            });\n        }\n\n        fields.forEach((field) => {\n            field.data.mainDeckOrdered = field.mainDeck.map(card => card.id);\n            field.data.extraDeckOrdered = field.extraDeck.map(card => card.id);\n        });\n\n        this.recoverFields(fields, props.options?.fieldState);\n\n        return fields;\n    }\n\n    private static recoverFields(fields: PlayerField[], fieldState: FileldStateEntry[] | undefined) {\n        if (Array.isArray(fieldState)) {\n            const cardsToRemoveFromDeck = [new Set(), new Set()];\n            const cardsToRemoveFromExtraDeck = [new Set(), new Set()];\n\n            const getCard = (player: number, id: number): Card => {\n\n                const card = fields[player].mainDeck.find(c => c.id === id && !cardsToRemoveFromDeck[player].has(c));\n\n                if (card) {\n                    cardsToRemoveFromDeck[player].add(card);\n                    return card;\n                }\n\n                const edCard = fields[player].extraDeck.find(c => c.id === id && !cardsToRemoveFromExtraDeck[player].has(c));\n\n                if (edCard) {\n                    cardsToRemoveFromExtraDeck[player].add(edCard);\n                    return edCard;\n                }\n\n                throw new Error(`Card \"${id}\" not found in player \"${player}\" deck`);\n            }\n\n            for (let i = 0; i < 2; ++i) {\n                const hand: Array<{ card: Card, index: number }> = [];\n                const graveyard: Array<{ card: Card, index: number }> = [];\n                const banished: Array<{ card: Card, index: number }> = [];\n\n                for (const cardInitialState of fieldState) {\n                    const zoneData = YGOGameUtils.getZoneData(cardInitialState.zone);\n\n                    if (zoneData.player !== i) continue;\n\n                    if (zoneData.zone === \"H\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        hand.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"M\") {\n                        const { position = \"faceup-attack\" } = cardInitialState;\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].monsterZone[zoneData.zoneIndex - 1] = card;\n\n                        if (YGOUtils.isNumeric(cardInitialState.atk)) card.currentAtk = Number(cardInitialState.atk);\n                        if (YGOUtils.isNumeric(cardInitialState.def)) card.currentDef = Number(cardInitialState.def);\n                        if (position) card.position = position;\n                        if (cardInitialState.materials) card.materials = cardInitialState.materials.map(({ id }) => getCard(zoneData.player, id)); // todo check owner\n                    } else if (zoneData.zone === \"EMZ\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].extraMonsterZone[zoneData.zoneIndex - 1] = card;\n\n                        if (YGOUtils.isNumeric(cardInitialState.atk)) card.currentAtk = Number(cardInitialState.atk);\n                        if (YGOUtils.isNumeric(cardInitialState.def)) card.currentDef = Number(cardInitialState.def);\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                        if (cardInitialState.materials) card.materials = cardInitialState.materials.map(({ id }) => getCard(zoneData.player, id)); // todo check owner\n                    }\n                    else if (zoneData.zone === \"S\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].spellTrapZone[zoneData.zoneIndex - 1] = card;\n\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                    } else if (zoneData.zone === \"F\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].fieldZone = card;\n\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                    } else if (zoneData.zone === \"GY\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        graveyard.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"B\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        banished.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"ED\") { // pendulumns\n                        // TODO\n                    }\n                };\n\n                if (hand.length > 0) {\n                    fields[i].hand = [...hand].sort((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n\n                if (graveyard.length > 0) {\n                    fields[i].graveyard = [...graveyard].sort((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n\n                if (banished.length > 0) {\n                    fields[i].hand = [...banished].sort((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n            }\n\n            for (let i = 0; i < fields.length; ++i) {\n                fields[i].mainDeck = fields[i].mainDeck.filter(c => !cardsToRemoveFromDeck[i].has(c))\n                fields[i].extraDeck = fields[i].extraDeck.filter(c => !cardsToRemoveFromDeck[i].has(c))\n            }\n        }\n    }\n\n    static isNumeric(val: any): boolean {\n        return !isNaN(Number(val));\n    }\n\n    static getFieldsAsString(ygo: YGOCore) {\n        const log: string[] = [];\n\n        log.push(\"---- FIELD STATE ----\");\n\n        const field1 = ygo.getField(0);\n        const field2 = ygo.getField(1);\n\n        log.push(\"Player2: \" + field1.player.name);\n        log.push(\"Hand: \" + field2.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field2.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Monster Zone: \" + field2.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"-------\");\n        log.push(\"Extra Monster Zone: \" + ((field1.extraMonsterZone[0] || field2.extraMonsterZone[0])?.name || \"_\") + \" | \" + ((field1.extraMonsterZone[1] || field2.extraMonsterZone[1])?.name || \"_\"));\n        log.push(\"-------\");\n        log.push(\"Monster Zone: \" + field1.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field1.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Hand: \" + field1.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Player1: \" + field1.player.name);\n\n        return log.join(\"\\n\");\n    }\n\n    static getYGOCoreStateProps(ygo: YGOCore): YGOProps {\n\n        const players: YGOPropsPlayer[] = ygo.state.fields.map((field) => {\n            return {\n                name: field.player.name,\n                mainDeck: field.data.mainDeckOrdered.map(id => ygo.state.getCardData(id) as any),\n                extraDeck: field.data.extraDeckOrdered.map(id => ygo.state.getCardData(id) as any),\n            }\n        });\n\n        return {\n            players,\n            commands: ygo.commands.map(cmd => cmd.toJSON()),\n            options: {\n                startCommand: ygo.commandIndex,\n                ...ygo.props.options || {},\n                shuffleDecks: false,\n                execCommands: true\n            }\n        }\n    }\n\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZMoveMaterialsCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { Card, FieldZone, FieldZoneId } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class XYZMoveMaterialsCommand extends BaseCommand {\n    public baseType: string = \"XYZMoveMaterialsCommand\";\n    private data: XYZMoveMaterialsCommandData;\n    private commands: Command[];\n    private materialsToMove: { card: Card, zone: FieldZone }[];\n\n    constructor(data: XYZMoveMaterialsCommandData) {\n        super();\n        this.type = \"XYZ Move Material\";\n        this.data = data;\n        this.commands = [];\n        this.materialsToMove = [];\n        console.log(\"EXEC MATERIALS\");\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        // XYZ send materials to GY if send card to Gy or banish\n        if (this.shouldMoveMaterials(card, this.data.originZone)) {\n            const overlayZone = YGOUtils.getOverlayZone(this.data.originZone);\n            this.materialsToMove = [];\n            card.materials.forEach(material => {\n                const zone = YGOGameUtils.createZone(this.data.zone!, material.originalOwner);\n                this.YGO.state.setCard(material, zone);\n                this.materialsToMove.push({ card: material, zone });\n                console.log(\" ...................... \");\n                console.log(\"MOVE\", material.name, material.originalOwner, \" >> ZONE:\", zone);\n                if (this.data.zone === \"GY\") {\n                    this.YGO.duelLog.dispatch<YGODuelEvents.SendToGY>({\n                        player: this.data.player,\n                        commandId: this.getCommandId(),\n                        type: YGODuelEvents.LogType.SendToGY,\n                        id: material.id,\n                        originZone: overlayZone,\n                        zone,\n                        reason: \"XYZ Material\"\n                    });\n                }\n            });\n            console.log(\"MATERIALST OT MOVE\", this.materialsToMove)\n            card.materials = [];\n        }\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.materialsToMove.length > 0) {\n            this.materialsToMove.forEach(({ zone }) => {\n                this.YGO.state.setCard(null, zone);\n            });\n        }\n\n        card.materials = this.materialsToMove.map(({ card }) => card);\n    }\n\n    private shouldMoveMaterials(card: Card, zone: FieldZone): boolean {\n        if (!card.materials || card.materials.length === 0) return false;\n        return true;\n    }\n}\n\ninterface XYZMaterialsMoveData {\n    player: number,\n    id: number\n    overlayZone: FieldZone\n    zone: FieldZone\n}\n\nclass XYZMaterialsMove extends BaseCommand {\n    private data: XYZMaterialsMoveData;\n    private card!: Card;\n\n    constructor(data: XYZMaterialsMoveData) {\n        super();\n        this.data = data;\n    }\n\n    exec(): void {\n        this.card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        this.YGO.state.setCard(null, this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlay>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlay,\n            id: this.data.id,\n            originZone: this.data.zone,\n            overlayZone: this.data.overlayZone\n        });\n    }\n\n    undo(): void {\n        this.YGO.state.setCard(this.card, this.data.zone);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, MoveCardCommandData } from '../types/commands';\nimport { Card, CardPosition, FieldZoneData } from '../types/types';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { XYZMoveMaterialsCommand } from './XYZMoveMaterials';\n\nexport class MoveCardCommand extends BaseCommand {\n    public baseType: string = \"MoveCardCommand\";\n    public data: MoveCardCommandData;\n    private prevPosition!: CardPosition;\n    private commands: Command[];\n\n    constructor(data: MoveCardCommandData) {\n        super();\n        const type = data.type || \"Move Card\";\n        this.type = type;\n        this.data = data;\n        this.commands = [];\n        this.data.type = type;\n    }\n\n    override exec(): void {\n        console.log(`Exec: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n        const { log = true } = this.data;\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        const zoneData = YGOGameUtils.getZoneData(this.data.zone);\n        const field = this.YGO.getField(zoneData.player);\n\n        this.commands = [];\n\n        if (this.data.zone === \"ED\" || this.data.zone === \"ED2\") {\n            this.prevPosition = card.position;\n            this.data.position = YGOGameUtils.isPendulumCard(card) ? \"faceup\" : \"facedown\";\n        }\n\n        if (this.data.position) {\n            this.prevPosition = card.position;\n            card.position = this.data.position;\n        }\n\n        if (this.shouldMoveMaterials(card, zoneData)) {\n            this.commands.push(new XYZMoveMaterialsCommand({\n                player: this.data.player,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: \"GY\"\n            }));\n        }\n\n        if (this.commands.length > 0) {\n            this.execMultipleChildCommand(this.commands);\n        }\n\n        // TODO IF PENDULUMN send cards to Extra Deck\n        this.YGO.state.moveCard(card, this.data.originZone, this.data.zone);\n\n        if (zoneData.zone === \"ED\") { // if sent to ED say the cardIndex\n            const extraDeckIndex = field.extraDeck.findIndex(c => c === card);\n            if (extraDeckIndex !== -1) {\n                this.data.zone = YGOGameUtils.createZone(zoneData.zone, zoneData.player, extraDeckIndex + 1);\n            }\n        }\n\n        if (log) {\n            this.YGO.duelLog.dispatch<any>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: this.type as any,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.data.zone,\n                reason: this.data.reason,\n                position: card.position\n            });\n        }\n    }\n\n    override undo(): void {\n        console.log(`Undo: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n\n        this.YGO.state.moveCard(card, this.data.zone, this.data.originZone);\n\n        if (this.commands.length > 0) {\n            this.undoMultipleChildCommand(this.commands);\n            this.commands = [];\n        }\n    }\n\n    private shouldMoveMaterials(card: Card, zoneData: FieldZoneData): boolean {\n        if (!card.materials || card.materials.length === 0) return false;\n        if (zoneData.zone === \"GY\") return true;\n        if (zoneData.zone === \"B\") return true;\n        return false;\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { BanishCommandData, Command } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class BanishCommand extends BaseCommand {\n    public baseType: string = \"BanishCommand\";\n    private data: BanishCommandData;\n    private zone!: FieldZone;\n    private banishCommand!: Command;\n\n    constructor(data: BanishCommandData) {\n        super();\n        this.data = data;\n        this.data.position = this.data.position || \"faceup\"\n        this.type = this.data.position === \"faceup\" ? \"Banish\" : \"Banish FD\";\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.zone = YGOGameUtils.createZone(\"B\", card.originalOwner, 1);\n\n        this.banishCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.banishCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.banishCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ChangeCardAtkDefCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOUtils } from '../game/YGOUtils';\n\nexport class ChangeCardAtkDefCommand extends BaseCommand {\n    private data: ChangeCardAtkDefCommandData;\n    private prevAtk: number | undefined;\n    private prevDef: number | undefined;\n\n    constructor(data: ChangeCardAtkDefCommandData) {\n        super();\n        this.type = \"Change Card Atk Def\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone)!;\n\n        if (YGOUtils.isNumeric(this.data.atk)) {\n            this.prevAtk = card.currentAtk;\n            card.currentAtk = Number(this.data.atk);\n        }\n\n        if (YGOUtils.isNumeric(this.data.def)) {\n            this.prevDef = card.currentDef;\n            card.currentAtk = Number(this.data.def);\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.ChangeCardAtkDef>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            zone: this.data.zone,\n            atk: YGOUtils.isNumeric(this.data.atk) ? Number(this.data.atk) : null,\n            def: YGOUtils.isNumeric(this.data.def) ? Number(this.data.def) : null,\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.prevAtk) {\n            card.currentAtk = this.prevAtk;\n        }\n\n        if (this.prevDef) {\n            card.currentDef = this.prevDef;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ChangeCardPositionCommandData } from '../types/commands';\nimport { CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class ChangeCardPositionCommand extends BaseCommand {\n    public baseType: string = \"ChangeCardPositionCommand\";\n    private data: ChangeCardPositionCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ChangeCardPositionCommandData) {\n        super();\n        this.type = \"Change Card Position\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone)!;\n\n        this.prevPosition = card.position;\n\n        card.position = this.data.position;\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.ChangeCardPosition>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.ChangeCardPosition,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            previousPosition: this.prevPosition,\n            position: this.data.position,\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, DestroyCardCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DestroyCardCommand extends BaseCommand {\n    public baseType: string = \"DestroyCardCommand\";\n    private data: DestroyCardCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: DestroyCardCommandData) {\n        super();\n\n        this.type = \"Destroy\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { DrawFromDeckCommandData } from '../types/commands';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DrawFromDeckCommand extends BaseCommand {\n    public baseType: string = \"DrawFromDeckCommand\";\n    private data: DrawFromDeckCommandData;\n    private cards: Card[];\n\n    constructor(data: DrawFromDeckCommandData) {\n        super();\n\n        this.type = \"Draw From Deck\";\n        this.data = data;\n        this.data.numberOfCards = this.data.numberOfCards || 1;\n        this.cards = [];\n    }\n\n    exec(): void {\n        console.log(`Exec: Draw ${this.data.numberOfCards} from Deck`);\n\n        this.cards = [];\n\n        const field = this.YGO.state.fields[this.data.player];\n\n        for (let i = 0; i < this.data.numberOfCards!; ++i) {\n            const card = field.mainDeck.pop()!;\n            console.log(\"DRAW\", card.name);\n\n            field.hand.push(card);\n            this.cards.push(card);\n\n            const originZone = YGOGameUtils.createZone(\"D\", this.data.player, field.mainDeck.length - 1);\n            const zone = YGOGameUtils.createZone(\"H\", this.data.player, field.hand.length);\n\n            this.YGO.duelLog.dispatch<YGODuelEvents.DrawFromDeck>({\n                commandId: this.getCommandId(),\n                player: this.data.player,\n                type: YGODuelEvents.LogType.DrawCardFromDeck,\n                id: card.id,\n                originZone,\n                zone,\n            });\n        }\n    }\n\n    undo(): void {\n        console.log(`Undo: Draw ${this.data.numberOfCards} from Deck`);\n\n        const newCards = [...this.cards].reverse();\n        const field = this.YGO.state.fields[this.data.player];\n\n        console.log(\"CARD DRAW UNDO\");\n        console.log(newCards.map(c => c.name));\n        console.log(\"DECK 1>>\", field.mainDeck.length);\n        for (const card of newCards) {\n            const cardInHandIndex = field.hand.findIndex(c => c === card);\n            if (cardInHandIndex !== -1) {\n                field.hand.splice(cardInHandIndex, 1);\n            }\n        }\n        field.mainDeck.push(...newCards);\n\n        console.log(field.hand.map(c => c.name));\n        console.log(\"DECK 2>>\", field.mainDeck.length);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { RevealCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class RevealCommand extends BaseCommand {\n    public baseType: string = \"RevealCommand\";\n    private data: RevealCommandData;\n\n    constructor(data: RevealCommandData) {\n        super();\n        this.type = \"Reveal\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        this.YGO.duelLog.dispatch<YGODuelEvents.Reveal>({\n            type: YGODuelEvents.LogType.Reveal,\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            id: this.data.id,\n            originZone: this.data.originZone\n        })\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SendCardToGYCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class SendCardToGYCommand extends BaseCommand {\n    public baseType: string = \"SendCardToGYCommand\";\n    private data: SendCardToGYCommandData;\n    private zone!: FieldZone;\n    private moveCardCommand!: Command;\n\n    constructor(data: SendCardToGYCommandData) {\n        super();\n\n        this.type = \"Send To GY\";\n        this.data = data;\n    }\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.zone = this.data.zone || YGOGameUtils.createZone(\"GY\", card.originalOwner, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            reason: this.data.reason,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, FieldSpellCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { RevealCommand } from './RevealCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class FieldSpellCommand extends BaseCommand {\n    public baseType: string = \"FieldSpellCommand\";\n    private data: FieldSpellCommandData;\n    private commands: Command[];\n\n    constructor(data: FieldSpellCommandData) {\n        super();\n\n        this.type = \"Field Spell\";\n        this.data = data;\n        this.data.position = data.position === \"facedown\" ? \"facedown\" : \"faceup\";\n        this.commands = [];\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const fieldCard = this.YGO.getField(this.data.player).fieldZone;\n\n        if (fieldCard) {\n            this.commands.splice(0, 1, new SendCardToGYCommand({\n                player: this.data.player,\n                id: fieldCard.id,\n                originZone: YGOGameUtils.createZone(\"F\", this.data.player)\n            }));\n        }\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n\n        if (this.data.reveal) {\n            this.commands.push(new RevealCommand({\n                id: this.data.id,\n                originZone: this.data.zone,\n                player: this.data.player\n            }));\n        }\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { FlipCommandData } from '../types/commands';\nimport { CardPosition } from '../types/types';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class FlipCommand extends BaseCommand {\n    public baseType: string = \"FlipCommand\";\n    private data: FlipCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: FlipCommandData) {\n        super();\n        this.type = \"Flip\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone)!;\n\n        this.prevPosition = card.position;\n\n        if (YGOGameUtils.isFaceDown(card)) {\n            card.position = \"faceup-attack\";\n        } else {\n            card.position = \"faceup-defense\";\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Flip>({\n            type: YGODuelEvents.LogType.Flip,\n            commandId: this.getCommandId(),\n            player: this.data.player,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            previousPosition: this.prevPosition,\n            position: card.position,\n        })\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, FusionSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOCore } from '../game/YGOCore';\nimport { FieldZone } from '../types/types';\n\nexport class FusionSummonCommand extends BaseCommand {\n    public baseType: string = \"FusionSummonCommand\";\n    private data: FusionSummonCommandData;\n    private commands: Command[];\n    private materials: { id: number, zone: FieldZone, owner: number }[] = [];\n\n    constructor(data: FusionSummonCommandData) {\n        super();\n        this.type = \"Fusion Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        this.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Fusion Summon\"\n            }));\n\n            return {\n                id: material.id,\n                zone: material.zone,\n                owner: materialCard.originalOwner,\n            }\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.FusionSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.FusionSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position!,\n            zone: this.data.zone,\n            materials: this.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, LinkSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { CardPosition, FieldZone } from '../types/types';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class LinkSummonCommand extends BaseCommand {\n    public baseType: string = \"LinkSummonCommand\";\n    private data: LinkSummonCommandData;\n    private commands: Command[];\n    private position: CardPosition;\n    private materials: { id: number, zone: FieldZone, owner: number }[] = [];\n\n    constructor(data: LinkSummonCommandData) {\n        super();\n        this.type = \"Link Summon\";\n        this.data = data;\n        this.position = \"faceup-attack\";\n        this.commands = [];\n    }\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        this.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Link Summon\"\n            }));\n\n            return {\n                id: material.id,\n                zone: material.zone,\n                owner: materialCard.originalOwner,\n            }\n        });\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        const zoneData = YGOGameUtils.getZoneData(this.data.zone);\n\n        if (zoneData.zone === \"EMZ\") {\n            this.data.zone = YGOGameUtils.createZone(zoneData.zone, card.originalOwner, zoneData.zoneIndex);\n        }\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.LinkSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.LinkSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            materials: this.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, MillFromDeckCommandData } from '../types/commands';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MillFromDeckCommand extends BaseCommand {\n    public baseType: string = \"MillFromDeckCommand\";\n    private data: MillFromDeckCommandData;\n    private commands: Command[];\n\n    constructor(data: MillFromDeckCommandData) {\n        super();\n\n        this.type = \"Mill From Deck\";\n        const { numberOfCards = 1 } = data;\n        this.data = data;\n        this.data.numberOfCards = Math.max(1, numberOfCards);\n        this.commands = [];\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const field = this.YGO.getField(this.data.player);\n        const numberOfCards = Math.min(this.data.numberOfCards!, field.mainDeck.length);\n\n        for (let i = 0; i < numberOfCards!; ++i) {\n            const cardIndex = field.mainDeck.length - 1 - i;\n            const card = field.mainDeck[cardIndex];\n\n            // TODO LOG THIS SHIT :)\n\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: YGOGameUtils.createZone(\"D\", this.data.player, cardIndex + 1),\n                player: this.data.player\n            }))\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, NormalSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class NormalSummonCommand extends BaseCommand {\n    public baseType: string = \"NormalSummonCommand\";\n    private data: NormalSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: NormalSummonCommandData) {\n        super();\n        this.type = \"Normal Summon\";\n        this.data = data;\n        this.data.position = \"faceup-attack\";\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetCardCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { CardPosition } from '../types/types';\nimport { RevealCommand } from './RevealCommand';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class SetCardCommand extends BaseCommand {\n    public baseType: string = \"SetCardCommand\";\n    private data: SetCardCommandData;\n    private prevPosition: CardPosition | undefined;\n    private isMonster: boolean;\n    private commands: Command[];\n\n    constructor(data: SetCardCommandData) {\n        super();\n        this.type = \"Set ST\";\n        this.isMonster = false;\n        this.data = data;\n        this.commands = [];\n    }\n\n    init(ygo: YGOCore) {\n        super.init(ygo);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.isMonster = YGOGameUtils.isMonster(card);\n        this.type = this.isMonster ? \"Set Monster\" : \"Set ST\";\n\n        this.commands = [];\n\n        if (this.data.zone) {\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.data.zone,\n                position: \"facedown\"\n            }));\n\n            if (this.data.reveal) {\n                this.commands.push(new RevealCommand({\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.zone,\n                }));\n            }\n        }\n    }\n\n    exec(): void {\n        if (this.commands.length > 0) {\n            this.execMultipleChildCommand(this.commands);\n        } else {\n            const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n            this.prevPosition = card.position;\n            card.position = \"facedown\";\n\n            if (this.type === \"Set Monster\") {\n                this.YGO.duelLog.dispatch<YGODuelEvents.SetMonster>({\n                    type: YGODuelEvents.LogType.SetMonster,\n                    commandId: this.getCommandId(),\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.originZone,\n                })\n            } else {\n                this.YGO.duelLog.dispatch<YGODuelEvents.SetMonster>({\n                    type: YGODuelEvents.LogType.SetST,\n                    commandId: this.getCommandId(),\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.originZone,\n                })\n            }\n        }\n    }\n\n    undo(): void {\n        if (this.commands.length > 0) {\n            this.undoMultipleChildCommand(this.commands);\n        }\n\n        if (this.prevPosition) {\n            const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetMonsterCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SetMonsterCommand extends BaseCommand {\n    public baseType: string = \"SetMonsterCommand\";\n    private data: SetMonsterCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SetMonsterCommandData) {\n        super();\n        this.type = \"Set Monster\";\n        this.data = data;\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"facedown\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ShuffleDeckCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ShuffleDeckCommand extends BaseCommand {\n    public baseType: string = \"ShuffleDeckCommand\";\n    private data: ShuffleDeckCommandData;\n    private cardPositions!: Array<number>;\n\n    constructor(data: ShuffleDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = \"Shuffle Deck\";\n    }\n\n    exec(): void {\n        console.log(\"--------------------\\n\\nSHUFFLE DECK \\n\\n------------------------\");\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n\n        if (this.cardPositions) {\n            for (let i = 0; i < this.cardPositions.length; ++i) {\n                const index = this.cardPositions[i];\n                const temp = mainDeck[index];\n                mainDeck[index] = mainDeck[i];\n                mainDeck[i] = temp;\n            }\n        } else {\n            this.cardPositions = YGOGameUtils.shuffleCards(mainDeck);\n        }\n\n        if (this.data.log !== false) {\n            this.YGO.duelLog.dispatch<YGODuelEvents.Shuffle>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: YGODuelEvents.LogType.Shuffle\n            });\n        }\n    }\n\n    undo(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n        for (let i = 0; i < this.cardPositions.length; ++i) {\n            const index = this.cardPositions[i];\n            const temp = mainDeck[index];\n            mainDeck[index] = mainDeck[i];\n            mainDeck[i] = temp;\n        }\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SpecialSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SpecialSummonCommand extends BaseCommand {\n    public baseType: string = \"SpecialSummonCommand\";\n    private data: SpecialSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SpecialSummonCommandData) {\n        super();\n        this.type = \"Special Summon\";\n        this.data = data;\n        this.data.position = this.data.position || 'faceup-attack';\n\n        if (this.data.position !== 'faceup-attack'\n            && this.data.position !== 'faceup-defense') {\n            this.data.position = 'faceup-attack';\n        }\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: \"Special Summon\",\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { StartHandCommandData } from '../types/commands';\nimport { Card, FieldZone } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class StartHandCommand extends BaseCommand {\n    public baseType: string = \"StartHandCommand\";\n    private data: StartHandCommandData;\n    private cards: Card[];\n\n    constructor(data: StartHandCommandData) {\n        super();\n        this.type = \"Start Hand\";\n        this.data = data;\n        this.cards = [];\n        (this as any).core = true;\n    }\n\n    exec(): void {\n        const field = this.YGO.getField(this.data.player);\n\n        if (this.cards.length > 0) {\n            for (let i = 0; i < this.cards.length; ++i) {\n                const card = field.mainDeck.shift();\n                if (card) {\n                    field.hand.push(card);\n                }\n            }\n        } else if (field.hand.length > 0) {\n            this.cards = [...field.hand];\n        } else {\n            this.cards = [];\n            const numCardsToDraw = Math.min(this.data.numberOfCards, field.mainDeck.length);\n\n            for (let i = 0; i < numCardsToDraw; ++i) {\n                const card = field.mainDeck.shift();\n                if (card) {\n                    field.hand.push(card);\n                    this.cards.push(card);\n                }\n            }\n        }\n\n        const cards: { id: number, zone: FieldZone }[] = this.cards.map((card, handIndex) => {\n            return {\n                id: card.id,\n                zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex + 1)\n            };\n        });\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.StartHand>({\n            commandId: this.getCommandId(),\n            player: this.data.player,\n            type: YGODuelEvents.LogType.StartHand,\n            cards,\n            core: true,\n        });\n    }\n\n    undo(): void {\n        const field = this.YGO.state.fields[this.data.player];\n        field.hand = [];\n        field.mainDeck.unshift(...this.cards);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SynchroSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class SynchroSummonCommand extends BaseCommand {\n    public baseType: string = \"SynchroSummonCommand\";\n    private data: SynchroSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: SynchroSummonCommandData) {\n        super();\n        this.type = \"Synchro Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Synchro Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.SynchroSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.SynchroSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position!,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { TargetCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class TargetCommand extends BaseCommand {\n    public baseType: string = \"TargetCommand\";\n    private data: TargetCommandData;\n\n    constructor(data: TargetCommandData) {\n        super();\n        this.type = \"Target\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        this.YGO.duelLog.dispatch<YGODuelEvents.Target>({\n            type: YGODuelEvents.LogType.Target,\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            id: this.data.id,\n            originZone: this.data.originZone\n        });\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToDeckCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { ShuffleDeckCommand } from './ShuffleDeck';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToDeckCommand extends BaseCommand {\n    public baseType: string = \"ToDeckCommand\";\n    private data: ToDeckCommandData;\n    private zone!: FieldZone;\n    private commands!: Command[];\n\n    constructor(data: ToDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = this.getCommandType();\n    }\n\n    private isTopCard() {\n        return this.data.position === \"top\";\n    }\n\n    private getCommandType() {\n        return this.isTopCard() ? \"To Top Deck\" : \"To Bottom Deck\";\n    }\n\n    private getDeckIndex(): number {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n\n        if (this.isTopCard()) {\n            return mainDeck.length + 1;\n        }\n\n        return 1;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        if (!this.commands) {\n            const { player, shuffle = false } = this.data;\n\n            const deckIndex = this.getDeckIndex();\n            this.zone = YGOGameUtils.createZone(\"D\", player, deckIndex);\n            this.commands = [];\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.zone,\n            }));\n\n            if (shuffle) {\n                this.commands.push(new ShuffleDeckCommand({ player: this.data.player }));\n            }\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToExtraDeckCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToExtraDeckCommand extends BaseCommand {\n    public baseType: string = \"ToExtraDeckCommand\";\n    private data: ToExtraDeckCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToExtraDeckCommandData) {\n        super();\n        this.type = \"To Extra Deck\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"ED\", this.data.player)\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToHandCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToHandCommand extends BaseCommand {\n    public baseType: string = \"ToHandCommand\";\n    private data: ToHandCommandData;\n    private command!: Command;\n\n    constructor(data: ToHandCommandData) {\n        super();\n        this.type = \"To Hand\";\n        this.data = data;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const handIndex = this.YGO.getField(this.data.player).hand.length + 1;\n\n        this.command = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex),\n            position: \"facedown\"\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.command);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.command);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToSTCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class ToSTCommand extends BaseCommand {\n    public baseType: string = \"ToSTCommand\";\n    private data: ToSTCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToSTCommandData) {\n        super();\n        this.type = \"To ST\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"faceup\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSetCommand extends BaseCommand {\n    public baseType: string = \"TributeSetCommand\";\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: TributeSummonCommandData) {\n        super();\n\n        this.type = \"Tribute Set\";\n        this.data = data;\n        this.data.position = \"facedown\";\n\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSummonCommand extends BaseCommand {\n    public baseType: string = \"TributeSummonCommand\";\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n    \n    constructor(data: TributeSummonCommandData) {\n        super();\n        this.type = \"Tribute Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }))\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZAttachCommandData as XYZAttachMaterialCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { XYZMoveMaterialsCommand } from './XYZMoveMaterials';\n\nexport class XYZAttachMaterialCommand extends BaseCommand {\n    public baseType: string = \"XYZAttachMaterialCommand\";\n    private data: XYZAttachMaterialCommandData;\n    private materialCardReference!: Card;\n    private moveXYZMaterialsCommand: Command | undefined;\n\n    constructor(data: XYZAttachMaterialCommandData) {\n        super();\n        this.type = \"XYZ Attach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.materialCardReference.materials.length > 0) {\n            this.moveXYZMaterialsCommand = this.execChildCommand(new XYZMoveMaterialsCommand({\n                id: this.materialCardReference.id,\n                originZone: this.data.originZone,\n                player: this.data.player,\n                zone: \"GY\"\n            }))\n        }\n\n        this.YGO.state.setCard(null, this.data.originZone);\n        card.materials.push(this.materialCardReference);\n\n        console.log(\"TCL:: EXEC ATTACH:: \", this.materialCardReference.name, this.data.originZone);\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZAttach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZAttachMaterial,\n            id: this.data.id,\n            materialId: this.materialCardReference.id,\n            originZone: this.data.originZone,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.YGO.state.setCard(this.materialCardReference, this.data.originZone);\n\n        const materialIndex = card.materials.indexOf(this.materialCardReference);\n        if (materialIndex !== -1) {\n            card.materials.splice(materialIndex, 1);\n        }\n\n        if (this.moveXYZMaterialsCommand) this.undoChildCommand(this.moveXYZMaterialsCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { XYZDetachCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class XYZDetachMaterialCommand extends BaseCommand {\n    public baseType: string = \"XYZDetachMaterialCommand\";\n    private data: XYZDetachCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZDetachCommandData) {\n        super();\n        this.type = \"XYZ Detach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone)!;\n        this.materialCardReference = card.materials[this.data.materialIndex];\n        card.materials.splice(this.data.materialIndex, 1);\n\n        this.YGO.state.setCard(this.materialCardReference, YGOGameUtils.createZone(\"GY\", this.materialCardReference.originalOwner));\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.originZone);\n\n        console.log(\" DETACH \", overlayZone, \">>>\", YGOGameUtils.createZone(\"GY\", this.materialCardReference.originalOwner));\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZDetach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: card.id,\n            materialIndex: this.data.materialIndex,\n            materialId: this.materialCardReference.id,\n            owner: this.materialCardReference.originalOwner,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.originZone)!;\n        card.materials.splice(this.data.materialIndex, 0, this.materialCardReference);\n        console.log(\" DETACH UNDO;;\", YGOGameUtils.createZone(\"GY\", this.materialCardReference.originalOwner));\n        this.YGO.state.setCard(null, YGOGameUtils.createZone(\"GY\", this.materialCardReference.originalOwner));\n    }\n\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { Card, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class XYZOverlaySummonCommand extends BaseCommand {\n    public baseType: string = \"XYZOverlaySummonCommand\";\n    private data: XYZSummonCommandData;\n    private commands: Command[];\n    private overlayZone: FieldZone;\n    private previousMaterialsData: { card: Card, materials: Card[] }[] = [];\n    private cardMaterials: Card[] = [];\n\n    constructor(data: XYZSummonCommandData) {\n        super();\n        this.type = \"XYZ Overlay Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n        this.overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n        console.log(\"EXEC MATERIALS\");\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        this.cardMaterials = [];\n        this.previousMaterialsData = [];\n\n        this.data.materials.forEach(material => {\n            const card = this.YGO.state.getCardById(material.id, material.zone);\n            const cardMaterials = [...card.materials];\n\n            card.materials = [];\n            this.cardMaterials.push(card);\n            cardMaterials.forEach(material2 => this.cardMaterials.push(material2));\n            this.previousMaterialsData.push({ card, materials: cardMaterials });\n\n            this.commands.push(new XYZMaterialsMove({\n                player: this.data.player,\n                overlayZone: this.overlayZone,\n                id: material.id,\n                zone: material.zone\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        console.log(\"NEW MATERIALS \", this.cardMaterials);\n        card.materials = this.cardMaterials;\n\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlaySummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlaySummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position!,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        card.materials = [];\n        this.undoMultipleChildCommand(this.commands);\n\n        this.previousMaterialsData.forEach(data => {\n            data.card.materials = data.materials;\n        });\n    }\n}\n\ninterface XYZMaterialsMoveData {\n    player: number,\n    id: number\n    overlayZone: FieldZone\n    zone: FieldZone\n}\n\nclass XYZMaterialsMove extends BaseCommand {\n    private data: XYZMaterialsMoveData;\n    private card!: Card;\n\n    constructor(data: XYZMaterialsMoveData) {\n        super();\n        this.data = data;\n    }\n\n    exec(): void {\n        this.card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        this.YGO.state.setCard(null, this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlay>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlay,\n            id: this.data.id,\n            originZone: this.data.zone,\n            overlayZone: this.data.overlayZone\n        });\n    }\n\n    undo(): void {\n        this.YGO.state.setCard(this.card, this.data.zone);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { Card, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOCore } from '../game/YGOCore';\nimport { XYZMoveMaterialsCommand } from './XYZMoveMaterials';\n\nexport class XYZSummonCommand extends BaseCommand {\n    public baseType: string = \"XYZSummonCommand\";\n    private data: XYZSummonCommandData;\n    private commands: Command[];\n    private overlayZone: FieldZone;\n\n    constructor(data: XYZSummonCommandData) {\n        super();\n        this.type = \"XYZ Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n        this.overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n        console.log(\"EXEC MATERIALS\");\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new XYZMoveMaterialsCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                zone: \"GY\"\n            }));\n        });\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new XYZMaterialsMove({\n                player: this.data.player,\n                overlayZone: this.overlayZone,\n                id: material.id,\n                zone: material.zone\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        card.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n            return materialCard;\n        });\n\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position!,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        card.materials = [];\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n\ninterface XYZMaterialsMoveData {\n    player: number,\n    id: number\n    overlayZone: FieldZone\n    zone: FieldZone\n}\n\nclass XYZMaterialsMove extends BaseCommand {\n    private data: XYZMaterialsMoveData;\n    private card!: Card;\n\n    constructor(data: XYZMaterialsMoveData) {\n        super();\n        this.data = data;\n    }\n\n    exec(): void {\n        this.card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        this.YGO.state.setCard(null, this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlay>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlay,\n            id: this.data.id,\n            originZone: this.data.zone,\n            overlayZone: this.data.overlayZone\n        });\n    }\n\n    undo(): void {\n        this.YGO.state.setCard(this.card, this.data.zone);\n    }\n}\n","import { Command } from \"../types/commands\";\nimport { ActivateCardCommand } from \"./ActivateCardCommand\";\nimport { BanishCommand } from \"./BanishCommand\";\nimport { ChangeCardAtkDefCommand } from \"./ChangeCardAtkDefCommand\";\nimport { ChangeCardPositionCommand } from \"./ChangeCardPositionCommand\";\nimport { DestroyCardCommand } from \"./DestroyCard\";\nimport { DrawFromDeckCommand } from \"./DrawFromDeckCommand\";\nimport { FieldSpellCommand } from \"./FieldSpellCommand\";\nimport { FlipCommand } from \"./FlipCommand\";\nimport { FusionSummonCommand } from \"./FusionSummonCommand\";\nimport { LinkSummonCommand } from \"./LinkSummonCommand\";\nimport { MillFromDeckCommand } from \"./MillFromDeckCommand\";\nimport { MoveCardCommand } from \"./MoveCardCommand\";\nimport { NormalSummonCommand } from \"./NormalSummonCommand\";\nimport { RevealCommand } from \"./RevealCommand\";\nimport { SendCardToGYCommand } from \"./SendCardToGY\";\nimport { SetCardCommand } from \"./SetCardCommand\";\nimport { SetMonsterCommand } from \"./SetMonsterCommand\";\nimport { ShuffleDeckCommand } from \"./ShuffleDeck\";\nimport { SpecialSummonCommand } from \"./SpecialSummonCommand\";\nimport { StartHandCommand } from \"./StartHandCommand\";\nimport { SynchroSummonCommand } from \"./SynchroSummonCommand\";\nimport { TargetCommand } from \"./TargetCommand\";\nimport { ToDeckCommand } from \"./ToDeckCommand\";\nimport { ToExtraDeckCommand } from \"./ToExtraDeckCommand\";\nimport { ToHandCommand } from \"./ToHandCommand\";\nimport { ToSTCommand } from \"./ToSTCommand\";\nimport { TributeSetCommand } from \"./TributeSetCommand\";\nimport { TributeSummonCommand } from \"./TributeSummonCommand\";\nimport { XYZAttachMaterialCommand } from \"./XYZAttachMaterialCommand\";\nimport { XYZDetachMaterialCommand } from \"./XYZDetachMaterialCommand\";\nimport { XYZOverlaySummonCommand } from \"./XYZOverlaySummonCommand\";\nimport { XYZSummonCommand } from \"./XYZSummonCommand\";\n\nexport interface YGOCommandsList {\n    NormalSummonCommand: typeof NormalSummonCommand,\n    SetMonsterCommand: typeof SetMonsterCommand,\n    SetCardCommand: typeof SetCardCommand,\n    SendCardToGYCommand: typeof SendCardToGYCommand,\n    BanishCommand: typeof BanishCommand,\n    DrawFromDeckCommand: typeof DrawFromDeckCommand,\n    MillFromDeckCommand: typeof MillFromDeckCommand,\n    ActivateCardCommand: typeof ActivateCardCommand,\n    SpecialSummonCommand: typeof SpecialSummonCommand,\n    TributeSummonCommand: typeof TributeSummonCommand,\n    TributeSetCommand: typeof TributeSetCommand,\n    LinkSummonCommand: typeof LinkSummonCommand,\n    FusionSummonCommand: typeof FusionSummonCommand,\n    SynchroSummonCommand: typeof SynchroSummonCommand,\n    XYZSummonCommand: typeof XYZSummonCommand,\n    XYZOverlaySummonCommand: typeof XYZOverlaySummonCommand;\n    XYZAttachMaterialCommand: typeof XYZAttachMaterialCommand,\n    XYZDetachMaterialCommand: typeof XYZDetachMaterialCommand,\n    ToDeckCommand: typeof ToDeckCommand,\n    ShuffleDeckCommand: typeof ShuffleDeckCommand,\n    DestroyCardCommand: typeof DestroyCardCommand,\n    RevealCommand: typeof RevealCommand,\n    ToExtraDeckCommand: typeof ToExtraDeckCommand,\n    ToHandCommand: typeof ToHandCommand,\n    FieldSpellCommand: typeof FieldSpellCommand,\n    ChangeCardPositionCommand: typeof ChangeCardPositionCommand,\n    ChangeCardAtkDefCommand: typeof ChangeCardAtkDefCommand,\n    FlipCommand: typeof FlipCommand,\n    ToSTCommand: typeof ToSTCommand,\n    MoveCardCommand: typeof MoveCardCommand,\n    TargetCommand: typeof TargetCommand;\n}\n\nexport const Commands: YGOCommandsList = {\n    NormalSummonCommand,\n    SetMonsterCommand,\n    SetCardCommand,\n    SendCardToGYCommand,\n    BanishCommand,\n    DrawFromDeckCommand,\n    MillFromDeckCommand,\n    ActivateCardCommand,\n    SpecialSummonCommand,\n    TributeSummonCommand,\n    TributeSetCommand,\n    LinkSummonCommand,\n    FusionSummonCommand,\n    SynchroSummonCommand,\n    XYZSummonCommand,\n    XYZOverlaySummonCommand,\n    XYZAttachMaterialCommand,\n    XYZDetachMaterialCommand,\n    ToDeckCommand,\n    ShuffleDeckCommand,\n    DestroyCardCommand,\n    RevealCommand,\n    ToExtraDeckCommand,\n    ToHandCommand,\n    FieldSpellCommand,\n    ChangeCardPositionCommand,\n    ChangeCardAtkDefCommand,\n    FlipCommand,\n    ToSTCommand,\n    MoveCardCommand,\n    TargetCommand,\n}\n\nexport const COMMANDS_BY_NAME: any = {\n    \"NormalSummonCommand\": NormalSummonCommand,\n    \"SetMonsterCommand\": SetMonsterCommand,\n    \"SetCardCommand\": SetCardCommand,\n    \"SendCardToGYCommand\": SendCardToGYCommand,\n    \"BanishCommand\": BanishCommand,\n    \"DrawFromDeckCommand\": DrawFromDeckCommand,\n    \"MillFromDeckCommand\": MillFromDeckCommand,\n    \"ActivateCardCommand\": ActivateCardCommand,\n    \"SpecialSummonCommand\": SpecialSummonCommand,\n    \"TributeSummonCommand\": TributeSummonCommand,\n    \"TributeSetCommand\": TributeSetCommand,\n    \"LinkSummonCommand\": LinkSummonCommand,\n    \"FusionSummonCommand\": FusionSummonCommand,\n    \"SynchroSummonCommand\": SynchroSummonCommand,\n    \"XYZSummonCommand\": XYZSummonCommand,\n    \"XYZOverlaySummonCommand\": XYZOverlaySummonCommand,\n    \"XYZAttachMaterialCommand\": XYZAttachMaterialCommand,\n    \"XYZDetachMaterialCommand\": XYZDetachMaterialCommand,\n    \"ToDeckCommand\": ToDeckCommand,\n    \"ShuffleDeckCommand\": ShuffleDeckCommand,\n    \"DestroyCardCommand\": DestroyCardCommand,\n    \"RevealCommand\": RevealCommand,\n    \"ToExtraDeckCommand\": ToExtraDeckCommand,\n    \"ToHandCommand\": ToHandCommand,\n    \"FieldSpellCommand\": FieldSpellCommand,\n    \"ChangeCardPositionCommand\": ChangeCardPositionCommand,\n    \"ChangeCardAtkDefCommand\": ChangeCardAtkDefCommand,\n    \"FlipCommand\": FlipCommand,\n    \"ToSTCommand\": ToSTCommand,\n    \"MoveCardCommand\": MoveCardCommand,\n    \"StartHandCommand\": StartHandCommand,\n    \"TargetCardCommand\": TargetCommand,\n}\n\nexport function GetCommandByClassName<T = Command>(commandClassName: string): T | null {\n    return COMMANDS_BY_NAME[commandClassName];\n}","import { GetCommandByClassName } from \".\";\nimport { BaseCommand } from \"./BaseCommand\";\n\nexport class JSONCommand extends BaseCommand {\n    constructor(cmd: { type: string, data: any }) {\n        super();\n\n        const CommandClass = GetCommandByClassName(cmd.type);\n\n        if (!CommandClass) throw new Error(`Command \"${cmd.type}\" dont exists!`);\n\n        const command = new (CommandClass as any)(cmd.data)\n\n        return command;\n    }\n}","export class EventBus<T extends Record<keyof (T), (...args: any[]) => void>> {\n    private events: Map<keyof T, Function[]>;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    on<K extends keyof T>(event: K, listener: T[K]): void {\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n        this.events.get(event)!.push(listener);\n    }\n\n    dispatch<K extends keyof T>(event: K, ...args: Parameters<T[K]>): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            listeners.forEach(listener => {\n                listener(...args)\n            });\n        }\n    }\n\n    off<K extends keyof T>(event: K, listener: T[K]): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            this.events.set(\n                event,\n                listeners.filter(l => l !== listener)\n            );\n        }\n    }\n\n    clear<K extends keyof T>(event: K): void {\n        if (this.events.has(event)) {\n            this.events.delete(event);\n        }\n    }\n\n    clearAll(): void {\n        this.events.clear();\n    }\n}","import { Command } from \"../types/commands\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelEvents } from '../types/duel-events';\n\ntype YGODuelLogEventMap = {\n    'new-log': (log: YGODuelEvents.DuelLog) => void;\n    'update-logs': (logs: YGODuelEvents.DuelLog[]) => void;\n};\n\nexport class YGODuelLog {\n    public logs: YGODuelEvents.DuelLog[];\n    public events: EventBus<YGODuelLogEventMap>;\n    public enabled: boolean = true;\n\n    constructor() {\n        this.logs = [];\n        this.events = new EventBus();\n    }\n\n    dispatch<T extends YGODuelEvents.DuelLog>(log: T) {\n        if(!this.enabled) return;\n        \n        this.logs.push(log);\n        this.events.dispatch(\"new-log\", log);\n        this.onLogsUpdated();\n    }\n\n    peek(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length == 0) return null;\n        return this.logs[this.logs.length - 1];\n    }\n\n    peekCommand(): number {\n        if (this.logs.length == 0) return -1;\n        return this.logs[this.logs.length - 1].commandId;\n    }\n\n    pop(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length === 0) return null;\n        return this.logs.pop() as YGODuelEvents.DuelLog;\n    }\n\n    removeCommand(command: Command, args?: { log: boolean }) {\n        const commandIndex = this.logs.findIndex(cmd => cmd.commandId === command.commandId);\n\n        if (commandIndex !== -1) {\n            this.logs.splice(commandIndex, this.logs.length - commandIndex);\n        }\n\n        if (args?.log !== false) {\n            this.events.dispatch(\"update-logs\", this.logs);\n        }\n    }\n\n    onLogsUpdated() {\n        this.events.dispatch(\"update-logs\", this.logs);\n    }\n}","import { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\nimport { YGOUtils } from \"./YGOUtils\";\n\nexport class YGOGameState {\n    public fields: PlayerField[];\n    private cardsInGame: Map<number, Card>;\n\n    constructor(props: YGOProps) {\n        this.fields = YGOUtils.initializePlayersFields(props);\n        this.cardsInGame = YGOUtils.getCardsInGame(this.fields);\n    }\n\n    getCardById(id: number, zone: FieldZone): Card {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone === \"GY\" || zone === \"GY2\") {\n            const card = this.fields[playerIndex].graveyard.find(c => c.id === id);\n\n            if (!card) {\n                throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n            }\n\n            return card;\n        }\n\n        const card = this.getCardFromZone(zone);\n\n        if (card && card.id === id) return card;\n\n        throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n    }\n\n    getCardFromZone(zone: FieldZone): Card | null {\n        const zoneData = YGOGameUtils.getZoneData(zone);\n        const playerIndex = zoneData.player;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].hand[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].monsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].spellTrapZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].graveyard[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].banishedZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].mainDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"ED-\") || zone.startsWith(\"ED2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraMonsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            const card = this.fields[playerIndex].fieldZone;\n            return card;\n        }\n\n        return null;\n    }\n\n    moveCardById(cardId: number, originZone: FieldZone, zone: FieldZone) {\n        const card = this.getCardById(cardId, originZone);\n        this.moveCard(card, originZone, zone);\n    }\n\n    moveCard(card: Card, originZone: FieldZone, zone: FieldZone) {\n        this.removeCard(originZone);\n        this.setCard(card, zone);\n    }\n\n    setCard(card: Card | null, zone: FieldZone): void {\n        const zoneData = YGOGameUtils.getZoneData(zone);\n        const playerIndex = zoneData.player;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\") || zone === \"H\" || zone === \"H2\") {\n            const handIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const hand = this.fields[playerIndex].hand;\n\n            if (handIndex == -1 && card) {\n                hand.push(card);\n            } else if (card) {\n                if (handIndex >= hand.length) {\n                    hand.push(card);\n                } else {\n                    hand.splice(handIndex, 0, card);\n                }\n            } else {\n                hand.splice(handIndex, 1);\n            }\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].monsterZone[zoneIndex] = card;\n            // todo check if monster etc \n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].spellTrapZone[zoneIndex] = card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].extraMonsterZone[zoneIndex] = card;\n        }\n        else if (zone.startsWith(\"ED\") || zone.startsWith(\"ED2\")) { // append to extra\n            if (zone.indexOf(\"-\") !== -1) {\n                const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n                if (!card) {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 1);\n                } else {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 0, card);\n                }\n            } else if (card) {\n                const isPendulum = card.isMainDeckCard && YGOGameUtils.isPendulumCard(card);\n                const extraDeck = this.fields[playerIndex].extraDeck;\n\n                if (isPendulum) {\n                    extraDeck.unshift(card); // add card to top of extraDeck\n                } else {\n                    extraDeck.push(card);\n                    YGOGameUtils.sortCards(extraDeck);\n                }\n            } else {\n                throw new Error(\"No card to add to Extra Deck\");\n            }\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n\n            console.log(\"MOVE CARD TO DECK \", zone);\n\n            if (!card) {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 1);\n            } else {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 0, card);\n            }\n        } else if (zone === \"GY\" || zone === \"GY2\" || zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const gy = this.fields[playerIndex].graveyard;\n            if (card) {\n                if (gyIndex === -1) {\n                    gy.unshift(card);\n                } else {\n                    gy.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    if (gy.length > 0) {\n                        gy.splice(0, 1);\n                    }\n                } else {\n                    gy.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone === \"B\" || zone === \"B2\" || zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const banishZone = this.fields[playerIndex].banishedZone;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    banishZone.unshift(card);\n                } else {\n                    banishZone.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    banishZone.pop();\n                } else {\n                    banishZone.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            this.fields[playerIndex].fieldZone = card;\n        }\n    }\n\n    removeCard(zone: FieldZone): Card | null {\n        const card = this.getCardFromZone(zone);\n        this.setCard(null, zone);\n        // TODO Reset card\n        return card;\n    }\n\n    getCardData(cardId: number): Card | null {\n        return this.cardsInGame.get(cardId) || null;\n    }\n\n    shuffleDeck(player: number) {\n        const deck = this.fields[player].mainDeck;\n        if (deck.length === 0) return; // If the deck is empty, do nothing\n\n        for (let i = deck.length - 1; i > 0; i--) {\n            const cardIndex = Math.floor(Math.random() * (i + 1));\n            [deck[i], deck[cardIndex]] = [deck[cardIndex], deck[i]];\n        }\n    }\n\n    getPlayerIndexFromZone(zone: string): number {\n        return YGOUtils.getPlayerIndexFromZone(zone);\n    }\n\n    getAvailableZones(fieldZones: (\"M\" | \"M2\" | \"S\" | \"S2\" | \"F\" | \"F2\" | \"EMZ\")[]): FieldZone[] {\n        const result: FieldZone[] = [];\n\n        // TODO @RMS  make this player aware\n\n        for (const fieldZone of fieldZones) {\n            const player = this.getPlayerIndexFromZone(fieldZone);\n            const field = this.fields[player];\n            if (fieldZone === \"M\") {\n                field.monsterZone.forEach((data, index) => {\n                    const zone = `M${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"S\") {\n                field.spellTrapZone.forEach((data, index) => {\n                    const zone = `S${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"EMZ\") {\n                for (let i = 0; i < 2; ++i) {\n                    const data = field.extraDeck[i] || field.extraDeck[i];\n                    const zone = `EMZ-${i + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                }\n            } else if (fieldZone === \"F\") {\n                if (field.fieldZone) result.push(\"F\");\n            }\n        }\n\n        return result;\n    }\n}","import { Card, FieldZone, FileldStateEntry as YGOCardFieldState, YGOReplayData } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\nexport class YGOReplayUtils {\n    static createReplayData(ygo: YGOCore): YGOReplayData {\n        const players = ygo.props.players.map((playerData, playerIndex) => {\n            const field = ygo.getField(playerIndex);\n            return {\n                name: playerData.name,\n                mainDeck: field.data.mainDeckOrdered,\n                extraDeck: field.data.extraDeckOrdered,\n            }\n        });\n\n        const commands = ygo.commands.map(cmd => cmd.toJSON());\n        const endField: YGOCardFieldState[] = [];\n        const initialField: YGOCardFieldState[] = [];\n\n        if (ygo.props.options?.fieldState) {\n            ygo.props.options.fieldState.forEach(s => initialField.push(s));\n        }\n\n        for (let playerIndex = 0; playerIndex < ygo.state.fields.length; ++playerIndex) {\n            const field = ygo.getField(playerIndex);\n\n            for (let i = 0; i < field.monsterZone.length; ++i) {\n                if (field.monsterZone[i]) {\n                    const card = field.monsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"M\", playerIndex, i + 1);\n                    endField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.spellTrapZone.length; ++i) {\n                if (field.spellTrapZone[i]) {\n                    const card = field.spellTrapZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"S\", playerIndex, i + 1);\n                    endField.push({ id: card.id, zone });\n                }\n            }\n\n            for (let i = 0; i < field.extraMonsterZone.length; ++i) {\n                if (field.extraMonsterZone[i]) {\n                    const card = field.extraMonsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"EMZ\", playerIndex, i + 1);\n                    endField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.graveyard.length; ++i) {\n                const card = field.graveyard[i];\n                const zone = YGOGameUtils.createZone(\"GY\", playerIndex);\n                endField.push({ id: card.id, zone });\n            }\n\n            for (let i = 0; i < field.banishedZone.length; ++i) {\n                const card = field.banishedZone[i];\n                const zone = YGOGameUtils.createZone(\"B\", playerIndex);\n                const result: any = { id: card.id, zone };\n\n                if (YGOGameUtils.isFaceDown(card)) {\n                    result.position = \"facedown\"\n                }\n\n                endField.push(result);\n            }\n        }\n\n        // todo get end field etc..\n        return {\n            players,\n            commands,\n            initialField,\n            endField\n        }\n    }\n\n    private static getMonsterCardInfo(card: Card, zone: FieldZone): any {\n        const result: any = {\n            id: card.id,\n            zone\n        }\n\n        if (card.atk !== card.currentAtk) {\n            result.atk = card.currentAtk;\n        }\n\n        if (card.def !== card.currentDef) {\n            result.def = card.currentDef;\n        }\n\n        if (card.position !== \"faceup-attack\") {\n            result.position = card.position;\n        }\n\n        if (card.materials.length > 0) {\n            result.materials = card.materials.map(materialCard => ({ id: materialCard.id })); // TODO OWner of the card\n        }\n\n        return result;\n    }\n}","import { JSONCommand } from \"../commands/JSONCommand\";\nimport { StartHandCommand } from \"../commands/StartHandCommand\";\nimport { Command } from \"../types/commands\";\nimport { PlayerField, YGOCoreEvents, YGOPhase, YGOProps } from \"../types/types\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelLog } from \"./YGODuelLog\";\nimport { YGOGameState } from \"./YGOGameState\";\nimport { YGOReplayUtils } from \"./YGOReplayUtils\";\nimport { YGOUtils } from \"./YGOUtils\";\n\nexport class YGOCore {\n    // public\n    public currentPlayer: number;\n    public phase: YGOPhase;\n    public props: YGOProps;\n    public state: YGOGameState;\n    public commands: Command[];\n    public commandIndex: number;\n    public duelLog: YGODuelLog;\n    public events: EventBus<YGOCoreEvents>;\n    //private\n    private startDuelTime: number; // start game time\n    private duelTimeOffset: number; // host game time ex: join room at time 100 my time is 0 + 100\n\n    constructor(props: YGOProps) {\n        this.props = props;\n        this.state = new YGOGameState(props);\n        this.duelLog = new YGODuelLog();\n        this.events = new EventBus<YGOCoreEvents>();\n        this.commandIndex = -1;\n        this.commands = this.createYGOCommands(props.commands);\n        this.startDuelTime = Date.now();\n        this.duelTimeOffset = props.options?.currentGameTime || 0;\n        /// game\n        this.currentPlayer = 0;\n        this.phase = YGOPhase.DrawPhase;\n        // events\n        this.duelLog.events.on(\"new-log\", data => this.events.dispatch(\"new-log\", data));\n        this.duelLog.events.on(\"update-logs\", data => this.events.dispatch(\"update-logs\", data));\n    }\n\n    start() {\n        const { draw: cardsToDrawInStart = 5 } = this.props.options || {};\n\n        if (this.commands.length === 0) {\n            this.props.players.forEach((_, player) => {\n                this.exec(new StartHandCommand({\n                    player,\n                    numberOfCards: cardsToDrawInStart\n                }));\n            });\n        }\n    }\n\n    setCurrentPlayer(player: number) {\n        if (player < 0 || player > 1) throw new Error(`invalid player ${player}`);\n\n        this.currentPlayer = player;\n        this.events.dispatch(\"set-player\", { player });\n    }\n\n    exec(command: Command): Command {\n        if (this.hasNextCommand()) {\n            this.commands.splice(this.commandIndex + 1, this.commands.length - this.commandIndex);\n        }\n        this.commandIndex = this.commands.length;\n        this.commands.push(command);\n        command.init(this);\n        this.events.dispatch(\"command-created\", { command });\n        command.exec();\n        this.events.dispatch(\"command-executed\", { command });\n        return command;\n    }\n\n    peek(): Command | null {\n        return this.commands.length > 0 ? this.commands[this.commands.length - 1] : null;\n    }\n\n    redo(): Command | null {\n        if (!this.hasNextCommand()) return null;\n        this.commandIndex++;\n        const cmdToRedo = this.commands[this.commandIndex];\n        cmdToRedo.exec();\n        this.duelLog.onLogsUpdated();\n        this.events.dispatch(\"command-redo\", { command: cmdToRedo });\n\n        return cmdToRedo;\n    }\n\n    undo(): Command | null {\n        if (!this.hasPrevCommand()) return null;\n\n        const cmdToUndo = this.commands[this.commandIndex];\n        this.duelLog.removeCommand(cmdToUndo);\n        cmdToUndo.undo();\n        this.commandIndex--;\n        this.duelLog.onLogsUpdated();\n        this.events.dispatch(\"command-undo\", { command: cmdToUndo });\n\n        return cmdToUndo;\n    }\n\n    goToCommand(command: Command): boolean {\n\n        const commandIndex = this.commands.findIndex(c => c === command);\n\n        if (commandIndex === -1) return false;\n\n        if (commandIndex === this.commandIndex) return true;\n\n        if (commandIndex > this.commandIndex) {\n            while (this.commandIndex !== commandIndex && this.hasNextCommand()) {\n                this.redo();\n            }\n            return true;\n        } else {\n            while (this.commandIndex !== commandIndex && this.hasPrevCommand()) {\n                this.undo();\n            }\n            return true;\n        }\n    }\n\n    hasNextCommand() {\n        return this.commands.length - 1 > this.commandIndex;\n    }\n\n    hasPrevCommand() {\n        return this.commandIndex >= 0;\n    }\n\n    getNextCommandId() {\n        return this.commandIndex >= 0 ? this.commandIndex : 0;\n    }\n\n    getCurrentTime() {\n        return Date.now() - this.startDuelTime + this.duelTimeOffset;\n    }\n\n    getReplayData() {\n\n        while (this.hasNextCommand()) {\n            this.redo();\n        }\n\n        return YGOReplayUtils.createReplayData(this);\n    }\n\n    getField(player: number): PlayerField {\n        return this.state.fields[player];\n    }\n\n    private createYGOCommands(commands?: any[]) {\n        this.duelLog.enabled = false;\n\n        if (Array.isArray(commands)) {\n            const loadedCommands = commands.map(cmd => {\n                const command = new JSONCommand(cmd);\n                command.init(this);\n                command.exec();\n                return command;\n            });\n\n            // if true will not undo all the commands passed on constructor\n            // Can be undefined so validate if !== true\n            if (this.props.options?.execCommands !== true) {\n                for (let i = loadedCommands.length - 1; i >= 0; --i) {\n                    loadedCommands[i].undo();\n                }\n            }\n\n            this.duelLog.enabled = true;\n            return loadedCommands;\n        }\n\n        this.duelLog.enabled = true;\n\n        return [];\n    }\n\n    getCurrentStateProps() {\n        return YGOUtils.getYGOCoreStateProps(this);\n    }\n}","import { Commands } from './commands';\n\nexport * from './game/YGOCore';\nexport * from './game/YGODuelLog';\nexport * from './game/YGOGameUtils';\nexport * from './types/duel-events';\nexport * from './commands/JSONCommand';\n\nexport const YGOCommands = Commands;\n\nexport const debug_version = \"1.0.3\";"],"names":["BaseCommand","constructor","this","commandId","parent","init","ygo","YGO","getNextCommandId","timestamp","getCurrentTime","getCommandId","_a","undefined","execChildCommand","command","exec","undoChildCommand","undo","undoMultipleChildCommand","commands","i","length","execMultipleChildCommand","isValid","toJSON","data","type","baseType","YGODuelEvents","CardBaseType","YGOPhase","LogType","YGOGameUtils","isLinkMonster","card","typeline","includes","isMonster","isXYZMonster","isSynchroMonster","isFusionMonster","isPendulumCard","frameType","isFaceUp","position","isFaceDown","isSpellTrap","isSpell","isTrap","startsWith","isFieldSpell","race","isDefense","isAttack","hasLinkMonstersInField","field","monsterZone","some","extraMonsterZone","hasXyzMonstersInField","XyzMonstersInFieldCounter","counter","forEach","XyzMonstersInFieldsCounter","duel","state","fields","getPlayerIndexFromZone","zone","createZone","player","createOverlayZone","zoneIndex","getZoneData","args","split","playerIndex","zoneId","Number","endsWith","substring","getCardBaseType","EffectMonster","Spell","RitualMonster","Trap","FusionMonster","SynchroMonster","XYZMonster","LinkMonster","NormalMonster","getCardsBaseType","cards","map","c","toSortedCards","sortCards","cardsToSort","cardsWeights","j","name","shuffleCards","positions","Array","index","Math","floor","random","temp","invertPlayerInZone","zoneData","ActivateCardCommand","super","getCardById","id","originZone","removeCard","setCard","console","log","prevPosition","duelLog","dispatch","Activate","previousPosition","YGOUtils","parseMainDeck","mainDeck","parseCard","isMainDeckCard","parseExtraDeck","extraDeck","extra","Error","owner","originalOwner","materials","getCardsInGame","Map","has","set","spellTrapZone","graveyard","banishedZone","getOverlayZone","initializePlayersFields","props","shuffleDecks","options","cardIndex","lp","hand","mainDeckOrdered","extraDeckOrdered","fieldZone","players","recoverFields","fieldState","isArray","cardsToRemoveFromDeck","Set","cardsToRemoveFromExtraDeck","getCard","find","add","edCard","banished","cardInitialState","push","isNumeric","atk","currentAtk","def","currentDef","sort","card1","card2","cardInHand","filter","val","isNaN","getFieldsAsString","field1","getField","field2","join","_b","getYGOCoreStateProps","getCardData","cmd","Object","assign","startCommand","commandIndex","execCommands","XYZMoveMaterialsCommand","materialsToMove","shouldMoveMaterials","overlayZone","material","SendToGY","reason","MoveCardCommand","moveCard","extraDeckIndex","findIndex","BanishCommand","banishCommand","ChangeCardAtkDefCommand","prevAtk","prevDef","ChangeCardPositionCommand","ChangeCardPosition","DestroyCardCommand","moveCardCommand","DrawFromDeckCommand","numberOfCards","pop","DrawCardFromDeck","newCards","reverse","cardInHandIndex","splice","RevealCommand","Reveal","SendCardToGYCommand","FieldSpellCommand","fieldCard","reveal","FlipCommand","Flip","FusionSummonCommand","materialCard","FusionSummon","LinkSummonCommand","LinkSummon","MillFromDeckCommand","max","min","NormalSummonCommand","SetCardCommand","SetMonster","SetST","SetMonsterCommand","ShuffleDeckCommand","cardPositions","Shuffle","SpecialSummonCommand","StartHandCommand","core","shift","numCardsToDraw","handIndex","StartHand","unshift","SynchroSummonCommand","SynchroSummon","TargetCommand","Target","ToDeckCommand","getCommandType","isTopCard","getDeckIndex","shuffle","deckIndex","ToExtraDeckCommand","ToHandCommand","ToSTCommand","TributeSetCommand","tributes","TributeSummonCommand","XYZAttachMaterialCommand","getCardFromZone","materialCardReference","moveXYZMaterialsCommand","XYZAttachMaterial","materialId","materialIndex","indexOf","XYZDetachMaterialCommand","XYZDetachMaterial","XYZOverlaySummonCommand","previousMaterialsData","cardMaterials","material2","XYZMaterialsMove","XYZOverlaySummon","XYZOverlay","XYZSummonCommand","XYZSummon","Commands","COMMANDS_BY_NAME","TargetCardCommand","JSONCommand","CommandClass","commandClassName","EventBus","events","on","event","listener","get","listeners","off","l","clear","delete","clearAll","YGODuelLog","enabled","logs","onLogsUpdated","peek","peekCommand","removeCommand","YGOGameState","cardsInGame","moveCardById","cardId","isPendulum","gyIndex","gy","banishZone","shuffleDeck","deck","getAvailableZones","fieldZones","result","YGOReplayUtils","createReplayData","playerData","endField","initialField","s","getMonsterCardInfo","YGOCore","createYGOCommands","startDuelTime","Date","now","duelTimeOffset","currentGameTime","currentPlayer","phase","DrawPhase","start","draw","cardsToDrawInStart","_","setCurrentPlayer","hasNextCommand","redo","cmdToRedo","hasPrevCommand","cmdToUndo","goToCommand","getReplayData","loadedCommands","getCurrentStateProps","YGOCommands","debug_version"],"mappings":"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"}