{"version":3,"file":"index.js","sources":["../src/commands/BaseCommand.ts","../src/types/duel-events.ts","../src/types/types.ts","../src/game/YGOGameUtils.ts","../src/commands/ActivateCardCommand.ts","../src/game/YGOUtils.ts","../src/commands/XYZMoveMaterials.ts","../src/commands/MoveCardCommand.ts","../src/commands/BanishCommand.ts","../src/commands/ChangeCardAtkDefCommand.ts","../src/commands/ChangeCardPositionCommand.ts","../src/commands/DestroyCard.ts","../src/commands/DrawFromDeckCommand.ts","../src/commands/RevealCommand.ts","../src/commands/SendCardToGY.ts","../src/commands/FieldSpellCommand.ts","../src/commands/FlipCommand.ts","../src/commands/FusionSummonCommand.ts","../src/commands/LinkSummonCommand.ts","../src/commands/MillFromDeckCommand.ts","../src/commands/NormalSummonCommand.ts","../src/commands/SetCardCommand.ts","../src/commands/SetMonsterCommand.ts","../src/commands/ShuffleDeck.ts","../src/commands/SpecialSummonCommand.ts","../src/commands/StartHandCommand.ts","../src/commands/SynchroSummonCommand.ts","../src/commands/TargetCommand.ts","../src/commands/ToDeckCommand.ts","../src/commands/ToExtraDeckCommand.ts","../src/commands/ToHandCommand.ts","../src/commands/ToSTCommand.ts","../src/commands/TributeSetCommand.ts","../src/commands/TributeSummonCommand.ts","../src/commands/XYZAttachMaterialCommand.ts","../src/commands/XYZDetachMaterialCommand.ts","../src/commands/XYZSummonCommand.ts","../src/commands/index.ts","../src/commands/JSONCommand.ts","../src/utils/event-bus.ts","../src/game/YGODuelLog.ts","../src/game/YGOGameState.ts","../src/game/YGOReplayUtils.ts","../src/game/YGOCore.ts","../src/index.ts"],"sourcesContent":["import { YGOCore } from \"../game/YGOCore\";\nimport { CommandType, Command } from \"../types/commands\";\n\nexport abstract class BaseCommand implements Command {\n\n    protected YGO!: YGOCore;\n    public type!: CommandType;\n    public baseType!: string;\n    public commandId: number = -1;\n    public parent: Command | null = null;\n\n    constructor() { }\n\n    init(ygo: YGOCore) {\n        this.YGO = ygo;\n        this.commandId = this.YGO.getNextCommandId();\n    }\n\n    getCommandId() {\n        return this.parent?.commandId || this.commandId;\n    }\n\n    execChildCommand(command: Command): Command | undefined {\n        command.parent = this.parent ? this.parent : this;\n        command.init(this.YGO);\n        command.exec();\n        return command;\n    }\n\n    undoChildCommand(command: Command | undefined): Command | undefined {\n        command?.undo();\n        return command;\n    }\n\n    undoMultipleChildCommand(commands: Command[]): void {\n        for (let i = commands.length - 1; i >= 0; --i) {\n            commands[i]?.undo();\n        }\n    }\n\n    execMultipleChildCommand(commands: Command[]): void {\n        for (const command of commands) {\n            this.execChildCommand(command);\n        }\n    }\n\n    isValid(): boolean {\n        return true;\n    }\n\n    exec(): void {\n\n    }\n\n    undo(): void {\n\n    }\n\n    toJSON<T extends any = any>(): { type: string, data: T } {\n        const self = this as any;\n        const data = self.data || {};\n\n        return {\n            type: this.baseType,\n            data,\n        };\n    }\n}","import { CardPosition, FieldZone } from \"./types\";\n\nexport namespace YGODuelEvents {\n    export enum LogType {\n        NormalSummon = \"Normal Summon\",\n        SetMonster = \"Set Monster\",\n        SendToGY = \"Send To GY\",\n        Banish = \"Banish\",\n        BanishFD = \"Banish FD\",\n        StartHand = \"Start Hand\",\n        DrawCardFromDeck = \"Draw From Deck\",\n        MillCardFromDeck = \"Mill From Deck\",\n        TributeSummon = \"Tribute Summon\",\n        TributeSet = \"Tribute Set\",\n        ToHand = \"To Hand\",\n        ToExtraDeck = \"To Extra Deck\",\n        ToTopDeck = \"To Top Deck\",\n        ToBottomDeck = \"To Bottom Deck\",\n        SpecialSummon = \"Special Summon\",\n        SynchroSummon = \"Synchro Summon\",\n        LinkSummon = \"Link Summon\",\n        FusionSummon = \"Fusion Summon\",\n        XYZSummon = \"XYZ Summon\",\n        XYZAttachMaterial = \"XYZ Attach Material\",\n        XYZDetachMaterial = \"XYZ Detach Material\",\n        XYZOverlay = \"XYZOverlay\",\n        SetST = \"Set ST\",\n        Activate = \"Activate\",\n        MoveCard = \"Move Card\",\n        Shuffle = \"Shuffle\",\n        ToST = \"To ST\",\n        Reveal = \"Reveal\",\n        Target = \"Target\",\n        FieldSpell = \"Field Spell\",\n        ChangeCardPosition = \"Change Card Position\",\n        ChangeCardAtkDef = \"Change Card Atk Def\",\n        Flip = \"Flip\"\n    }\n\n    export interface DuelLog {\n        type: LogType;\n        player: number;\n        commandId: number;\n    }\n\n    export interface NormalSummon extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface MoveCard extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface ToHand extends MoveCard { }\n\n    export interface SetMonster extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone?: FieldZone;\n    }\n\n    export interface SetST extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone?: FieldZone;\n    }\n\n    export interface SendToGY extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone,\n        reason?: \"Fusion Summon\" | \"Synchro Summon\" | \"Link Summon\" | \"XYZ Material\" | undefined\n    }\n\n    export interface DrawFromDeck extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n    }\n\n    export interface StartHand extends DuelLog {\n        cards: { id: number, zone: FieldZone }[],\n        core: boolean\n    }\n\n    export interface FusionSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n            owner: number\n        }>\n    }\n\n    export interface SynchroSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface LinkSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        materials: Array<{\n            id: number\n            zone: FieldZone\n            owner: number\n        }>\n    }\n\n    export interface XYZSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZAttach extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZOverlay extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZDetach extends DuelLog {\n        id: number\n        overlayZone: FieldZone\n        materialIndex: number\n    }\n\n    export interface Activate extends DuelLog {\n        id: number\n        originZone?: FieldZone\n        zone: FieldZone\n        previousPosition: CardPosition\n        position: CardPosition\n    }\n\n    export interface Target extends DuelLog {\n        id: number\n        originZone: FieldZone\n    }\n\n    export interface Banish extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface Shuffle extends DuelLog { }\n\n    export interface Reveal extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n    }\n\n    export interface ChangeCardPosition extends DuelLog {\n        id: number\n        originZone: FieldZone\n        previousPosition: CardPosition\n        position: CardPosition\n    }\n\n    export interface ChangeCardAtkDef extends DuelLog {\n        id: number;\n        zone: FieldZone;\n        atk: number | null\n        def: number | null\n    }\n\n    export interface Flip extends DuelLog {\n        id: number\n        originZone: FieldZone\n        previousPosition: CardPosition\n        position: CardPosition\n    }\n\n    export interface ToExtraDeck extends DuelLog {\n        id: number,\n        originZone: FieldZone\n    }\n\n    export interface MillCardFromDeck extends DuelLog {\n        // TODO\n    }\n}\n\n","import { BaseCommand } from \"../commands/BaseCommand\";\nimport { Command } from \"./commands\";\nimport { YGODuelEvents } from \"./duel-events\";\n\nexport const NUM_ZONES: number = 5; // Number of primary zones (Monster, Spell/Trap, etc.)\nexport type PlayerSide = 0 | 1 | number; // 0 represents Player 1, 1 represents Player 2\n\nexport type CardPosition = \"faceup-attack\" | \"faceup-defense\" | \"faceup\" | \"facedown\";\n\nexport type FieldZone = `M-${1 | 2 | 3 | 4 | 5}`\n    | `M2-${1 | 2 | 3 | 4 | 5}`\n    | `S-${1 | 2 | 3 | 4 | 5}`\n    | `S2-${1 | 2 | 3 | 4 | 5}`\n    | `EMZ`\n    | `EMZ2`\n    | `EMZ-${1 | 2}`\n    | `EMZ2-${1 | 2}`\n    | `ORU-${1 | 2 | 3 | 4 | 5}` // Overlay Units ORU Xyz Materials\n    | `ORU2-${1 | 2 | 3 | 4 | 5}`\n    | `ORUEMZ-${1 | 2}` // Xyz Materials in extra monster zone :)\n    | `ORUEMZ2-${1 | 2}`\n    | \"H\"\n    | \"H2\"\n    | `H-${number}`\n    | `H2-${number}`\n    | \"F\"\n    | \"F2\"\n    | \"GY\"\n    | \"GY2\"\n    | `GY-${number}`\n    | `GY2-${number}`\n    | \"B\"\n    | \"B2\"\n    | `B-${number}`\n    | `B2-${number}`\n    | \"D\"\n    | \"D2\"\n    | `D-${number}`\n    | `D2-${number}`\n    | \"ED\"\n    | \"ED2\"\n    | `ED-${number}`\n    | `ED2-${number}`;\n\nexport type FieldZoneId = \"M\" | \"S\" | \"EMZ\" | \"GY\" | \"D\" | \"ED\" | \"B\" | \"F\" | \"ORU\" | \"ORUEMZ\" | \"H\";\n\nexport type FieldZoneData = { zone: FieldZoneId, player: number, zoneIndex: number }\n\nexport enum CardBaseType {\n    NormalMonster,\n    EffectMonster,\n    RitualMonster,\n    Spell,\n    Trap,\n    FusionMonster,\n    SynchroMonster,\n    XYZMonster,\n    LinkMonster,\n}\n\nexport interface YGOPropsOptions {\n    lp?: number // default `8000`\n    draw?: number // default `5`\n    shuffleDecks?: boolean // default value is `true`,\n    fieldState?: FileldStateEntry[] // default,\n    startCommand?: number\n    execCommands?: boolean\n}\n\nexport interface YGOPropsPlayer {\n    name: string,\n    mainDeck: CardData[], // Card Data is the same as https://ygoprodeck.com/api-guide\n    extraDeck: CardData[] // Card Data is the same as https://ygoprodeck.com/api-guide\n}\n\nexport interface YGOProps {\n    players: YGOPropsPlayer[],\n    commands?: { type: string, data: any }[]\n    options?: YGOPropsOptions\n}\n\nexport interface FileldStateEntry {\n    id: number,\n    zone: FieldZone\n    atk?: number\n    def?: number\n    owner?: number\n    position?: CardPosition\n    materials?: Array<{ id: number, owner?: number }>\n}\n\nexport interface CardData {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    attribute: string\n    card_images: any\n}\n\nexport interface Card {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    linkval: number\n    attribute: string\n    card_images: any\n    // game_data\n    index: number // internal unique ID\n    owner: number\n    isMainDeckCard: boolean\n    originalOwner: number\n    position: CardPosition\n    currentAtk: number\n    currentDef: number\n    materials: Card[]\n}\n\nexport interface PlayerInfo {\n    name: string;\n}\n\nexport interface PlayerField {\n    lp: number,\n    player: PlayerInfo\n    mainDeck: Card[]\n    extraDeck: Card[]\n    hand: Card[]\n    data: {\n        mainDeckOrdered: number[];\n        extraDeckOrdered: number[];\n    }\n    graveyard: Card[]\n    banishedZone: Card[]\n    // Zones on the field where cards are actively played\n    monsterZone: Array<Card | null>\n    spellTrapZone: Array<Card | null>\n    fieldZone: Card | null;\n    extraMonsterZone: Array<Card | null>;\n}\n\nexport interface GameState {\n    players: PlayerInfo[];\n    fields: PlayerField[];\n}\n\nexport interface YGOReplayData {\n    players: {\n        name: string\n        mainDeck: number[]\n        extraDeck: number[]\n    }[]\n    initialField: FileldStateEntry[]\n    endField: FileldStateEntry[]\n    commands: any[]\n}\n\nexport type YGOCoreEvents = {\n    \"command-created\": (args: { command: Command }) => void\n    \"command-executed\": (args: { command: Command }) => void\n    \"command-redo\": (args: { command: Command }) => void\n    \"command-undo\": (args: { command: Command }) => void\n    'new-log': (log: YGODuelEvents.DuelLog) => void\n    'update-logs': (logs: YGODuelEvents.DuelLog[]) => void\n    'set-player': (args: { player: number }) => void\n    'set-duel-phase': (args: { phase: YGOPhase }) => void\n}\n\nexport enum YGOPhase {\n    DrawPhase = \"Draw Phase\",\n    StandbyPhase = \"Standby Phase\",\n    MainPhase1 = \"Main Phase 1\",\n    BattlePhase = \"Battle Phase\",\n    MainPhase2 = \"Main Phase 2\",\n    EndPhase = \"End Phase\",\n}","import { Card, CardBaseType, FieldZone, FieldZoneId, FieldZoneData, PlayerField } from \"../types/types\";\n\n// Only functions for game utils\nexport class YGOGameUtils {\n\n    static isLinkMonster(card: Card): boolean {\n        return card.typeline?.includes(\"Link\");\n    }\n\n    static isMonster(card: Card): boolean {\n        return card.type?.includes(\"Monster\");\n    }\n\n    static isXYZMonster(card: Card) {\n        return card.typeline?.includes(\"Xyz\");\n    }\n\n    static isSynchroMonster(card: Card) {\n        return card.typeline?.includes(\"Synchro\");\n    }\n\n    static isFusionMonster(card: Card) {\n        return card.typeline?.includes(\"Fusion\");\n    }\n\n    static isPendulumCard(card: Card) {\n        return card.frameType?.includes(\"pendulum\");\n    }\n\n    static isFaceUp(card: Card): boolean {\n        return card.position.includes(\"faceup\");\n    }\n\n    static isFaceDown(card: Card): boolean {\n        return !this.isFaceUp(card);\n    }\n\n    static isSpellTrap(card: Card) {\n        return this.isSpell(card) || this.isTrap(card);\n    }\n\n    static isSpell(card: Card) {\n        return card.frameType.startsWith(\"spell\");\n    }\n\n    static isTrap(card: Card) {\n        return card.frameType.startsWith(\"trap\");\n    }\n\n    static isFieldSpell(card: Card) {\n        return card.race === \"Field\";\n    }\n\n    static isDefense(card: Card) {\n        return card.position === \"facedown\" || card.position === \"faceup-defense\";\n    }\n\n    static isAttack(card: Card) {\n        return card.position === \"faceup-attack\" || card.position === \"faceup\";\n    }\n\n    static hasLinkMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false);\n    }\n\n    static hasXyzMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isXYZMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isXYZMonster(card) : false);\n    }\n\n    static getPlayerIndexFromZone(zone: string): number {\n        const isPlayer2 = zone.includes(\"2-\");\n\n        if (isPlayer2) return 1;\n\n        switch (zone) {\n            case \"M2\":\n            case \"H2\":\n            case \"F2\":\n            case \"GY2\":\n            case \"EMZ2-1\":\n            case \"EMZ2-2\":\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    static createZone(zone: FieldZoneId, player: number, position?: number): FieldZone {\n\n        if (position === undefined) {\n            return `${zone}${player === 0 ? '' : '2'}` as FieldZone;\n        }\n\n        return `${zone}${player === 0 ? '' : '2'}-${position}` as FieldZone;\n    }\n\n    static createOverlayZone(zone: string, player: number, zoneIndex: number): FieldZone {\n\n        if (zone === \"EMZ\") {\n            return `ORU${player === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n        }\n\n        return `ORUEMZ${player === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n    }\n\n    static getZoneData(zone: FieldZone): FieldZoneData {\n        const args = zone.split(\"-\");\n        let playerIndex = 0;\n        let zoneId = args[0];\n        const zoneIndex = args.length > 1 ? Number(args[1]) : -1;\n\n        if (args[0].endsWith(\"2\")) {\n            playerIndex = 1;\n            zoneId = zoneId.substring(0, zoneId.length - 1);\n        }\n\n        return {\n            zone: zoneId as FieldZoneId,\n            player: playerIndex,\n            zoneIndex: zoneIndex,\n        }\n    }\n\n    static getCardBaseType(card: Card): CardBaseType {\n        if (card.frameType.startsWith(\"effect\")) return CardBaseType.EffectMonster;\n        if (card.frameType.startsWith(\"spell\")) return CardBaseType.Spell;\n        if (card.frameType.startsWith(\"ritual\")) return CardBaseType.RitualMonster;\n        if (card.frameType.startsWith(\"trap\")) return CardBaseType.Trap;\n        if (card.frameType.includes(\"fusion\")) return CardBaseType.FusionMonster;\n        if (card.frameType.includes(\"synchro\")) return CardBaseType.SynchroMonster;\n        if (card.frameType.includes(\"xyz\")) return CardBaseType.XYZMonster;\n        if (card.frameType.includes(\"link\")) return CardBaseType.LinkMonster;\n        return CardBaseType.NormalMonster;\n    }\n\n    static getCardsBaseType(cards: Card[]): CardBaseType[] {\n        const result = cards.map(c => YGOGameUtils.getCardBaseType(c));\n        return result;\n    }\n\n    static toSortedCards(cards: Card[]) {\n        return this.sortCards([...cards]);\n    }\n\n    static sortCards(cardsToSort: Card[]) {\n        const cards = cardsToSort;\n        const cardsWeights = YGOGameUtils.getCardsBaseType(cards);\n\n        for (let i = 0; i < cards.length - 1; ++i) {\n            for (let j = 0; j < cards.length - i - 1; ++j) {\n                if (cardsWeights[j] > cardsWeights[j + 1] || (cardsWeights[j] === cardsWeights[j + 1] && cards[j].name > cards[j + 1].name)) {\n                    [cards[j], cards[j + 1]] = [cards[j + 1], cards[j]];\n                    [cardsWeights[j], cardsWeights[j + 1]] = [cardsWeights[j + 1], cardsWeights[j]];\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static shuffleCards(cards: Card[]): Array<number> {\n        const positions = Array<number>(cards.length);\n        for (let i = 0; i < cards.length; ++i) {\n            const index = Math.floor(Math.random() * cards.length);\n\n            positions[i] = index;\n\n            const temp = cards[i];\n            cards[i] = cards[index];\n            cards[index] = temp;\n        }\n        return positions;\n    }\n\n    static invertPlayerInZone(zone: FieldZone): FieldZone {\n        const zoneData = this.getZoneData(zone);\n        return this.createZone(zoneData.zone, 1 - zoneData.player, zoneData.zoneIndex);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ActivateCardCommandData } from '../types/commands';\nimport { Card, CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ActivateCardCommand extends BaseCommand {\n    public baseType: string = \"ActivateCardCommand\";\n    private data: ActivateCardCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ActivateCardCommandData) {\n        super();\n        this.type = \"Activate\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone || this.data.zone)!;\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.originZone);\n            this.YGO.state.setCard(card, this.data.zone);\n\n            console.log(`Exec: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Exec: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        this.prevPosition = card.position;\n\n        if (YGOGameUtils.isFaceDown(card)) {\n            if (YGOGameUtils.isSpellTrap(card)) {\n                card.position = 'faceup';\n            } else {\n                card.position = 'faceup-attack';\n            }\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Activate>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            previousPosition: this.prevPosition,\n            position: card.position\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.zone);\n            this.YGO.state.setCard(card, this.data.originZone);\n\n            console.log(`Undo: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Undo: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { COMMANDS_BY_NAME } from \"../commands\";\nimport { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps, YGOPropsPlayer } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\n// Only internal functions for game utils\nexport class YGOUtils {\n    static getPlayerIndexFromZone(zone: string): number {\n        return YGOGameUtils.getPlayerIndexFromZone(zone);\n    }\n\n    static parseMainDeck({ mainDeck, player }: { mainDeck: Card[], player: number }): Card[] {\n        return mainDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: true }));\n    }\n\n    static parseExtraDeck({ extraDeck, player }: { extraDeck: Card[], player: number }): Card[] {\n        const extra = extraDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: false }));\n        YGOGameUtils.sortCards(extra);\n        return extra;\n    }\n\n    static parseCard({ card, player, isMainDeckCard }: { card: Card, player: number, isMainDeckCard: boolean }): Card {\n        if (!card) throw new Error(\"card is required to be parsed\");\n        card.owner = player;\n        card.originalOwner = player;\n        card.materials = [];\n        card.isMainDeckCard = isMainDeckCard;\n        card.position = \"facedown\";\n        return card;\n    }\n\n    static getCardsInGame(fields: PlayerField[]): Map<number, Card> {\n        const cards = new Map<number, Card>()\n\n        for (const field of fields) {\n\n            for (const card of field.mainDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.extraDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static getOverlayZone(zone: FieldZone): FieldZone {\n        const playerIndex = YGOUtils.getPlayerIndexFromZone(zone);\n        const zoneIndex = zone.split(\"-\")[1];\n\n        if (zone.startsWith(\"EMZ\")) {\n            return `ORU${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n        }\n\n        return `ORUEMZ${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n    }\n\n    static initializePlayersFields(props: YGOProps): [PlayerField, PlayerField] {\n        const { shuffleDecks = true } = props.options || {};\n        let cardIndex = 0;\n\n        const field1: PlayerField = {\n            lp: 8000,\n            player: { name: \"test\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            data: {\n                mainDeckOrdered: [],\n                extraDeckOrdered: []\n            },\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        };\n\n        const field2: PlayerField = {\n            lp: 8000,\n            player: { name: \"test2\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            data: {\n                mainDeckOrdered: [],\n                extraDeckOrdered: []\n            },\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        }\n\n        const fields: [PlayerField, PlayerField] = [field1, field2];\n\n        for (let playerIndex = 0; playerIndex < props.players.length; ++playerIndex) {\n            const player = props.players[playerIndex];\n            const field = fields[playerIndex];\n            field.mainDeck = YGOUtils.parseMainDeck({ mainDeck: player.mainDeck as Card[], player: playerIndex });\n            field.extraDeck = YGOUtils.parseExtraDeck({ extraDeck: player.extraDeck as Card[], player: playerIndex });\n            field.mainDeck.forEach(card => card.index = ++cardIndex);\n            field.extraDeck.forEach(card => card.index = ++cardIndex);\n        }\n\n        if (shuffleDecks) {\n            fields.forEach((field, playerIndex) => {\n                if (props.players[playerIndex]) {\n                    YGOGameUtils.shuffleCards(field.mainDeck);\n                }\n            });\n        }\n\n        fields.forEach((field) => {\n            field.data.mainDeckOrdered = field.mainDeck.map(card => card.id);\n            field.data.extraDeckOrdered = field.extraDeck.map(card => card.id);\n        });\n\n        this.recoverFields(fields, props.options?.fieldState);\n\n        return fields;\n    }\n\n    private static recoverFields(fields: PlayerField[], fieldState: FileldStateEntry[] | undefined) {\n        if (Array.isArray(fieldState)) {\n            const cardsToRemoveFromDeck = [new Set(), new Set()];\n            const cardsToRemoveFromExtraDeck = [new Set(), new Set()];\n\n            const getCard = (player: number, id: number): Card => {\n\n                const card = fields[player].mainDeck.find(c => c.id === id && !cardsToRemoveFromDeck[player].has(c));\n\n                if (card) {\n                    cardsToRemoveFromDeck[player].add(card);\n                    return card;\n                }\n\n                const edCard = fields[player].extraDeck.find(c => c.id === id && !cardsToRemoveFromExtraDeck[player].has(c));\n\n                if (edCard) {\n                    cardsToRemoveFromExtraDeck[player].add(edCard);\n                    return edCard;\n                }\n\n                throw new Error(`Card \"${id}\" not found in player \"${player}\" deck`);\n            }\n\n            for (let i = 0; i < 2; ++i) {\n                const hand: Array<{ card: Card, index: number }> = [];\n                const graveyard: Array<{ card: Card, index: number }> = [];\n                const banished: Array<{ card: Card, index: number }> = [];\n\n                for (const cardInitialState of fieldState) {\n                    const zoneData = YGOGameUtils.getZoneData(cardInitialState.zone);\n\n                    if (zoneData.player !== i) continue;\n\n                    if (zoneData.zone === \"H\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        hand.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"M\") {\n                        const { position = \"faceup-attack\" } = cardInitialState;\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].monsterZone[zoneData.zoneIndex - 1] = card;\n\n                        if (YGOUtils.isNumeric(cardInitialState.atk)) card.currentAtk = Number(cardInitialState.atk);\n                        if (YGOUtils.isNumeric(cardInitialState.def)) card.currentDef = Number(cardInitialState.def);\n                        if (position) card.position = position;\n                        if (cardInitialState.materials) card.materials = cardInitialState.materials.map(({ id }) => getCard(zoneData.player, id)); // todo check owner\n                    } else if (zoneData.zone === \"EMZ\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].extraMonsterZone[zoneData.zoneIndex - 1] = card;\n\n                        if (YGOUtils.isNumeric(cardInitialState.atk)) card.currentAtk = Number(cardInitialState.atk);\n                        if (YGOUtils.isNumeric(cardInitialState.def)) card.currentDef = Number(cardInitialState.def);\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                        if (cardInitialState.materials) card.materials = cardInitialState.materials.map(({ id }) => getCard(zoneData.player, id)); // todo check owner\n                    }\n                    else if (zoneData.zone === \"S\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].spellTrapZone[zoneData.zoneIndex - 1] = card;\n\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                    } else if (zoneData.zone === \"F\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        fields[zoneData.player].fieldZone = card;\n\n                        if (cardInitialState.position) card.position = cardInitialState.position;\n                    } else if (zoneData.zone === \"GY\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        graveyard.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"B\") {\n                        const card = getCard(zoneData.player, cardInitialState.id); // TODO PLAYER OWNER CHECK\n                        banished.push({ card, index: zoneData.zoneIndex || 0 });\n                    } else if (zoneData.zone === \"ED\") { // pendulumns\n                        // TODO\n                    }\n                };\n\n                if (hand.length > 0) {\n                    fields[i].hand = [...hand].sort((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n\n                if (graveyard.length > 0) {\n                    fields[i].graveyard = [...graveyard].sort((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n\n                if (banished.length > 0) {\n                    fields[i].hand = [...banished].sort((card1, card2) => card1.index - card2.index).map(cardInHand => cardInHand.card);\n                }\n            }\n\n            for (let i = 0; i < fields.length; ++i) {\n                fields[i].mainDeck = fields[i].mainDeck.filter(c => !cardsToRemoveFromDeck[i].has(c))\n                fields[i].extraDeck = fields[i].extraDeck.filter(c => !cardsToRemoveFromDeck[i].has(c))\n            }\n        }\n    }\n\n    static isNumeric(val: any): boolean {\n        return !isNaN(Number(val));\n    }\n\n    static getFieldsAsString(ygo: YGOCore) {\n        const log: string[] = [];\n\n        log.push(\"---- FIELD STATE ----\");\n\n        const field1 = ygo.getField(0);\n        const field2 = ygo.getField(1);\n\n        log.push(\"Player2: \" + field1.player.name);\n        log.push(\"Hand: \" + field2.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field2.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Monster Zone: \" + field2.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"-------\");\n        log.push(\"Extra Monster Zone: \" + ((field1.extraMonsterZone[0] || field2.extraMonsterZone[0])?.name || \"_\") + \" | \" + ((field1.extraMonsterZone[1] || field2.extraMonsterZone[1])?.name || \"_\"));\n        log.push(\"-------\");\n        log.push(\"Monster Zone: \" + field1.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field1.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Hand: \" + field1.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Player1: \" + field1.player.name);\n\n        return log.join(\"\\n\");\n    }\n\n    static getYGOCoreStateProps(ygo: YGOCore): YGOProps {\n\n        const players: YGOPropsPlayer[] = ygo.state.fields.map((field) => {\n            return {\n                name: field.player.name,\n                mainDeck: field.data.mainDeckOrdered.map(id => ygo.state.getCardData(id) as any),\n                extraDeck: field.data.extraDeckOrdered.map(id => ygo.state.getCardData(id) as any),\n            }\n        });\n\n        return {\n            players,\n            commands: ygo.commands.map(cmd => cmd.toJSON()),\n            options: {\n                startCommand: ygo.commandIndex,\n                ...ygo.props.options || {},\n                shuffleDecks: false,\n                execCommands: true\n            }\n        }\n    }\n\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZMoveMaterialsCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { Card, FieldZone, FieldZoneId } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class XYZMoveMaterialsCommand extends BaseCommand {\n    public baseType: string = \"XYZMoveMaterialsCommand\";\n    private data: XYZMoveMaterialsCommandData;\n    private commands: Command[];\n    private materialsToMove: { card: Card, zone: FieldZone }[];\n\n    constructor(data: XYZMoveMaterialsCommandData) {\n        super();\n        this.type = \"XYZ Move Material\";\n        this.data = data;\n        this.commands = [];\n        this.materialsToMove = [];\n        console.log(\"EXEC MATERIALS\");\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        // XYZ send materials to GY if send card to Gy or banish\n        if (this.shouldMoveMaterials(card, this.data.originZone)) {\n            const overlayZone = YGOUtils.getOverlayZone(this.data.originZone);\n            this.materialsToMove = [];\n            card.materials.forEach(material => {\n                const zone = YGOGameUtils.createZone(this.data.zone!, material.owner);\n                this.YGO.state.setCard(material, zone);\n                this.materialsToMove.push({ card: material, zone });\n                if (this.data.zone === \"GY\") {\n                    this.YGO.duelLog.dispatch<YGODuelEvents.SendToGY>({\n                        player: this.data.player,\n                        commandId: this.getCommandId(),\n                        type: YGODuelEvents.LogType.SendToGY,\n                        id: material.id,\n                        originZone: overlayZone,\n                        zone: YGOGameUtils.createZone(this.data.zone as FieldZoneId, material.owner),\n                        reason: \"XYZ Material\"\n                    });\n                }\n            });\n            card.materials = [];\n        }\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.materialsToMove.length > 0) {\n            this.materialsToMove.forEach(({ zone }) => {\n                this.YGO.state.setCard(null, zone);\n            });\n        }\n\n        card.materials = this.materialsToMove.map(({ card }) => card);\n    }\n\n    private shouldMoveMaterials(card: Card, zone: FieldZone): boolean {\n        if (!card.materials || card.materials.length === 0) return false;\n        return true;\n    }\n}\n\ninterface XYZMaterialsMoveData {\n    player: number,\n    id: number\n    overlayZone: FieldZone\n    zone: FieldZone\n}\n\nclass XYZMaterialsMove extends BaseCommand {\n    private data: XYZMaterialsMoveData;\n    private card!: Card;\n\n    constructor(data: XYZMaterialsMoveData) {\n        super();\n        this.data = data;\n    }\n\n    exec(): void {\n        this.card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        this.YGO.state.setCard(null, this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlay>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlay,\n            id: this.data.id,\n            originZone: this.data.zone,\n            overlayZone: this.data.overlayZone\n        });\n    }\n\n    undo(): void {\n        this.YGO.state.setCard(this.card, this.data.zone);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, MoveCardCommandData } from '../types/commands';\nimport { Card, CardPosition, FieldZoneData } from '../types/types';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { XYZMoveMaterialsCommand } from './XYZMoveMaterials';\n\nexport class MoveCardCommand extends BaseCommand {\n    public baseType: string = \"MoveCardCommand\";\n    public data: MoveCardCommandData;\n    private prevPosition!: CardPosition;\n    private commands: Command[];\n\n    constructor(data: MoveCardCommandData) {\n        super();\n        const type = data.type || \"Move Card\";\n        this.type = type;\n        this.data = data;\n        this.commands = [];\n        this.data.type = type;\n    }\n\n    override exec(): void {\n        console.log(`Exec: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n        const { log = true } = this.data;\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        const zoneData = YGOGameUtils.getZoneData(this.data.zone);\n        const field = this.YGO.getField(zoneData.player);\n\n        this.commands = [];\n\n        if (this.data.zone === \"ED\" || this.data.zone === \"ED2\") {\n            this.prevPosition = card.position;\n            this.data.position = YGOGameUtils.isPendulumCard(card) ? \"faceup\" : \"facedown\";\n        }\n\n        if (this.data.position) {\n            this.prevPosition = card.position;\n            card.position = this.data.position;\n        }\n\n        if (this.shouldMoveMaterials(card, zoneData)) {\n            this.commands.push(new XYZMoveMaterialsCommand({\n                player: this.data.player,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: \"GY\"\n            }));\n        }\n\n        if (this.commands.length > 0) {\n            this.execMultipleChildCommand(this.commands);\n        }\n\n        // TODO IF PENDULUMN send cards to Extra Deck\n        this.YGO.state.moveCard(card, this.data.originZone, this.data.zone);\n\n        if (zoneData.zone === \"ED\") { // if sent to ED say the cardIndex\n            const extraDeckIndex = field.extraDeck.findIndex(c => c === card);\n            if (extraDeckIndex !== -1) {\n                this.data.zone = YGOGameUtils.createZone(zoneData.zone, zoneData.player, extraDeckIndex + 1);\n            }\n        }\n\n        if (log) {\n            this.YGO.duelLog.dispatch<any>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: this.type as any,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.data.zone,\n                reason: this.data.reason,\n                position: card.position\n            });\n        }\n    }\n\n    override undo(): void {\n        console.log(`Undo: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n\n        this.YGO.state.moveCard(card, this.data.zone, this.data.originZone);\n\n        if (this.commands.length > 0) {\n            this.undoMultipleChildCommand(this.commands);\n            this.commands = [];\n        }\n    }\n\n    private shouldMoveMaterials(card: Card, zoneData: FieldZoneData): boolean {\n        if (!card.materials || card.materials.length === 0) return false;\n        if (zoneData.zone === \"GY\") return true;\n        if (zoneData.zone === \"B\") return true;\n        return false;\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { BanishCommandData, Command } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class BanishCommand extends BaseCommand {\n    public baseType: string = \"BanishCommand\";\n    private data: BanishCommandData;\n    private zone!: FieldZone;\n    private banishCommand!: Command;\n\n    constructor(data: BanishCommandData) {\n        super();\n        this.data = data;\n        this.data.position = this.data.position || \"faceup\"\n        this.type = this.data.position === \"faceup\" ? \"Banish\" : \"Banish FD\";\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.zone = YGOGameUtils.createZone(\"B\", card.originalOwner, 1);\n\n        this.banishCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.banishCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.banishCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ChangeCardAtkDefCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOUtils } from '../game/YGOUtils';\n\nexport class ChangeCardAtkDefCommand extends BaseCommand {\n    private data: ChangeCardAtkDefCommandData;\n    private prevAtk: number | undefined;\n    private prevDef: number | undefined;\n\n    constructor(data: ChangeCardAtkDefCommandData) {\n        super();\n        this.type = \"Change Card Atk Def\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone)!;\n\n        if (YGOUtils.isNumeric(this.data.atk)) {\n            this.prevAtk = card.currentAtk;\n            card.currentAtk = Number(this.data.atk);\n        }\n\n        if (YGOUtils.isNumeric(this.data.def)) {\n            this.prevDef = card.currentDef;\n            card.currentAtk = Number(this.data.def);\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.ChangeCardAtkDef>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            zone: this.data.zone,\n            atk: YGOUtils.isNumeric(this.data.atk) ? Number(this.data.atk) : null,\n            def: YGOUtils.isNumeric(this.data.def) ? Number(this.data.def) : null,\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.prevAtk) {\n            card.currentAtk = this.prevAtk;\n        }\n\n        if (this.prevDef) {\n            card.currentDef = this.prevDef;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ChangeCardPositionCommandData } from '../types/commands';\nimport { CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class ChangeCardPositionCommand extends BaseCommand {\n    public baseType: string = \"ChangeCardPositionCommand\";\n    private data: ChangeCardPositionCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ChangeCardPositionCommandData) {\n        super();\n        this.type = \"Change Card Position\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone)!;\n\n        this.prevPosition = card.position;\n\n        card.position = this.data.position;\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.ChangeCardPosition>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.ChangeCardPosition,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            previousPosition: this.prevPosition,\n            position: this.data.position,\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, DestroyCardCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DestroyCardCommand extends BaseCommand {\n    public baseType: string = \"DestroyCardCommand\";\n    private data: DestroyCardCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: DestroyCardCommandData) {\n        super();\n\n        this.type = \"Destroy\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { DrawFromDeckCommandData } from '../types/commands';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DrawFromDeckCommand extends BaseCommand {\n    public baseType: string = \"DrawFromDeckCommand\";\n    private data: DrawFromDeckCommandData;\n    private cards: Card[];\n\n    constructor(data: DrawFromDeckCommandData) {\n        super();\n\n        this.type = \"Draw From Deck\";\n        this.data = data;\n        this.data.numberOfCards = this.data.numberOfCards || 1;\n        this.cards = [];\n    }\n\n    exec(): void {\n        console.log(`Exec: Draw ${this.data.numberOfCards} from Deck`);\n\n        this.cards = [];\n\n        const field = this.YGO.state.fields[this.data.player];\n\n        for (let i = 0; i < this.data.numberOfCards!; ++i) {\n            const card = field.mainDeck.pop()!;\n            console.log(\"DRAW\", card.name);\n\n            field.hand.push(card);\n            this.cards.push(card);\n\n            const originZone = YGOGameUtils.createZone(\"D\", this.data.player, field.mainDeck.length - 1);\n            const zone = YGOGameUtils.createZone(\"H\", this.data.player, field.hand.length);\n\n            this.YGO.duelLog.dispatch<YGODuelEvents.DrawFromDeck>({\n                commandId: this.getCommandId(),\n                player: this.data.player,\n                type: YGODuelEvents.LogType.DrawCardFromDeck,\n                id: card.id,\n                originZone,\n                zone,\n            });\n        }\n    }\n\n    undo(): void {\n        console.log(`Undo: Draw ${this.data.numberOfCards} from Deck`);\n\n        const newCards = [...this.cards].reverse();\n        const field = this.YGO.state.fields[this.data.player];\n\n        console.log(\"CARD DRAW UNDO\");\n        console.log(newCards.map(c => c.name));\n        console.log(\"DECK 1>>\", field.mainDeck.length);\n        for (const card of newCards) {\n            const cardInHandIndex = field.hand.findIndex(c => c === card);\n            if (cardInHandIndex !== -1) {\n                field.hand.splice(cardInHandIndex, 1);\n            }\n        }\n        field.mainDeck.push(...newCards);\n\n        console.log(field.hand.map(c => c.name));\n        console.log(\"DECK 2>>\", field.mainDeck.length);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { RevealCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class RevealCommand extends BaseCommand {\n    public baseType: string = \"RevealCommand\";\n    private data: RevealCommandData;\n\n    constructor(data: RevealCommandData) {\n        super();\n        this.type = \"Reveal\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        this.YGO.duelLog.dispatch<YGODuelEvents.Reveal>({\n            type: YGODuelEvents.LogType.Reveal,\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            id: this.data.id,\n            originZone: this.data.originZone\n        })\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SendCardToGYCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class SendCardToGYCommand extends BaseCommand {\n    public baseType: string = \"SendCardToGYCommand\";\n    private data: SendCardToGYCommandData;\n    private zone!: FieldZone;\n    private moveCardCommand!: Command;\n\n    constructor(data: SendCardToGYCommandData) {\n        super();\n\n        this.type = \"Send To GY\";\n        this.data = data;\n    }\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.zone = this.data.zone || YGOGameUtils.createZone(\"GY\", card.originalOwner, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            reason: this.data.reason,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, FieldSpellCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { RevealCommand } from './RevealCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class FieldSpellCommand extends BaseCommand {\n    public baseType: string = \"FieldSpellCommand\";\n    private data: FieldSpellCommandData;\n    private commands: Command[];\n\n    constructor(data: FieldSpellCommandData) {\n        super();\n\n        this.type = \"Field Spell\";\n        this.data = data;\n        this.data.position = data.position === \"facedown\" ? \"facedown\" : \"faceup\";\n        this.commands = [];\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const fieldCard = this.YGO.getField(this.data.player).fieldZone;\n\n        if (fieldCard) {\n            this.commands.splice(0, 1, new SendCardToGYCommand({\n                player: this.data.player,\n                id: fieldCard.id,\n                originZone: YGOGameUtils.createZone(\"F\", this.data.player)\n            }));\n        }\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n\n        if (this.data.reveal) {\n            this.commands.push(new RevealCommand({\n                id: this.data.id,\n                originZone: this.data.zone,\n                player: this.data.player\n            }));\n        }\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { FlipCommandData } from '../types/commands';\nimport { CardPosition } from '../types/types';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class FlipCommand extends BaseCommand {\n    public baseType: string = \"FlipCommand\";\n    private data: FlipCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: FlipCommandData) {\n        super();\n        this.type = \"Flip\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone)!;\n\n        this.prevPosition = card.position;\n\n        if (YGOGameUtils.isFaceDown(card)) {\n            card.position = \"faceup-attack\";\n        } else {\n            card.position = \"faceup-defense\";\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Flip>({\n            type: YGODuelEvents.LogType.Flip,\n            commandId: this.getCommandId(),\n            player: this.data.player,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            previousPosition: this.prevPosition,\n            position: card.position,\n        })\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, FusionSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOCore } from '../game/YGOCore';\nimport { FieldZone } from '../types/types';\n\nexport class FusionSummonCommand extends BaseCommand {\n    public baseType: string = \"FusionSummonCommand\";\n    private data: FusionSummonCommandData;\n    private commands: Command[];\n    private materials: { id: number, zone: FieldZone, owner: number }[] = [];\n\n    constructor(data: FusionSummonCommandData) {\n        super();\n        this.type = \"Fusion Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        this.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Fusion Summon\"\n            }));\n\n            return {\n                id: material.id,\n                zone: material.zone,\n                owner: materialCard.originalOwner,\n            }\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.FusionSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.FusionSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position!,\n            zone: this.data.zone,\n            materials: this.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, LinkSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { CardPosition, FieldZone } from '../types/types';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class LinkSummonCommand extends BaseCommand {\n    public baseType: string = \"LinkSummonCommand\";\n    private data: LinkSummonCommandData;\n    private commands: Command[];\n    private position: CardPosition;\n    private materials: { id: number, zone: FieldZone, owner: number }[] = [];\n\n    constructor(data: LinkSummonCommandData) {\n        super();\n        this.type = \"Link Summon\";\n        this.data = data;\n        this.position = \"faceup-attack\";\n        this.commands = [];\n    }\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        this.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Link Summon\"\n            }));\n\n            return {\n                id: material.id,\n                zone: material.zone,\n                owner: materialCard.originalOwner,\n            }\n        });\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        const zoneData = YGOGameUtils.getZoneData(this.data.zone);\n\n        if (zoneData.zone === \"EMZ\") {\n            this.data.zone = YGOGameUtils.createZone(zoneData.zone, card.owner, zoneData.zoneIndex);\n        }\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.LinkSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.LinkSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            materials: this.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, MillFromDeckCommandData } from '../types/commands';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MillFromDeckCommand extends BaseCommand {\n    public baseType: string = \"MillFromDeckCommand\";\n    private data: MillFromDeckCommandData;\n    private commands: Command[];\n\n    constructor(data: MillFromDeckCommandData) {\n        super();\n\n        this.type = \"Mill From Deck\";\n        const { numberOfCards = 1 } = data;\n        this.data = data;\n        this.data.numberOfCards = Math.max(1, numberOfCards);\n        this.commands = [];\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const field = this.YGO.getField(this.data.player);\n        const numberOfCards = Math.min(this.data.numberOfCards!, field.mainDeck.length);\n\n        for (let i = 0; i < numberOfCards!; ++i) {\n            const cardIndex = field.mainDeck.length - 1 - i;\n            const card = field.mainDeck[cardIndex];\n\n            // TODO LOG THIS SHIT :)\n\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: YGOGameUtils.createZone(\"D\", this.data.player, cardIndex + 1),\n                player: this.data.player\n            }))\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, NormalSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class NormalSummonCommand extends BaseCommand {\n    public baseType: string = \"NormalSummonCommand\";\n    private data: NormalSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: NormalSummonCommandData) {\n        super();\n        this.type = \"Normal Summon\";\n        this.data = data;\n        this.data.position = \"faceup-attack\";\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetCardCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { CardPosition } from '../types/types';\nimport { RevealCommand } from './RevealCommand';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class SetCardCommand extends BaseCommand {\n    public baseType: string = \"SetCardCommand\";\n    private data: SetCardCommandData;\n    private prevPosition: CardPosition | undefined;\n    private isMonster: boolean;\n    private commands: Command[];\n\n    constructor(data: SetCardCommandData) {\n        super();\n        this.type = \"Set ST\";\n        this.isMonster = false;\n        this.data = data;\n        this.commands = [];\n    }\n\n    init(ygo: YGOCore) {\n        super.init(ygo);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.isMonster = YGOGameUtils.isMonster(card);\n        this.type = this.isMonster ? \"Set Monster\" : \"Set ST\";\n\n        this.commands = [];\n\n        if (this.data.zone) {\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.data.zone,\n                position: \"facedown\"\n            }));\n\n            if (this.data.reveal) {\n                this.commands.push(new RevealCommand({\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.zone,\n                }));\n            }\n        }\n    }\n\n    exec(): void {\n        if (this.commands.length > 0) {\n            this.execMultipleChildCommand(this.commands);\n        } else {\n            const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n            this.prevPosition = card.position;\n            card.position = \"facedown\";\n\n            if (this.type === \"Set Monster\") {\n                this.YGO.duelLog.dispatch<YGODuelEvents.SetMonster>({\n                    type: YGODuelEvents.LogType.SetMonster,\n                    commandId: this.getCommandId(),\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.originZone,\n                })\n            } else {\n                this.YGO.duelLog.dispatch<YGODuelEvents.SetMonster>({\n                    type: YGODuelEvents.LogType.SetST,\n                    commandId: this.getCommandId(),\n                    player: this.data.player,\n                    id: this.data.id,\n                    originZone: this.data.originZone,\n                })\n            }\n        }\n    }\n\n    undo(): void {\n        if (this.commands.length > 0) {\n            this.undoMultipleChildCommand(this.commands);\n        }\n\n        if (this.prevPosition) {\n            const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n            card.position = this.prevPosition;\n        }\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetMonsterCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SetMonsterCommand extends BaseCommand {\n    public baseType: string = \"SetMonsterCommand\";\n    private data: SetMonsterCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SetMonsterCommandData) {\n        super();\n        this.type = \"Set Monster\";\n        this.data = data;\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"facedown\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ShuffleDeckCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ShuffleDeckCommand extends BaseCommand {\n    public baseType: string = \"ShuffleDeckCommand\";\n    private data: ShuffleDeckCommandData;\n    private cardPositions!: Array<number>;\n\n    constructor(data: ShuffleDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = \"Shuffle Deck\";\n    }\n\n    exec(): void {\n        console.log(\"--------------------\\n\\nSHUFFLE DECK \\n\\n------------------------\");\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n\n        if (this.cardPositions) {\n            for (let i = 0; i < this.cardPositions.length; ++i) {\n                const index = this.cardPositions[i];\n                const temp = mainDeck[index];\n                mainDeck[index] = mainDeck[i];\n                mainDeck[i] = temp;\n            }\n        } else {\n            this.cardPositions = YGOGameUtils.shuffleCards(mainDeck);\n        }\n\n        if (this.data.log !== false) {\n            this.YGO.duelLog.dispatch<YGODuelEvents.Shuffle>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: YGODuelEvents.LogType.Shuffle\n            });\n        }\n    }\n\n    undo(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n        for (let i = 0; i < this.cardPositions.length; ++i) {\n            const index = this.cardPositions[i];\n            const temp = mainDeck[index];\n            mainDeck[index] = mainDeck[i];\n            mainDeck[i] = temp;\n        }\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SpecialSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SpecialSummonCommand extends BaseCommand {\n    public baseType: string = \"SpecialSummonCommand\";\n    private data: SpecialSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SpecialSummonCommandData) {\n        super();\n        this.type = \"Special Summon\";\n        this.data = data;\n        this.data.position = this.data.position || 'faceup-attack';\n\n        if (this.data.position !== 'faceup-attack'\n            && this.data.position !== 'faceup-defense') {\n            this.data.position = 'faceup-attack';\n        }\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: \"Special Summon\",\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { StartHandCommandData } from '../types/commands';\nimport { Card, FieldZone } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class StartHandCommand extends BaseCommand {\n    public baseType: string = \"StartHandCommand\";\n    private data: StartHandCommandData;\n    private cards: Card[];\n\n    constructor(data: StartHandCommandData) {\n        super();\n        this.type = \"Start Hand\";\n        this.data = data;\n        this.cards = [];\n        (this as any).core = true;\n    }\n\n    exec(): void {\n        const field = this.YGO.getField(this.data.player);\n\n        if (this.cards.length > 0) {\n            for (let i = 0; i < this.cards.length; ++i) {\n                const card = field.mainDeck.shift();\n                if (card) {\n                    field.hand.push(card);\n                }\n            }\n        } else if (field.hand.length > 0) {\n            this.cards = [...field.hand];\n        } else {\n            this.cards = [];\n            const numCardsToDraw = Math.min(this.data.numberOfCards, field.mainDeck.length);\n\n            for (let i = 0; i < numCardsToDraw; ++i) {\n                const card = field.mainDeck.shift();\n                if (card) {\n                    field.hand.push(card);\n                    this.cards.push(card);\n                }\n            }\n        }\n\n        const cards: { id: number, zone: FieldZone }[] = this.cards.map((card, handIndex) => {\n            return {\n                id: card.id,\n                zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex + 1)\n            };\n        });\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.StartHand>({\n            commandId: this.getCommandId(),\n            player: this.data.player,\n            type: YGODuelEvents.LogType.StartHand,\n            cards,\n            core: true,\n        });\n    }\n\n    undo(): void {\n        const field = this.YGO.state.fields[this.data.player];\n        field.hand = [];\n        field.mainDeck.unshift(...this.cards);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SynchroSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class SynchroSummonCommand extends BaseCommand {\n    public baseType: string = \"SynchroSummonCommand\";\n    private data: SynchroSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: SynchroSummonCommandData) {\n        super();\n        this.type = \"Synchro Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Synchro Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.SynchroSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.SynchroSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position!,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { TargetCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class TargetCommand extends BaseCommand {\n    public baseType: string = \"TargetCommand\";\n    private data: TargetCommandData;\n\n    constructor(data: TargetCommandData) {\n        super();\n        this.type = \"Target\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        this.YGO.duelLog.dispatch<YGODuelEvents.Target>({\n            type: YGODuelEvents.LogType.Target,\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            id: this.data.id,\n            originZone: this.data.originZone\n        });\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToDeckCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { ShuffleDeckCommand } from './ShuffleDeck';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToDeckCommand extends BaseCommand {\n    public baseType: string = \"ToDeckCommand\";\n    private data: ToDeckCommandData;\n    private zone!: FieldZone;\n    private commands!: Command[];\n\n    constructor(data: ToDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = this.getCommandType();\n    }\n\n    private isTopCard() {\n        return this.data.position === \"top\";\n    }\n\n    private getCommandType() {\n        return this.isTopCard() ? \"To Top Deck\" : \"To Bottom Deck\";\n    }\n\n    private getDeckIndex(): number {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n\n        if (this.isTopCard()) {\n            return mainDeck.length + 1;\n        }\n\n        return 1;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        if (!this.commands) {\n            const { player, shuffle = false } = this.data;\n\n            const deckIndex = this.getDeckIndex();\n            this.zone = YGOGameUtils.createZone(\"D\", player, deckIndex);\n            this.commands = [];\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.zone,\n            }));\n\n            if (shuffle) {\n                this.commands.push(new ShuffleDeckCommand({ player: this.data.player }));\n            }\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToExtraDeckCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToExtraDeckCommand extends BaseCommand {\n    public baseType: string = \"ToExtraDeckCommand\";\n    private data: ToExtraDeckCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToExtraDeckCommandData) {\n        super();\n        this.type = \"To Extra Deck\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"ED\", this.data.player)\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToHandCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToHandCommand extends BaseCommand {\n    public baseType: string = \"ToHandCommand\";\n    private data: ToHandCommandData;\n    private command!: Command;\n\n    constructor(data: ToHandCommandData) {\n        super();\n        this.type = \"To Hand\";\n        this.data = data;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const handIndex = this.YGO.getField(this.data.player).hand.length + 1;\n\n        this.command = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex),\n            position: \"facedown\"\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.command);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.command);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToSTCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class ToSTCommand extends BaseCommand {\n    public baseType: string = \"ToSTCommand\";\n    private data: ToSTCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToSTCommandData) {\n        super();\n        this.type = \"To ST\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"faceup\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSetCommand extends BaseCommand {\n    public baseType: string = \"TributeSetCommand\";\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: TributeSummonCommandData) {\n        super();\n\n        this.type = \"Tribute Set\";\n        this.data = data;\n        this.data.position = \"facedown\";\n\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSummonCommand extends BaseCommand {\n    public baseType: string = \"TributeSummonCommand\";\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n    \n    constructor(data: TributeSummonCommandData) {\n        super();\n        this.type = \"Tribute Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }))\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { XYZAttachCommandData as XYZAttachMaterialCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZAttachMaterialCommand extends BaseCommand {\n    public baseType: string = \"XYZAttachMaterialCommand\";\n    private data: XYZAttachMaterialCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZAttachMaterialCommandData) {\n        super();\n        this.type = \"XYZ Attach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.YGO.state.setCard(null, this.data.originZone);\n        card.materials.push(this.materialCardReference);\n\n        console.log(\"TCL:: EXEC ATTACH:: \", this.materialCardReference.name, this.data.originZone);\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZAttach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.YGO.state.setCard(this.materialCardReference, this.data.originZone);\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { XYZDetachCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZDetachMaterialCommand extends BaseCommand {\n    public baseType: string = \"XYZDetachMaterialCommand\";\n    private data: XYZDetachCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZDetachCommandData) {\n        super();\n        this.type = \"XYZ Detach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone)!;\n        this.materialCardReference = card.materials[this.data.materialIndex];\n        card.materials.splice(this.data.materialIndex, 1);\n\n        this.YGO.state.setCard(this.materialCardReference, \"GY\");\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.originZone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZDetach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: card.id,\n            materialIndex: this.data.materialIndex,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.originZone)!;\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n        this.YGO.state.setCard(null, \"GY\");\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { Card, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOCore } from '../game/YGOCore';\nimport { XYZMoveMaterialsCommand } from './XYZMoveMaterials';\n\nexport class XYZSummonCommand extends BaseCommand {\n    public baseType: string = \"XYZSummonCommand\";\n    private data: XYZSummonCommandData;\n    private commands: Command[];\n    private overlayZone: FieldZone;\n\n    constructor(data: XYZSummonCommandData) {\n        super();\n        this.type = \"XYZ Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n        this.overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n        console.log(\"EXEC MATERIALS\");\n    }\n\n    init(ygo: YGOCore): void {\n        super.init(ygo);\n        console.log(\"MATERIALS FROM XYZ SUMMON\", this.data.materials)\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new XYZMoveMaterialsCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                zone: \"GY\"\n            }));\n        });\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new XYZMaterialsMove({\n                player: this.data.player,\n                overlayZone: this.overlayZone,\n                id: material.id,\n                zone: material.zone\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        console.log(\"XYZ SUMMON COMMAND\");\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        card.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n            return materialCard;\n        });\n\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position!,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        card.materials = [];\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n\ninterface XYZMaterialsMoveData {\n    player: number,\n    id: number\n    overlayZone: FieldZone\n    zone: FieldZone\n}\n\nclass XYZMaterialsMove extends BaseCommand {\n    private data: XYZMaterialsMoveData;\n    private card!: Card;\n\n    constructor(data: XYZMaterialsMoveData) {\n        super();\n        this.data = data;\n    }\n\n    exec(): void {\n        this.card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        this.YGO.state.setCard(null, this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlay>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlay,\n            id: this.data.id,\n            originZone: this.data.zone,\n            overlayZone: this.data.overlayZone\n        });\n    }\n\n    undo(): void {\n        this.YGO.state.setCard(this.card, this.data.zone);\n    }\n}\n","import { Command } from \"../types/commands\";\nimport { ActivateCardCommand } from \"./ActivateCardCommand\";\nimport { BanishCommand } from \"./BanishCommand\";\nimport { ChangeCardAtkDefCommand } from \"./ChangeCardAtkDefCommand\";\nimport { ChangeCardPositionCommand } from \"./ChangeCardPositionCommand\";\nimport { DestroyCardCommand } from \"./DestroyCard\";\nimport { DrawFromDeckCommand } from \"./DrawFromDeckCommand\";\nimport { FieldSpellCommand } from \"./FieldSpellCommand\";\nimport { FlipCommand } from \"./FlipCommand\";\nimport { FusionSummonCommand } from \"./FusionSummonCommand\";\nimport { LinkSummonCommand } from \"./LinkSummonCommand\";\nimport { MillFromDeckCommand } from \"./MillFromDeckCommand\";\nimport { MoveCardCommand } from \"./MoveCardCommand\";\nimport { NormalSummonCommand } from \"./NormalSummonCommand\";\nimport { RevealCommand } from \"./RevealCommand\";\nimport { SendCardToGYCommand } from \"./SendCardToGY\";\nimport { SetCardCommand } from \"./SetCardCommand\";\nimport { SetMonsterCommand } from \"./SetMonsterCommand\";\nimport { ShuffleDeckCommand } from \"./ShuffleDeck\";\nimport { SpecialSummonCommand } from \"./SpecialSummonCommand\";\nimport { StartHandCommand } from \"./StartHandCommand\";\nimport { SynchroSummonCommand } from \"./SynchroSummonCommand\";\nimport { TargetCommand } from \"./TargetCommand\";\nimport { ToDeckCommand } from \"./ToDeckCommand\";\nimport { ToExtraDeckCommand } from \"./ToExtraDeckCommand\";\nimport { ToHandCommand } from \"./ToHandCommand\";\nimport { ToSTCommand } from \"./ToSTCommand\";\nimport { TributeSetCommand } from \"./TributeSetCommand\";\nimport { TributeSummonCommand } from \"./TributeSummonCommand\";\nimport { XYZAttachMaterialCommand } from \"./XYZAttachMaterialCommand\";\nimport { XYZDetachMaterialCommand } from \"./XYZDetachMaterialCommand\";\nimport { XYZSummonCommand } from \"./XYZSummonCommand\";\n\nexport interface YGOCommandsList {\n    NormalSummonCommand: typeof NormalSummonCommand,\n    SetMonsterCommand: typeof SetMonsterCommand,\n    SetCardCommand: typeof SetCardCommand,\n    SendCardToGYCommand: typeof SendCardToGYCommand,\n    BanishCommand: typeof BanishCommand,\n    DrawFromDeckCommand: typeof DrawFromDeckCommand,\n    MillFromDeckCommand: typeof MillFromDeckCommand,\n    ActivateCardCommand: typeof ActivateCardCommand,\n    SpecialSummonCommand: typeof SpecialSummonCommand,\n    TributeSummonCommand: typeof TributeSummonCommand,\n    TributeSetCommand: typeof TributeSetCommand,\n    LinkSummonCommand: typeof LinkSummonCommand,\n    FusionSummonCommand: typeof FusionSummonCommand,\n    SynchroSummonCommand: typeof SynchroSummonCommand,\n    XYZSummonCommand: typeof XYZSummonCommand,\n    XYZAttachMaterialCommand: typeof XYZAttachMaterialCommand,\n    XYZDetachMaterialCommand: typeof XYZDetachMaterialCommand,\n    ToDeckCommand: typeof ToDeckCommand,\n    ShuffleDeckCommand: typeof ShuffleDeckCommand,\n    DestroyCardCommand: typeof DestroyCardCommand,\n    RevealCommand: typeof RevealCommand,\n    ToExtraDeckCommand: typeof ToExtraDeckCommand,\n    ToHandCommand: typeof ToHandCommand,\n    FieldSpellCommand: typeof FieldSpellCommand,\n    ChangeCardPositionCommand: typeof ChangeCardPositionCommand,\n    ChangeCardAtkDefCommand: typeof ChangeCardAtkDefCommand,\n    FlipCommand: typeof FlipCommand,\n    ToSTCommand: typeof ToSTCommand,\n    MoveCardCommand: typeof MoveCardCommand,\n    TargetCommand: typeof TargetCommand;\n}\n\nexport const Commands: YGOCommandsList = {\n    NormalSummonCommand,\n    SetMonsterCommand,\n    SetCardCommand,\n    SendCardToGYCommand,\n    BanishCommand,\n    DrawFromDeckCommand,\n    MillFromDeckCommand,\n    ActivateCardCommand,\n    SpecialSummonCommand,\n    TributeSummonCommand,\n    TributeSetCommand,\n    LinkSummonCommand,\n    FusionSummonCommand,\n    SynchroSummonCommand,\n    XYZSummonCommand,\n    XYZAttachMaterialCommand,\n    XYZDetachMaterialCommand,\n    ToDeckCommand,\n    ShuffleDeckCommand,\n    DestroyCardCommand,\n    RevealCommand,\n    ToExtraDeckCommand,\n    ToHandCommand,\n    FieldSpellCommand,\n    ChangeCardPositionCommand,\n    ChangeCardAtkDefCommand,\n    FlipCommand,\n    ToSTCommand,\n    MoveCardCommand,\n    TargetCommand,\n}\n\nexport const COMMANDS_BY_NAME: any = {\n    \"NormalSummonCommand\": NormalSummonCommand,\n    \"SetMonsterCommand\": SetMonsterCommand,\n    \"SetCardCommand\": SetCardCommand,\n    \"SendCardToGYCommand\": SendCardToGYCommand,\n    \"BanishCommand\": BanishCommand,\n    \"DrawFromDeckCommand\": DrawFromDeckCommand,\n    \"MillFromDeckCommand\": MillFromDeckCommand,\n    \"ActivateCardCommand\": ActivateCardCommand,\n    \"SpecialSummonCommand\": SpecialSummonCommand,\n    \"TributeSummonCommand\": TributeSummonCommand,\n    \"TributeSetCommand\": TributeSetCommand,\n    \"LinkSummonCommand\": LinkSummonCommand,\n    \"FusionSummonCommand\": FusionSummonCommand,\n    \"SynchroSummonCommand\": SynchroSummonCommand,\n    \"XYZSummonCommand\": XYZSummonCommand,\n    \"XYZAttachMaterialCommand\": XYZAttachMaterialCommand,\n    \"XYZDetachMaterialCommand\": XYZDetachMaterialCommand,\n    \"ToDeckCommand\": ToDeckCommand,\n    \"ShuffleDeckCommand\": ShuffleDeckCommand,\n    \"DestroyCardCommand\": DestroyCardCommand,\n    \"RevealCommand\": RevealCommand,\n    \"ToExtraDeckCommand\": ToExtraDeckCommand,\n    \"ToHandCommand\": ToHandCommand,\n    \"FieldSpellCommand\": FieldSpellCommand,\n    \"ChangeCardPositionCommand\": ChangeCardPositionCommand,\n    \"ChangeCardAtkDefCommand\": ChangeCardAtkDefCommand,\n    \"FlipCommand\": FlipCommand,\n    \"ToSTCommand\": ToSTCommand,\n    \"MoveCardCommand\": MoveCardCommand,\n    \"StartHandCommand\": StartHandCommand,\n    \"TargetCardCommand\": TargetCommand,\n}\n\nexport function GetCommandByClassName<T = Command>(commandClassName: string): T | null {\n    return COMMANDS_BY_NAME[commandClassName];\n}","import { GetCommandByClassName } from \".\";\nimport { BaseCommand } from \"./BaseCommand\";\n\nexport class JSONCommand extends BaseCommand {\n    constructor(cmd: { type: string, data: any }) {\n        super();\n\n        const CommandClass = GetCommandByClassName(cmd.type);\n\n        if (!CommandClass) throw new Error(`Command \"${cmd.type}\" dont exists!`);\n\n        const command = new (CommandClass as any)(cmd.data)\n\n        return command;\n    }\n}","export class EventBus<T extends Record<keyof (T), (...args: any[]) => void>> {\n    private events: Map<keyof T, Function[]>;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    on<K extends keyof T>(event: K, listener: T[K]): void {\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n        this.events.get(event)!.push(listener);\n    }\n\n    dispatch<K extends keyof T>(event: K, ...args: Parameters<T[K]>): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            listeners.forEach(listener => {\n                listener(...args)\n            });\n        }\n    }\n\n    off<K extends keyof T>(event: K, listener: T[K]): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            this.events.set(\n                event,\n                listeners.filter(l => l !== listener)\n            );\n        }\n    }\n\n    clear<K extends keyof T>(event: K): void {\n        if (this.events.has(event)) {\n            this.events.delete(event);\n        }\n    }\n\n    clearAll(): void {\n        this.events.clear();\n    }\n}","import { Command } from \"../types/commands\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelEvents } from '../types/duel-events';\n\ntype YGODuelLogEventMap = {\n    'new-log': (log: YGODuelEvents.DuelLog) => void;\n    'update-logs': (logs: YGODuelEvents.DuelLog[]) => void;\n};\n\nexport class YGODuelLog {\n    public logs: YGODuelEvents.DuelLog[];\n    public events: EventBus<YGODuelLogEventMap>;\n    public enabled: boolean = true;\n\n    constructor() {\n        this.logs = [];\n        this.events = new EventBus();\n    }\n\n    dispatch<T extends YGODuelEvents.DuelLog>(log: T) {\n        if(!this.enabled) return;\n        \n        this.logs.push(log);\n        this.events.dispatch(\"new-log\", log);\n        this.onLogsUpdated();\n    }\n\n    peek(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length == 0) return null;\n        return this.logs[this.logs.length - 1];\n    }\n\n    peekCommand(): number {\n        if (this.logs.length == 0) return -1;\n        return this.logs[this.logs.length - 1].commandId;\n    }\n\n    pop(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length === 0) return null;\n        return this.logs.pop() as YGODuelEvents.DuelLog;\n    }\n\n    removeCommand(command: Command, args?: { log: boolean }) {\n        const commandIndex = this.logs.findIndex(cmd => cmd.commandId === command.commandId);\n\n        if (commandIndex !== -1) {\n            this.logs.splice(commandIndex, this.logs.length - commandIndex);\n        }\n\n        if (args?.log !== false) {\n            this.events.dispatch(\"update-logs\", this.logs);\n        }\n    }\n\n    onLogsUpdated() {\n        this.events.dispatch(\"update-logs\", this.logs);\n    }\n}","import { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\nimport { YGOUtils } from \"./YGOUtils\";\n\nexport class YGOGameState {\n    public fields: PlayerField[];\n    private cardsInGame: Map<number, Card>;\n\n    constructor(props: YGOProps) {\n        this.fields = YGOUtils.initializePlayersFields(props);\n        this.cardsInGame = YGOUtils.getCardsInGame(this.fields);\n    }\n\n    getCardById(id: number, zone: FieldZone): Card {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone === \"GY\" || zone === \"GY2\") {\n            const card = this.fields[playerIndex].graveyard.find(c => c.id === id);\n\n            if (!card) {\n                throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n            }\n\n            return card;\n        }\n\n        const card = this.getCardFromZone(zone);\n\n        if (card && card.id === id) return card;\n\n        throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n    }\n\n    getCardFromZone(zone: FieldZone): Card | null {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].hand[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].monsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].spellTrapZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].graveyard[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].banishedZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].mainDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"ED-\") || zone.startsWith(\"ED2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraMonsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            const card = this.fields[playerIndex].fieldZone;\n            return card;\n        }\n\n        return null;\n    }\n\n    moveCardById(cardId: number, originZone: FieldZone, zone: FieldZone) {\n        const card = this.getCardById(cardId, originZone);\n        this.moveCard(card, originZone, zone);\n    }\n\n    moveCard(card: Card, originZone: FieldZone, zone: FieldZone) {\n        this.removeCard(originZone);\n        this.setCard(card, zone);\n    }\n\n    setCard(card: Card | null, zone: FieldZone): void {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\") || zone === \"H\" || zone === \"H2\") {\n            const handIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const hand = this.fields[playerIndex].hand;\n\n            if (handIndex == -1 && card) {\n                hand.push(card);\n            } else if (card) {\n                if (handIndex >= hand.length) {\n                    hand.push(card);\n                } else {\n                    hand.splice(handIndex, 0, card);\n                }\n            } else {\n                hand.splice(handIndex, 1);\n            }\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].monsterZone[zoneIndex] = card;\n            // todo check if monster etc \n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].spellTrapZone[zoneIndex] = card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].extraMonsterZone[zoneIndex] = card;\n        }\n        else if (zone.startsWith(\"ED\") || zone.startsWith(\"ED2\")) { // append to extra\n            if (zone.indexOf(\"-\") !== -1) {\n                console.log(\"ZONE \", zone);\n                console.log(\"ED \", this.fields[playerIndex].extraDeck);\n                const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n                if (!card) {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 1);\n                } else {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 0, card);\n                }\n            } else if (card) {\n                const isPendulum = card.isMainDeckCard && YGOGameUtils.isPendulumCard(card);\n                const extraDeck = this.fields[playerIndex].extraDeck;\n\n                if (isPendulum) {\n                    extraDeck.unshift(card); // add card to top of extraDeck\n                } else {\n                    extraDeck.push(card);\n                    YGOGameUtils.sortCards(extraDeck);\n                }\n            } else {\n                throw new Error(\"No card to add to Extra Deck\");\n            }\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n\n            console.log(\"MOVE CARD TO DECK \", zone);\n\n            if (!card) {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 1);\n            } else {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 0, card);\n            }\n        } else if (zone === \"GY\" || zone === \"GY2\" || zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const gy = this.fields[playerIndex].graveyard;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    gy.unshift(card);\n                } else {\n                    gy.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    gy.pop();\n                } else {\n                    gy.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone === \"B\" || zone === \"B2\" || zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const banishZone = this.fields[playerIndex].banishedZone;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    banishZone.unshift(card);\n                } else {\n                    banishZone.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    banishZone.pop();\n                } else {\n                    banishZone.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone.startsWith(\"F\") || zone.startsWith(\"F2\")) {\n            this.fields[playerIndex].fieldZone = card;\n        }\n    }\n\n    removeCard(zone: FieldZone): Card | null {\n        const card = this.getCardFromZone(zone);\n        this.setCard(null, zone);\n        // TODO Reset card\n        return card;\n    }\n\n    getCardData(cardId: number): Card | null {\n        return this.cardsInGame.get(cardId) || null;\n    }\n\n    shuffleDeck(player: number) {\n        const deck = this.fields[player].mainDeck;\n        if (deck.length === 0) return; // If the deck is empty, do nothing\n\n        for (let i = deck.length - 1; i > 0; i--) {\n            const cardIndex = Math.floor(Math.random() * (i + 1));\n            [deck[i], deck[cardIndex]] = [deck[cardIndex], deck[i]];\n        }\n    }\n\n    getPlayerIndexFromZone(zone: string): number {\n        return YGOUtils.getPlayerIndexFromZone(zone);\n    }\n\n    getAvailableZones(fieldZones: (\"M\" | \"M2\" | \"S\" | \"S2\" | \"F\" | \"F2\" | \"EMZ\")[]): FieldZone[] {\n        const result: FieldZone[] = [];\n\n        // TODO @RMS  make this player aware\n\n        for (const fieldZone of fieldZones) {\n            const player = this.getPlayerIndexFromZone(fieldZone);\n            const field = this.fields[player];\n            if (fieldZone === \"M\") {\n                field.monsterZone.forEach((data, index) => {\n                    const zone = `M${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"S\") {\n                field.spellTrapZone.forEach((data, index) => {\n                    const zone = `S${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"EMZ\") {\n                for (let i = 0; i < 2; ++i) {\n                    const data = field.extraDeck[i] || field.extraDeck[i];\n                    const zone = `EMZ-${i + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                }\n            } else if (fieldZone === \"F\") {\n                if (field.fieldZone) result.push(\"F\");\n            }\n        }\n\n        return result;\n    }\n}","import { Card, FieldZone, FileldStateEntry as YGOCardFieldState, YGOReplayData } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\nexport class YGOReplayUtils {\n    static createReplayData(ygo: YGOCore): YGOReplayData {\n        const players = ygo.props.players.map((playerData, playerIndex) => {\n            const field = ygo.getField(playerIndex);\n            return {\n                name: playerData.name,\n                mainDeck: field.data.mainDeckOrdered,\n                extraDeck: field.data.extraDeckOrdered,\n            }\n        });\n\n        const commands = ygo.commands.map(cmd => cmd.toJSON());\n        const endField: YGOCardFieldState[] = [];\n        const initialField: YGOCardFieldState[] = [];\n\n        if (ygo.props.options?.fieldState) {\n            ygo.props.options.fieldState.forEach(s => initialField.push(s));\n        }\n\n        for (let playerIndex = 0; playerIndex < ygo.state.fields.length; ++playerIndex) {\n            const field = ygo.getField(playerIndex);\n\n            for (let i = 0; i < field.monsterZone.length; ++i) {\n                if (field.monsterZone[i]) {\n                    const card = field.monsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"M\", playerIndex, i + 1);\n                    endField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.spellTrapZone.length; ++i) {\n                if (field.spellTrapZone[i]) {\n                    const card = field.spellTrapZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"S\", playerIndex, i + 1);\n                    endField.push({ id: card.id, zone });\n                }\n            }\n\n            for (let i = 0; i < field.extraMonsterZone.length; ++i) {\n                if (field.extraMonsterZone[i]) {\n                    const card = field.extraMonsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"EMZ\", playerIndex, i + 1);\n                    endField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.graveyard.length; ++i) {\n                const card = field.graveyard[i];\n                const zone = YGOGameUtils.createZone(\"GY\", playerIndex);\n                endField.push({ id: card.id, zone });\n            }\n\n            for (let i = 0; i < field.banishedZone.length; ++i) {\n                const card = field.banishedZone[i];\n                const zone = YGOGameUtils.createZone(\"B\", playerIndex);\n                const result: any = { id: card.id, zone };\n\n                if (YGOGameUtils.isFaceDown(card)) {\n                    result.position = \"facedown\"\n                }\n\n                endField.push(result);\n            }\n        }\n\n        // todo get end field etc..\n        return {\n            players,\n            commands,\n            initialField,\n            endField\n        }\n    }\n\n    private static getMonsterCardInfo(card: Card, zone: FieldZone): any {\n        const result: any = {\n            id: card.id,\n            zone\n        }\n\n        if (card.atk !== card.currentAtk) {\n            result.atk = card.currentAtk;\n        }\n\n        if (card.def !== card.currentDef) {\n            result.def = card.currentDef;\n        }\n\n        if (card.position !== \"faceup-attack\") {\n            result.position = card.position;\n        }\n\n        if (card.materials.length > 0) {\n            result.materials = card.materials.map(materialCard => ({ id: materialCard.id })); // TODO OWner of the card\n        }\n\n        return result;\n    }\n}","import { JSONCommand } from \"../commands/JSONCommand\";\nimport { StartHandCommand } from \"../commands/StartHandCommand\";\nimport { Command } from \"../types/commands\";\nimport { PlayerField, YGOCoreEvents, YGOPhase, YGOProps } from \"../types/types\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelLog } from \"./YGODuelLog\";\nimport { YGOGameState } from \"./YGOGameState\";\nimport { YGOReplayUtils } from \"./YGOReplayUtils\";\nimport { YGOUtils } from \"./YGOUtils\";\n\nexport class YGOCore {\n    // private\n    private commandId: number;\n    // public\n    public currentPlayer: number;\n    public phase: YGOPhase;\n    public props: YGOProps;\n    public state: YGOGameState;\n    public commands: Command[];\n    public commandIndex: number = -1;\n    public duelLog: YGODuelLog;\n    public events: EventBus<YGOCoreEvents>;\n\n    constructor(props: YGOProps) {\n        this.props = props;\n        this.state = new YGOGameState(props);\n        this.duelLog = new YGODuelLog();\n        this.events = new EventBus<YGOCoreEvents>();\n        this.commands = this.createYGOCommands(props.commands);\n        this.commandId = 0;\n        /// game\n        this.currentPlayer = 0;\n        this.phase = YGOPhase.DrawPhase;\n        // events\n        this.duelLog.events.on(\"new-log\", data => this.events.dispatch(\"new-log\", data));\n        this.duelLog.events.on(\"update-logs\", data => this.events.dispatch(\"update-logs\", data));\n    }\n\n    start() {\n        const { draw: cardsToDrawInStart = 5 } = this.props.options || {};\n\n        if (this.commands.length === 0) {\n            this.props.players.forEach((_, player) => {\n                this.exec(new StartHandCommand({\n                    player,\n                    numberOfCards: cardsToDrawInStart\n                }));\n            });\n        }\n    }\n\n    setCurrentPlayer(player: number) {\n        if (player < 0 || player > 1) throw new Error(`invalid player ${player}`);\n\n        this.currentPlayer = player;\n        this.events.dispatch(\"set-player\", { player });\n    }\n\n    exec(command: Command): Command {\n        if (this.hasNextCommand()) {\n            this.commands.splice(this.commandIndex + 1, this.commands.length - this.commandIndex);\n        }\n        this.commandIndex = this.commands.length;\n        this.commands.push(command);\n        command.init(this);\n        this.events.dispatch(\"command-created\", { command });\n        command.exec();\n        this.events.dispatch(\"command-executed\", { command });\n        return command;\n    }\n\n    peek(): Command | null {\n        return this.commands.length > 0 ? this.commands[this.commands.length - 1] : null;\n    }\n\n    redo(): Command | null {\n        if (!this.hasNextCommand()) return null;\n        this.commandIndex++;\n        const cmdToRedo = this.commands[this.commandIndex];\n        cmdToRedo.exec();\n        this.duelLog.onLogsUpdated();\n        this.events.dispatch(\"command-redo\", { command: cmdToRedo });\n\n        return cmdToRedo;\n    }\n\n    undo(): Command | null {\n        if (!this.hasPrevCommand()) return null;\n\n        const cmdToUndo = this.commands[this.commandIndex];\n        this.duelLog.removeCommand(cmdToUndo);\n        cmdToUndo.undo();\n        this.commandIndex--;\n        this.duelLog.onLogsUpdated();\n        this.events.dispatch(\"command-undo\", { command: cmdToUndo });\n\n        return cmdToUndo;\n    }\n\n    goToCommand(command: Command): boolean {\n\n        const commandIndex = this.commands.findIndex(c => c === command);\n\n        if (commandIndex === -1) return false;\n\n        if (commandIndex === this.commandIndex) return true;\n\n        if (commandIndex > this.commandIndex) {\n            while (this.commandIndex !== commandIndex && this.hasNextCommand()) {\n                this.redo();\n            }\n            return true;\n        } else {\n            while (this.commandIndex !== commandIndex && this.hasPrevCommand()) {\n                this.undo();\n            }\n            return true;\n        }\n    }\n\n    hasNextCommand() {\n        return this.commands.length - 1 > this.commandIndex;\n    }\n\n    hasPrevCommand() {\n        return this.commandIndex >= 0;\n    }\n\n    getNextCommandId() {\n        return ++this.commandId;\n    }\n\n    getReplayData() {\n\n        while (this.hasNextCommand()) {\n            this.redo();\n        }\n\n        return YGOReplayUtils.createReplayData(this);\n    }\n\n    getField(player: number): PlayerField {\n        return this.state.fields[player];\n    }\n\n    private createYGOCommands(commands?: any[]) {\n        this.duelLog.enabled = false;\n\n        if (Array.isArray(commands)) {\n            const loadedCommands = commands.map(cmd => {\n                const command = new JSONCommand(cmd);\n                command.init(this);\n                command.exec();\n                return command;\n            });\n\n            // if true will not undo all the commands passed on constructor\n            // Can be undefined so validate if !== true\n            if (this.props.options?.execCommands !== true) {\n                for (let i = loadedCommands.length - 1; i >= 0; --i) {\n                    loadedCommands[i].undo();\n                }\n            }\n\n            this.duelLog.enabled = true;\n            return loadedCommands;\n        }\n\n        this.duelLog.enabled = true;\n\n        return [];\n    }\n\n    getCurrentStateProps() {\n        return YGOUtils.getYGOCoreStateProps(this);\n    }\n}","import { Commands } from './commands';\n\nexport * from './game/YGOCore';\nexport * from './game/YGODuelLog';\nexport * from './game/YGOGameUtils';\nexport * from './types/duel-events';\nexport * from './commands/JSONCommand';\n\nexport const YGOCommands = Commands;\n\nexport const debug_version = \"1.0.3\";"],"names":["BaseCommand","constructor","this","commandId","parent","init","ygo","YGO","getNextCommandId","getCommandId","_a","undefined","execChildCommand","command","exec","undoChildCommand","undo","undoMultipleChildCommand","commands","i","length","execMultipleChildCommand","isValid","toJSON","data","type","baseType","YGODuelEvents","CardBaseType","YGOPhase","LogType","YGOGameUtils","isLinkMonster","card","typeline","includes","isMonster","isXYZMonster","isSynchroMonster","isFusionMonster","isPendulumCard","frameType","isFaceUp","position","isFaceDown","isSpellTrap","isSpell","isTrap","startsWith","isFieldSpell","race","isDefense","isAttack","hasLinkMonstersInField","field","monsterZone","some","extraMonsterZone","hasXyzMonstersInField","getPlayerIndexFromZone","zone","createZone","player","createOverlayZone","zoneIndex","getZoneData","args","split","playerIndex","zoneId","Number","endsWith","substring","getCardBaseType","EffectMonster","Spell","RitualMonster","Trap","FusionMonster","SynchroMonster","XYZMonster","LinkMonster","NormalMonster","getCardsBaseType","cards","map","c","toSortedCards","sortCards","cardsToSort","cardsWeights","j","name","shuffleCards","positions","Array","index","Math","floor","random","temp","invertPlayerInZone","zoneData","ActivateCardCommand","super","state","getCardById","id","originZone","removeCard","setCard","console","log","prevPosition","duelLog","dispatch","Activate","previousPosition","YGOUtils","parseMainDeck","mainDeck","parseCard","isMainDeckCard","parseExtraDeck","extraDeck","extra","Error","owner","originalOwner","materials","getCardsInGame","fields","Map","has","set","getOverlayZone","initializePlayersFields","props","shuffleDecks","options","cardIndex","lp","hand","mainDeckOrdered","extraDeckOrdered","spellTrapZone","fieldZone","graveyard","banishedZone","players","forEach","recoverFields","fieldState","isArray","cardsToRemoveFromDeck","Set","cardsToRemoveFromExtraDeck","getCard","find","add","edCard","banished","cardInitialState","push","isNumeric","atk","currentAtk","def","currentDef","sort","card1","card2","cardInHand","filter","val","isNaN","getFieldsAsString","field1","getField","field2","join","_b","getYGOCoreStateProps","getCardData","cmd","Object","assign","startCommand","commandIndex","execCommands","XYZMoveMaterialsCommand","materialsToMove","shouldMoveMaterials","overlayZone","material","SendToGY","reason","MoveCardCommand","moveCard","extraDeckIndex","findIndex","BanishCommand","banishCommand","ChangeCardAtkDefCommand","prevAtk","prevDef","ChangeCardPositionCommand","ChangeCardPosition","DestroyCardCommand","moveCardCommand","DrawFromDeckCommand","numberOfCards","pop","DrawCardFromDeck","newCards","reverse","cardInHandIndex","splice","RevealCommand","Reveal","SendCardToGYCommand","FieldSpellCommand","fieldCard","reveal","FlipCommand","Flip","FusionSummonCommand","materialCard","FusionSummon","LinkSummonCommand","LinkSummon","MillFromDeckCommand","max","min","NormalSummonCommand","SetCardCommand","SetMonster","SetST","SetMonsterCommand","ShuffleDeckCommand","cardPositions","Shuffle","SpecialSummonCommand","StartHandCommand","core","shift","numCardsToDraw","handIndex","StartHand","unshift","SynchroSummonCommand","SynchroSummon","TargetCommand","Target","ToDeckCommand","getCommandType","isTopCard","getDeckIndex","shuffle","deckIndex","ToExtraDeckCommand","ToHandCommand","ToSTCommand","TributeSetCommand","tributes","TributeSummonCommand","XYZAttachMaterialCommand","getCardFromZone","materialCardReference","XYZSummon","indexOf","XYZDetachMaterialCommand","materialIndex","XYZDetachMaterial","XYZSummonCommand","XYZMaterialsMove","XYZOverlay","Commands","COMMANDS_BY_NAME","TargetCardCommand","JSONCommand","CommandClass","commandClassName","EventBus","events","on","event","listener","get","listeners","off","l","clear","delete","clearAll","YGODuelLog","enabled","logs","onLogsUpdated","peek","peekCommand","removeCommand","YGOGameState","cardsInGame","moveCardById","cardId","isPendulum","gyIndex","gy","banishZone","shuffleDeck","deck","getAvailableZones","fieldZones","result","YGOReplayUtils","createReplayData","playerData","endField","initialField","s","getMonsterCardInfo","YGOCore","createYGOCommands","currentPlayer","phase","DrawPhase","start","draw","cardsToDrawInStart","_","setCurrentPlayer","hasNextCommand","redo","cmdToRedo","hasPrevCommand","cmdToUndo","goToCommand","getReplayData","loadedCommands","getCurrentStateProps","YGOCommands","debug_version"],"mappings":"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"}