{"version":3,"file":"index.js","sources":["../src/commands/BaseCommand.ts","../src/types/duel-events.ts","../src/types/types.ts","../src/commands/ActivateCardCommand.ts","../src/game/YGOGameUtils.ts","../src/game/YGOUtils.ts","../src/commands/MoveCardCommand.ts","../src/commands/BanishCommand.ts","../src/commands/DestroyCard.ts","../src/commands/DrawFromDeckCommand.ts","../src/commands/SendCardToGY.ts","../src/commands/LinkSummonCommand.ts","../src/commands/MillFromDeckCommand.ts","../src/commands/NormalSummonCommand.ts","../src/commands/RevealCommand.ts","../src/commands/SetCardCommand.ts","../src/commands/SetMonsterCommand.ts","../src/commands/ShuffleDeck.ts","../src/commands/SpecialSummonCommand.ts","../src/commands/ToDeckCommand.ts","../src/commands/ToExtraDeckCommand.ts","../src/commands/ToHandCommand.ts","../src/commands/TributeSetCommand.ts","../src/commands/TributeSummonCommand.ts","../src/commands/XYZAttachMaterialCommand.ts","../src/commands/XYZDetachMaterialCommand.ts","../src/commands/XYZSummonCommand.ts","../src/commands/index.ts","../src/utils/event-bus.ts","../src/game/YGODuelLog.ts","../src/game/YGOGameState.ts","../src/game/YGOReplayUtils.ts","../src/game/YGOCore.ts","../src/index.ts"],"sourcesContent":["import { YGOCore } from \"../game/YGOCore\";\nimport { CommandType, Command } from \"../types/commands\";\n\nexport abstract class BaseCommand implements Command {\n\n    protected YGO!: YGOCore;\n    public type!: CommandType;\n    public commandId: number = -1;\n    public parent: Command | null = null;\n\n    constructor() { }\n\n    init(ygo: YGOCore) {\n        this.YGO = ygo;\n        this.commandId = this.YGO.getNextCommandId();\n    }\n\n    getCommandId() {\n        return this.parent?.commandId || this.commandId;\n    }\n\n    execChildCommand(command: Command): Command | undefined {\n        command.parent = this;\n        command.init(this.YGO);\n        command.exec();\n        return command;\n    }\n\n    undoChildCommand(command: Command | undefined): Command | undefined {\n        command?.undo();\n        return command;\n    }\n\n    undoMultipleChildCommand(commands: Command[]): void {\n        for (let i = commands.length - 1; i >= 0; --i) {\n            commands[i]?.undo();\n        }\n    }\n\n    execMultipleChildCommand(commands: Command[]): void {\n        for (const command of commands) {\n            this.execChildCommand(command);\n        }\n    }\n\n    isValid(): boolean {\n        return true;\n    }\n\n    exec(): void {\n\n    }\n\n    undo(): void {\n\n    }\n\n    toJSON<T extends any = any>(): { type: string, data: T } {\n        const self = this as any;\n        const data = self.data || {};\n        const type: string = (self?.constructor?.name || data.type || \"NO_TYPE\") as string;\n\n        return {\n            type,\n            data,\n        };\n    }\n}","import { CardPosition, FieldZone } from \"./types\";\n\nexport namespace YGODuelEvents {\n    export enum LogType {\n        NormalSummon = \"Normal Summon\",\n        SetMonster = \"Set Monster\",\n        SendToGY = \"Send To GY\",\n        Banish = \"Banish\",\n        BanishFD = \"Banish FD\",\n        DrawCardFromDeck = \"Draw From Deck\",\n        MillCardFromDeck = \"Mill From Deck\",\n        TributeSummon = \"Tribute Summon\",\n        TributeSet = \"Tribute Set\",\n        ToHand = \"To Hand\",\n        ToTopDeck = \"To Top Deck\",\n        ToBottomDeck = \"To Bottom Deck\",\n        SpecialSummon = \"Special Summon\",\n        LinkSummon = \"Link Summon\",\n        XYZSummon = \"XYZ Summon\",\n        XYZAttachMaterial = \"XYZ Attach Material\",\n        XYZDetachMaterial = \"XYZ Detach Material\",\n        XYZOverlay = \"XYZOverlay\",\n        SetST = \"Set ST\",\n        Activate = \"Activate\",\n        ChangeBattlePosition = \"Change Battle Position\",\n        MoveCard = \"Move Card\",\n        Shuffle = \"Shuffle\",\n        ToST = \"To ST\",\n        Reveal = \"Reveal\",\n        Target = \"Target\",\n    }\n\n    export interface DuelLog {\n        type: LogType;\n        player: number;\n        commandId: number;\n    }\n\n    export interface NormalSummon extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface MoveCard extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface ToHand extends MoveCard { }\n\n    export interface SetMonster extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n    }\n\n    export interface SendToGY extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone,\n        reason?: \"Link Summon\" | \"XYZ To GY\" | undefined\n    }\n\n    export interface DrawFromDeck extends DuelLog {\n        id: number,\n        zone: FieldZone\n    }\n\n    export interface LinkSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZSummon extends DuelLog {\n        id: number\n        originZone: FieldZone\n        zone: FieldZone\n        position?: CardPosition\n        materials: Array<{\n            id: number\n            zone: FieldZone\n        }>\n    }\n\n    export interface XYZAttach extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZOverlay extends DuelLog {\n        id: number\n        originZone: FieldZone\n        overlayZone: FieldZone\n    }\n\n    export interface XYZDetach extends DuelLog {\n        id: number\n        overlayZone: FieldZone\n        materialIndex: number\n    }\n\n    export interface Activate extends DuelLog {\n        id: number,\n        originZone?: FieldZone,\n        zone: FieldZone\n    }\n\n    export interface Banish extends DuelLog {\n        id: number;\n        originZone: FieldZone;\n        zone: FieldZone;\n        position: CardPosition;\n    }\n\n    export interface Shuffle extends DuelLog { }\n\n    export interface Reveal extends DuelLog {\n        id: number;\n        zone: FieldZone;\n    }\n\n    export interface Target extends DuelLog {\n        id: number;\n        zone: FieldZone;\n    }\n}\n\n","export const NUM_ZONES: number = 5; // Number of primary zones (Monster, Spell/Trap, etc.)\nexport type PlayerSide = 0 | 1; // 0 represents Player 1, 1 represents Player 2\n\nexport type CardPosition = \"faceup-attack\" | \"faceup-defense\" | \"faceup\" | \"facedown\";\n\nexport type FieldZone = `M-${1 | 2 | 3 | 4 | 5}`\n    | `M2-${1 | 2 | 3 | 4 | 5}`\n    | `S-${1 | 2 | 3 | 4 | 5}`\n    | `S2-${1 | 2 | 3 | 4 | 5}`\n    | `EMZ`\n    | `EMZ2`\n    | `EMZ-${1 | 2}`\n    | `EMZ2-${1 | 2}`\n    | `ORU-${1 | 2 | 3 | 4 | 5}` // Overlay Units ORU Xyz Materials\n    | `ORU2-${1 | 2 | 3 | 4 | 5}`\n    | `ORUEMZ-${1 | 2}` // Xyz Materials in extra monster zone :)\n    | `ORUEMZ2-${1 | 2}`\n    | \"H\"\n    | \"H2\"\n    | `H-${number}`\n    | `H2-${number}`\n    | \"F\"\n    | \"F2\"\n    | \"GY\"\n    | \"GY2\"\n    | `GY-${number}`\n    | `GY2-${number}`\n    | \"B\"\n    | \"B2\"\n    | `B-${number}`\n    | `B2-${number}`\n    | \"D\"\n    | \"D2\"\n    | `D-${number}`\n    | `D2-${number}`\n    | \"ED\"\n    | \"ED2\"\n    | `ED-${number}`\n    | `ED2-${number}`;\n\nexport type FieldZoneId = \"M\" | \"S\" | \"EMZ\" | \"GY\" | \"D\" | \"ED\" | \"B\" | \"F\" | \"ORU\" | \"ORUEMZ\" | \"H\";\n\nexport enum CardBaseType {\n    NormalMonster,\n    EffectMonster,\n    RitualMonster,\n    Spell,\n    Trap,\n    FusionMonster,\n    SynchroMonster,\n    XYZMonster,\n    LinkMonster,\n}\n\nexport interface YGOProps {\n    players: {\n        name: string,\n        mainDeck: CardData[], // Card Data is the same as https://ygoprodeck.com/api-guide\n        extraDeck: CardData[] // Card Data is the same as https://ygoprodeck.com/api-guide\n        mainDeckOrder?: number[]\n    }[],\n    commands?: { type: string, data: any }[]\n    options?: {\n        lp?: number, // default `8000`\n        shuffleDecks?: boolean // default value is `true`,\n        fieldState?: FileldStateEntry[][] // default\n    }\n}\n\nexport interface FileldStateEntry {\n    id: number,\n    zone: FieldZone\n    atk?: number\n    def?: number\n    owner?: number\n    position?: CardPosition\n    materials?: Array<number>\n}\n\nexport interface CardData {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    attribute: string\n    card_images: any\n}\n\nexport interface Card {\n    id: number\n    name: string\n    typeline: string[]\n    type: string\n    frameType: string\n    desc: string,\n    race: string,\n    atk: number\n    def: number\n    level: number\n    attribute: string\n    card_images: any\n    // game_data\n    index: number // internal unique ID\n    owner: number\n    isMainDeckCard: boolean\n    originalOwner: number\n    position: CardPosition\n    currentAtk: number\n    currentDef: number\n    materials: Card[]\n}\n\nexport interface PlayerInfo {\n    name: string;\n}\n\nexport interface PlayerField {\n    lp: number,\n    player: PlayerInfo\n    mainDeck: Card[]\n    extraDeck: Card[]\n    hand: Card[]\n    initialHandSize: number;\n    initialMainDeckOrder: number[];\n    graveyard: Card[]\n    banishedZone: Card[]\n    // Zones on the field where cards are actively played\n    monsterZone: Array<Card | null>\n    spellTrapZone: Array<Card | null>\n    fieldZone: Card | null;\n    extraMonsterZone: Array<Card | null>;\n}\n\nexport interface GameState {\n    players: PlayerInfo[];\n    fields: PlayerField[];\n}\n","import { BaseCommand } from './BaseCommand';\nimport { ActivateCardCommandData } from '../types/commands';\nimport { Card, CardPosition } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class ActivateCardCommand extends BaseCommand {\n    private data: ActivateCardCommandData;\n    private prevPosition: CardPosition | undefined;\n\n    constructor(data: ActivateCardCommandData) {\n        super();\n        this.type = \"Activate\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone || this.data.zone)!;\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.originZone);\n            this.YGO.state.setCard(card, this.data.zone);\n\n            console.log(`Exec: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Exec: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        this.prevPosition = card.position;\n\n        if (card.type === \"Spell Card\" || card.type === \"Trap Card\") {\n            card.position = \"faceup\";\n        }\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.Activate>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.Activate,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.data.originZone) {\n            this.YGO.state.removeCard(this.data.originZone);\n            this.YGO.state.setCard(card, this.data.zone);\n\n            console.log(`Undo: Activate ${this.data.id} from ${this.data.originZone} in ${this.data.zone}`);\n        } else {\n            console.log(`Undo: Activate ${this.data.id} in ${this.data.zone}`);\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n    }\n}","import { Card, CardBaseType, FieldZone, FieldZoneId, PlayerField } from \"../types/types\";\n\n// Only functions for game utils\nexport class YGOGameUtils {\n\n    static isLinkMonster(card: Card): boolean {\n        return card.typeline?.includes(\"Link\");\n    }\n\n    static isXYZMonter(card: Card) {\n        return card.typeline?.includes(\"Xyz\");\n    }\n\n    static isPendulumCard(card: Card) {\n        return card.frameType?.includes(\"pendulum\");\n    }\n\n    static isFaceUp(card: Card): boolean {\n        return card.position === \"faceup\" || card.position === \"faceup-attack\";\n    }\n\n    static isFaceDown(card: Card): boolean {\n        return !this.isFaceUp(card);\n    }\n\n    static hasLinkMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isLinkMonster(card) : false);\n    }\n\n    static hasXyzMonstersInField(field: PlayerField) {\n\n        if (field.monsterZone.some(card => card ? YGOGameUtils.isXYZMonter(card) : false)) {\n            return true;\n        }\n\n        return field.extraMonsterZone.some(card => card ? YGOGameUtils.isXYZMonter(card) : false);\n    }\n\n    static getPlayerIndexFromZone(zone: string): (0 | 1) {\n        const isPlayer2 = zone.includes(\"2-\");\n\n        if (isPlayer2) return 1;\n\n        switch (zone) {\n            case \"M2\":\n            case \"H2\":\n            case \"F2\":\n            case \"GY2\":\n            case \"EMZ2-1\":\n            case \"EMZ2-2\":\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    static createZone(zone: FieldZoneId, player: number, position?: number): FieldZone {\n\n        if (position === undefined) {\n            return `${zone}${player === 0 ? '' : '2'}` as FieldZone;\n        }\n\n        return `${zone}${player === 0 ? '' : '2'}-${position}` as FieldZone;\n    }\n\n    static getZoneInfo(zone: FieldZone): { zone: FieldZoneId, player: 0 | 1, zonePosition: number | null } {\n        const args = zone.split(\"-\");\n        let playerIndex = 0;\n        let zoneId = args[0];\n        const position = args.length > 1 ? Number(args[1]) : null;\n\n        if (args[0].endsWith(\"2\")) {\n            playerIndex = 1;\n            zoneId = zoneId.substring(0, zoneId.length - 1);\n        }\n\n        return {\n            zone: zoneId as FieldZoneId,\n            player: playerIndex as any,\n            zonePosition: position\n        }\n    }\n\n    static getCardBaseType(card: Card): CardBaseType {\n        if (card.frameType.startsWith(\"effect\")) return CardBaseType.EffectMonster;\n        if (card.frameType.startsWith(\"spell\")) return CardBaseType.Spell;\n        if (card.frameType.startsWith(\"ritual\")) return CardBaseType.RitualMonster;\n        if (card.frameType.startsWith(\"trap\")) return CardBaseType.Trap;\n        if (card.frameType.includes(\"fusion\")) return CardBaseType.FusionMonster;\n        if (card.frameType.includes(\"synchro\")) return CardBaseType.SynchroMonster;\n        if (card.frameType.includes(\"xyz\")) return CardBaseType.XYZMonster;\n        if (card.frameType.includes(\"link\")) return CardBaseType.LinkMonster;\n        return CardBaseType.NormalMonster;\n    }\n\n    static getCardsBaseType(cards: Card[]): CardBaseType[] {\n        const result = cards.map(c => YGOGameUtils.getCardBaseType(c));\n        return result;\n    }\n\n    static toSortedCards(cards: Card[]) {\n        return this.sortCards([...cards]);\n    }\n\n    static sortCards(cardsToSort: Card[]) {\n        const cards = cardsToSort;\n        const cardsWeights = YGOGameUtils.getCardsBaseType(cards);\n\n        for (let i = 0; i < cards.length - 1; ++i) {\n            for (let j = 0; j < cards.length - i - 1; ++j) {\n                if (cardsWeights[j] > cardsWeights[j + 1] || (cardsWeights[j] === cardsWeights[j + 1] && cards[j].name > cards[j + 1].name)) {\n                    [cards[j], cards[j + 1]] = [cards[j + 1], cards[j]];\n                    [cardsWeights[j], cardsWeights[j + 1]] = [cardsWeights[j + 1], cardsWeights[j]];\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static shuffleCards(cards: Card[]): Array<number> {\n        const positions = Array<number>(cards.length);\n        for (let i = 0; i < cards.length; ++i) {\n            const index = Math.floor(Math.random() * cards.length);\n\n            positions[i] = index;\n\n            const temp = cards[i];\n            cards[i] = cards[index];\n            cards[index] = temp;\n        }\n        return positions;\n    }\n}","import { COMMANDS_BY_NAME } from \"../commands\";\nimport { Card, FieldZone, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\n// Only internal functions for game utils\nexport class YGOUtils {\n    static getPlayerIndexFromZone(zone: string): (0 | 1) {\n        return YGOGameUtils.getPlayerIndexFromZone(zone);\n    }\n\n    static parseMainDeck({ mainDeck, player }: { mainDeck: Card[], player: number }): Card[] {\n        return mainDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: true }));\n    }\n\n    static parseExtraDeck({ extraDeck, player }: { extraDeck: Card[], player: number }): Card[] {\n        const extra = extraDeck.map(card => YGOUtils.parseCard({ card, player, isMainDeckCard: false }));\n        YGOGameUtils.sortCards(extra);\n        return extra;\n    }\n\n    static parseCard({ card, player, isMainDeckCard }: { card: Card, player: number, isMainDeckCard: boolean }): Card {\n        card.owner = player;\n        card.originalOwner = player;\n        card.materials = [];\n        card.isMainDeckCard = isMainDeckCard;\n        card.position = \"facedown\";\n        return card;\n    }\n\n    static getCardsInGame(fields: PlayerField[]): Map<number, Card> {\n        const cards = new Map<number, Card>()\n\n        for (const field of fields) {\n            for (const card of field.mainDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n\n            for (const card of field.extraDeck) {\n                if (!cards.has(card.id)) {\n                    cards.set(card.id, card);\n                }\n            }\n        }\n\n        return cards;\n    }\n\n    static getOverlayZone(zone: FieldZone): FieldZone {\n        const playerIndex = YGOUtils.getPlayerIndexFromZone(zone);\n        const zoneIndex = zone.split(\"-\")[1];\n\n        if (zone.startsWith(\"EMZ\")) {\n            return `ORU${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n        }\n\n        return `ORUEMZ${playerIndex === 0 ? '' : '2'}-${zoneIndex}` as FieldZone;\n    }\n\n    static initializePlayersFields(props: YGOProps): [PlayerField, PlayerField] {\n        const { shuffleDecks = true } = props.options || {};\n        let cardIndex = 0;\n\n        const field1: PlayerField = {\n            lp: 8000,\n            player: { name: \"test\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            initialHandSize: 5,\n            initialMainDeckOrder: [],\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        };\n\n        const field2: PlayerField = {\n            lp: 8000,\n            player: { name: \"test2\" },\n            mainDeck: [],\n            extraDeck: [],\n            hand: [],\n            initialMainDeckOrder: [],\n            initialHandSize: 5,\n            monsterZone: [null, null, null, null, null],\n            spellTrapZone: [null, null, null, null, null],\n            fieldZone: null,\n            extraMonsterZone: [null, null],\n            graveyard: [],\n            banishedZone: [],\n        }\n\n        const fields: [PlayerField, PlayerField] = [field1, field2];\n\n        for (let playerIndex = 0; playerIndex < props.players.length; ++playerIndex) {\n            const player = props.players[playerIndex];\n            const field = fields[playerIndex];\n            field.initialMainDeckOrder = player.mainDeck.map((_, index) => index);\n            field.mainDeck = YGOUtils.parseMainDeck({ mainDeck: player.mainDeck as Card[], player: playerIndex });\n            field.extraDeck = YGOUtils.parseExtraDeck({ extraDeck: player.extraDeck as Card[], player: playerIndex });\n            field.mainDeck.forEach(card => card.index = ++cardIndex);\n            field.extraDeck.forEach(card => card.index = ++cardIndex);\n\n            if (player.mainDeckOrder) {\n                for (let i = 0; i < player.mainDeckOrder.length; ++i) {\n                    const swapIndex = player.mainDeckOrder[i];\n                    const temp = field.mainDeck[swapIndex];\n                    field.mainDeck[swapIndex] = field.mainDeck[i];\n                    field.mainDeck[i] = temp;\n                }\n            }\n        }\n\n        if (shuffleDecks) {\n            fields.forEach((field, playerIndex) => {\n                if (props.players[playerIndex]) {\n                    field.initialMainDeckOrder = props.players[playerIndex].mainDeckOrder || YGOGameUtils.shuffleCards(field.mainDeck)\n                }\n            });\n        }\n\n        return fields;\n    }\n\n    static getFieldsAsString(ygo: YGOCore) {\n        const log = [];\n\n        log.push(\"---- FIELD STATE ----\");\n\n        const field1 = ygo.getField(0);\n        const field2 = ygo.getField(1);\n\n        log.push(\"Player2: \" + field1.player.name);\n        log.push(\"Hand: \" + field2.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field2.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Monster Zone: \" + field2.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"-------\");\n        log.push(\"Extra Monster Zone: \" + ((field1.extraMonsterZone[0] || field2.extraMonsterZone[0])?.name || \"_\") + \" | \" + ((field1.extraMonsterZone[1] || field2.extraMonsterZone[1])?.name || \"_\"));\n        log.push(\"-------\");\n        log.push(\"Monster Zone: \" + field1.monsterZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Spell/Trap Zone: \" + field1.spellTrapZone.map(c => c?.name || \"_\").join(\" | \"));\n        log.push(\"Hand: \" + field1.hand.map(c => c.name).join(\" | \"));\n        log.push(\"Player1: \" + field1.player.name);\n\n        return log.join(\"\\n\");\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { MoveCardCommandData } from '../types/commands';\nimport { Card, CardPosition, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MoveCardCommand extends BaseCommand {\n    public data: MoveCardCommandData;\n\n    private prevPosition!: CardPosition;\n    private materialsToGY: Card[];\n\n    constructor(data: MoveCardCommandData) {\n        super();\n        const type = data.type || \"Move Card\";\n        this.type = type;\n        this.data = data;\n        this.materialsToGY = [];\n        this.data.type = type;\n    }\n\n    override exec(): void {\n        console.log(`Exec: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n        const { log = true } = this.data;\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        if (this.data.zone === \"ED\" || this.data.zone === \"ED2\") {\n            this.data.position = YGOGameUtils.isPendulumCard(card) ? \"faceup\" : \"facedown\";\n        }\n\n        if (this.data.position) {\n            this.prevPosition = card.position;\n            card.position = this.data.position;\n        }\n\n        // XYZ send materials to GY if send card to Gy or banish\n        if (this.sendMaterialsToGy(card, this.data.zone)) {\n            const overlayZone = YGOUtils.getOverlayZone(this.data.originZone);\n            this.materialsToGY = card.materials;\n            card.materials.forEach(material => {\n                this.YGO.state.setCard(material, \"GY\");\n                this.YGO.duelLog.dispatch<YGODuelEvents.SendToGY>({\n                    player: this.data.player,\n                    commandId: this.getCommandId(),\n                    type: YGODuelEvents.LogType.SendToGY,\n                    id: material.id,\n                    originZone: overlayZone,\n                    zone: this.data.zone,\n                    reason: \"XYZ To GY\"\n                });\n            });\n            card.materials = [];\n        }\n\n        // TODO IF PENDULUMN send cards to Extra Deck\n        this.YGO.state.moveCard(card, this.data.originZone, this.data.zone);\n\n        if (log) {\n            this.YGO.duelLog.dispatch<any>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: this.type as any,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.data.zone,\n                position: card.position\n            });\n        }\n    }\n\n    override undo(): void {\n        console.log(`Undo: ${this.data.type} ${this.data.id} from: ${this.data.originZone} to: ${this.data.zone}`);\n\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n\n        if (this.materialsToGY.length > 0) {\n            this.materialsToGY.forEach(() => {\n                this.YGO.state.setCard(null, \"GY\");\n            });\n            card.materials = this.materialsToGY;\n        }\n\n        if (this.prevPosition) {\n            card.position = this.prevPosition;\n        }\n\n        this.YGO.state.moveCard(card, this.data.zone, this.data.originZone);\n    }\n\n    private sendMaterialsToGy(card: Card, zone: FieldZone): boolean {\n        if (!card.materials || card.materials.length === 0) return false;\n        if (this.data.zone.startsWith(\"GY\")) return true;\n        if (this.data.zone === \"B\" || this.data.zone === \"B2\") return true;\n        if (this.data.zone.startsWith(\"B-\") || this.data.zone.startsWith(\"B2-\")) return true;\n        return false;\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { BanishCommandData, Command } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class BanishCommand extends BaseCommand {\n    private data: BanishCommandData;\n    private zone: FieldZone;\n    private banishCommand: Command;\n\n    constructor(data: BanishCommandData) {\n        super();\n        this.data = data;\n        this.data.position = this.data.position || \"faceup\"\n        this.type = this.data.position === \"faceup\" ? \"Banish\" : \"Banish FD\";\n        this.zone = `B${this.data.player === 0 ? \"\" : \"2\"}-1`;\n\n        this.banishCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            position: this.data.position,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.banishCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.banishCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, DestroyCardCommandData, SendCardToGYCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class DestroyCardCommand extends BaseCommand {\n    private data: DestroyCardCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: DestroyCardCommandData) {\n        super();\n\n        this.type = \"Destroy\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { DrawFromDeckCommandData } from '../types/commands';\nimport { Card, FieldZone } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class DrawFromDeckCommand extends BaseCommand {\n    private data: DrawFromDeckCommandData;\n    private cards: Card[];\n\n    constructor(data: DrawFromDeckCommandData) {\n        super();\n\n        this.type = \"Draw From Deck\";\n        this.data = data;\n        this.data.numberOfCards = this.data.numberOfCards || 1;\n        this.cards = [];\n    }\n\n    exec(): void {\n        console.log(`Exec: Draw ${this.data.numberOfCards} from Deck`);\n\n        this.cards = [];\n\n        const field = this.YGO.state.fields[this.data.player];\n\n        for (let i = 0; i < this.data.numberOfCards!; ++i) {\n            const card = field.mainDeck.pop()!;\n            console.log(\"DRAW\", card.name);\n            field.hand.push(card);\n            this.cards.push(card);\n            const zone = `H-${field.hand.length}` as FieldZone;\n\n            this.YGO.duelLog.dispatch<YGODuelEvents.DrawFromDeck>({\n                commandId: this.getCommandId(),\n                player: this.data.player,\n                type: YGODuelEvents.LogType.DrawCardFromDeck,\n                id: card.id,\n                zone\n            });\n        }\n    }\n\n    undo(): void {\n        console.log(`Undo: Draw ${this.data.numberOfCards} from Deck`);\n\n        const newCards = [...this.cards].reverse();\n        const field = this.YGO.state.fields[this.data.player];\n\n        console.log(\"CARD DRAW UNDO\");\n        console.log(newCards.map(c => c.name));\n        console.log(\"DECK 1>>\", field.mainDeck.length);\n        for (const card of newCards) {\n            const cardInHandIndex = field.hand.findIndex(c => c === card);\n            if (cardInHandIndex !== -1) {\n                field.hand.splice(cardInHandIndex, 1);\n            }\n        }\n        field.mainDeck.push(...newCards);\n\n        console.log(field.hand.map(c => c.name));\n        console.log(\"DECK 2>>\", field.mainDeck.length);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SendCardToGYCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class SendCardToGYCommand extends BaseCommand {\n    private data: SendCardToGYCommandData;\n    private zone: FieldZone;\n    private moveCardCommand: Command;\n\n    constructor(data: SendCardToGYCommandData) {\n        super();\n\n        this.type = \"Send To GY\";\n        this.data = data;\n        this.zone = data.zone || YGOGameUtils.createZone(\"GY\", this.data.player, 1);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.zone\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, LinkSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { CardPosition } from '../types/types';\n\nexport class LinkSummonCommand extends BaseCommand {\n    private data: LinkSummonCommandData;\n    private commands: Command[];\n    private position: CardPosition;\n\n    constructor(data: LinkSummonCommandData) {\n        super();\n        this.type = \"Link Summon\";\n        this.data = data;\n        this.position = \"faceup-attack\";\n        this.commands = [];\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new SendCardToGYCommand({\n                player: this.data.player,\n                id: material.id,\n                originZone: material.zone,\n                reason: \"Link Summon\"\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        this.execMultipleChildCommand(this.commands);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.LinkSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.LinkSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, MillFromDeckCommandData } from '../types/commands';\nimport { SendCardToGYCommand } from './SendCardToGY';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class MillFromDeckCommand extends BaseCommand {\n    private data: MillFromDeckCommandData;\n    private commands: Command[];\n\n    constructor(data: MillFromDeckCommandData) {\n        super();\n\n        this.type = \"Mill From Deck\";\n        const { numberOfCards = 1 } = data;\n        this.data = data;\n        this.data.numberOfCards = Math.max(1, numberOfCards);\n        this.commands = [];\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const field = this.YGO.getField(this.data.player);\n        const numberOfCards = Math.min(this.data.numberOfCards!, field.mainDeck.length);\n        console.log(this.data);\n        console.log(\"number\", numberOfCards);\n\n        for (let i = 0; i < numberOfCards!; ++i) {\n            const cardIndex = field.mainDeck.length - 1 - i;\n            const card = field.mainDeck[cardIndex];\n\n            console.log(\"WILL MILL \", card.id)\n\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: YGOGameUtils.createZone(\"D\", this.data.player, cardIndex + 1),\n                player: this.data.player\n            }))\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, NormalSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class NormalSummonCommand extends BaseCommand {\n    private data: NormalSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: NormalSummonCommandData) {\n        super();\n        this.type = \"Normal Summon\";\n        this.data = data;\n        this.data.position = \"faceup-attack\";\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { NormalSummonCommandData, RevealCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class RevealCommand extends BaseCommand {\n    private data: RevealCommandData;\n\n    constructor(data: NormalSummonCommandData) {\n        super();\n        this.type = \"Reveal\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        this.YGO.duelLog.dispatch<YGODuelEvents.Reveal>({\n            type: YGODuelEvents.LogType.Reveal,\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            id: this.data.id,\n            zone: this.data.zone\n        })\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetCardCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SetCardCommand extends BaseCommand {\n    private data: SetCardCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SetCardCommandData) {\n        super();\n        this.type = \"Set ST\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"facedown\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, SetMonsterCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SetMonsterCommand extends BaseCommand {\n    private data: SetMonsterCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SetMonsterCommandData) {\n        super();\n        this.type = \"Set Monster\";\n        this.data = data;\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: \"facedown\"\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { ShuffleDeckCommandData } from '../types/commands';\nimport { YGODuelEvents } from '../types/duel-events';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ShuffleDeckCommand extends BaseCommand {\n    private data: ShuffleDeckCommandData;\n    private cardPositions!: Array<number>;\n\n    constructor(data: ShuffleDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = \"Shuffle Deck\";\n    }\n\n    exec(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n\n        if (this.cardPositions) {\n            for (let i = 0; i < this.cardPositions.length; ++i) {\n                const index = this.cardPositions[i];\n                const temp = mainDeck[index];\n                mainDeck[index] = mainDeck[i];\n                mainDeck[i] = temp;\n            }\n        } else {\n            this.cardPositions = YGOGameUtils.shuffleCards(mainDeck);\n        }\n\n        if (this.data.log !== false) {\n            this.YGO.duelLog.dispatch<YGODuelEvents.Shuffle>({\n                player: this.data.player,\n                commandId: this.getCommandId(),\n                type: YGODuelEvents.LogType.Shuffle\n            });\n        }\n    }\n\n    undo(): void {\n        const mainDeck = this.YGO.state.fields[this.data.player].mainDeck;\n        for (let i = 0; i < this.cardPositions.length; ++i) {\n            const index = this.cardPositions[i];\n            const temp = mainDeck[index];\n            mainDeck[index] = mainDeck[i];\n            mainDeck[i] = temp;\n        }\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { Command, SpecialSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\n\nexport class SpecialSummonCommand extends BaseCommand {\n    private data: SpecialSummonCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: SpecialSummonCommandData) {\n        super();\n        this.type = \"Special Summon\";\n        this.data = data;\n        this.data.position = this.data.position || 'faceup-attack';\n\n        if (this.data.position !== 'faceup-attack'\n            && this.data.position !== 'faceup-defense') {\n            this.data.position = 'faceup-attack';\n        }\n\n        console.log(this.data);\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: \"Special Summon\",\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        });\n    }\n\n    exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToDeckCommandData } from '../types/commands';\nimport { FieldZone } from '../types/types';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { ShuffleDeckCommand } from './ShuffleDeck';\nimport { YGOCore } from '../game/YGOCore';\n\nexport class ToDeckCommand extends BaseCommand {\n    private data: ToDeckCommandData;\n    private zone!: FieldZone;\n    private commands!: Command[];\n\n    constructor(data: ToDeckCommandData) {\n        super();\n        this.data = data;\n        this.type = this.getCommandType();\n    }\n\n    private isTopCard() {\n        return this.data.position === \"top\";\n    }\n\n    private getCommandType() {\n        return this.isTopCard() ? \"To Top Deck\" : \"To Bottom Deck\";\n    }\n\n    private getDeckIndex(): number {\n        const mainDeck = this.YGO.state.fields[0].mainDeck;\n\n        if (this.isTopCard()) {\n            return mainDeck.length + 1;\n        }\n\n        return 1;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        if (!this.commands) {\n            const deckIndex = this.getDeckIndex();\n            this.zone = `D${this.data.player === 0 ? \"\" : \"2\"}-${deckIndex}`;\n            this.commands = [];\n            this.commands.push(new MoveCardCommand({\n                player: this.data.player,\n                type: this.type,\n                id: this.data.id,\n                originZone: this.data.originZone,\n                zone: this.zone,\n                //position: \"facedown\", // TODO DECIDE\n            }));\n\n            const { shuffle = false } = this.data;\n\n            if (shuffle) {\n                this.commands.push(new ShuffleDeckCommand({ player: this.data.player }));\n            }\n        }\n    }\n\n    exec(): void {\n        this.execMultipleChildCommand(this.commands);\n    }\n\n    undo(): void {\n        this.undoMultipleChildCommand(this.commands);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToExtraDeckCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToExtraDeckCommand extends BaseCommand {\n    private data: ToExtraDeckCommandData;\n    private moveCardCommand: Command;\n\n    constructor(data: ToExtraDeckCommandData) {\n        super();\n        this.type = \"Normal Summon\";\n        this.data = data;\n\n        this.moveCardCommand = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"ED\", this.data.player)\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.moveCardCommand);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.moveCardCommand);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, ToHandCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { YGOCore } from '../game/YGOCore';\nimport { YGOGameUtils } from '../game/YGOGameUtils';\n\nexport class ToHandCommand extends BaseCommand {\n    private data: ToHandCommandData;\n    private command!: Command;\n\n    constructor(data: ToHandCommandData) {\n        super();\n        this.type = \"To Hand\";\n        this.data = data;\n    }\n\n    override init(ygo: YGOCore): void {\n        super.init(ygo);\n\n        const handIndex = this.YGO.getField(this.data.player).hand.length + 1;\n\n        this.command = new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: YGOGameUtils.createZone(\"H\", this.data.player, handIndex),\n            position: \"facedown\"\n        });\n    }\n\n    override exec(): void {\n        this.execChildCommand(this.command);\n    }\n\n    override undo(): void {\n        this.undoChildCommand(this.command);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSetCommand extends BaseCommand {\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n\n    constructor(data: TributeSummonCommandData) {\n        super();\n\n        this.type = \"Tribute Set\";\n        this.data = data;\n        this.data.position = \"facedown\";\n\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, TributeSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { SendCardToGYCommand } from './SendCardToGY';\n\nexport class TributeSummonCommand extends BaseCommand {\n    private data: TributeSummonCommandData;\n    private commands: Command[];\n    \n    constructor(data: TributeSummonCommandData) {\n        super();\n        this.type = \"Tribute Summon\";\n        this.data = data;\n        this.data.position = this.data.position || \"faceup-attack\";\n        this.commands = [];\n\n        this.data.tributes.forEach(card => {\n            this.commands.push(new SendCardToGYCommand({\n                id: card.id,\n                originZone: card.zone,\n                player: this.data.player\n            }))\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position\n        }));\n    }\n\n    exec(): void {\n        this.commands.forEach(cmd => this.execChildCommand(cmd));\n    }\n\n    undo(): void {\n        this.commands.forEach(cmd => this.undoChildCommand(cmd));\n    }\n}\n","import { BaseCommand } from './BaseCommand';\nimport { XYZAttachCommandData as XYZAttachMaterialCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZAttachMaterialCommand extends BaseCommand {\n    private data: XYZAttachMaterialCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZAttachMaterialCommandData) {\n        super();\n        this.type = \"XYZ Attach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n        this.YGO.state.setCard(null, this.data.originZone);\n        card.materials.push(this.materialCardReference);\n\n        console.log(\"TCL:: EXEC ATTACH:: \", this.materialCardReference.name, this.data.originZone);\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZAttach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZSummon,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.YGO.state.setCard(this.materialCardReference, this.data.originZone);\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { XYZDetachCommandData } from '../types/commands';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { Card } from '../types/types';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZDetachMaterialCommand extends BaseCommand {\n    private data: XYZDetachCommandData;\n    private materialCardReference!: Card;\n\n    constructor(data: XYZDetachCommandData) {\n        super();\n        this.type = \"XYZ Detach Material\";\n        this.data = data;\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        this.materialCardReference = card.materials[this.data.materialIndex];\n        card.materials.splice(this.data.materialIndex, 1);\n\n        this.YGO.state.setCard(this.materialCardReference, \"GY\");\n\n        const overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZDetach>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: card.id,\n            materialIndex: this.data.materialIndex,\n            overlayZone: overlayZone\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardFromZone(this.data.zone)!;\n        card.materials.splice(card.materials.indexOf(this.materialCardReference), 1);\n        this.YGO.state.setCard(null, \"GY\");\n    }\n}","import { BaseCommand } from './BaseCommand';\nimport { Command, XYZSummonCommandData } from '../types/commands';\nimport { MoveCardCommand } from './MoveCardCommand';\nimport { Card, FieldZone } from '../types/types';\nimport { YGOUtils } from '../game/YGOUtils';\nimport { YGODuelEvents } from '../types/duel-events';\n\nexport class XYZSummonCommand extends BaseCommand {\n    private data: XYZSummonCommandData;\n    private commands: Command[];\n    private overlayZone: FieldZone;\n\n    constructor(data: XYZSummonCommandData) {\n        super();\n        this.type = \"XYZ Summon\";\n        this.data = data;\n        this.commands = [];\n        this.overlayZone = YGOUtils.getOverlayZone(this.data.zone);\n\n        this.data.materials.forEach(material => {\n            this.commands.push(new XYZMaterialsMove({\n                player: this.data.player,\n                overlayZone: this.overlayZone,\n                id: material.id,\n                zone: material.zone\n            }));\n        });\n\n        this.commands.push(new MoveCardCommand({\n            player: this.data.player,\n            type: this.type,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            log: false\n        }));\n    }\n\n    override exec(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.originZone);\n\n        // TODO: @RMS MATERIALS OF MATERIAL ex: nerd to zeus purrely to noir\n\n        card.materials = this.data.materials.map(material => {\n            const materialCard = this.YGO.state.getCardById(material.id, material.zone);\n            return materialCard;\n        });\n\n        this.execMultipleChildCommand(this.commands);\n        \n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZSummon>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZDetachMaterial,\n            id: this.data.id,\n            originZone: this.data.originZone,\n            zone: this.data.zone,\n            position: this.data.position,\n            materials: this.data.materials\n        });\n    }\n\n    override undo(): void {\n        const card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        card.materials = [];\n        this.undoMultipleChildCommand(this.commands);\n    }\n}\n\ninterface XYZMaterialsMoveData {\n    player: number,\n    id: number\n    overlayZone: FieldZone\n    zone: FieldZone\n}\n\nclass XYZMaterialsMove extends BaseCommand {\n    private data: XYZMaterialsMoveData;\n    private card!: Card;\n\n    constructor(data: XYZMaterialsMoveData) {\n        super();\n        this.data = data;\n    }\n\n    exec(): void {\n        this.card = this.YGO.state.getCardById(this.data.id, this.data.zone);\n        this.YGO.state.setCard(null, this.data.zone);\n\n        this.YGO.duelLog.dispatch<YGODuelEvents.XYZOverlay>({\n            player: this.data.player,\n            commandId: this.getCommandId(),\n            type: YGODuelEvents.LogType.XYZOverlay,\n            id: this.data.id,\n            originZone: this.data.zone,\n            overlayZone: this.data.overlayZone\n        });\n    }\n\n    undo(): void {\n        this.YGO.state.setCard(this.card, this.data.zone);\n    }\n}\n","import { ActivateCardCommand } from \"./ActivateCardCommand\";\nimport { BanishCommand } from \"./BanishCommand\";\nimport { DestroyCardCommand } from \"./DestroyCard\";\nimport { DrawFromDeckCommand } from \"./DrawFromDeckCommand\";\nimport { LinkSummonCommand } from \"./LinkSummonCommand\";\nimport { MillFromDeckCommand } from \"./MillFromDeckCommand\";\nimport { NormalSummonCommand } from \"./NormalSummonCommand\";\nimport { RevealCommand } from \"./RevealCommand\";\nimport { SendCardToGYCommand } from \"./SendCardToGY\";\nimport { SetCardCommand } from \"./SetCardCommand\";\nimport { SetMonsterCommand } from \"./SetMonsterCommand\";\nimport { ShuffleDeckCommand } from \"./ShuffleDeck\";\nimport { SpecialSummonCommand } from \"./SpecialSummonCommand\";\nimport { ToDeckCommand } from \"./ToDeckCommand\";\nimport { ToExtraDeckCommand } from \"./ToExtraDeckCommand\";\nimport { ToHandCommand } from \"./ToHandCommand\";\nimport { TributeSetCommand } from \"./TributeSetCommand\";\nimport { TributeSummonCommand } from \"./TributeSummonCommand\";\nimport { XYZAttachMaterialCommand } from \"./XYZAttachMaterialCommand\";\nimport { XYZDetachMaterialCommand } from \"./XYZDetachMaterialCommand\";\nimport { XYZSummonCommand } from \"./XYZSummonCommand\";\n\nexport const Commands = {\n    NormalSummonCommand,\n    SetMonsterCommand,\n    SetCardCommand,\n    SendCardToGYCommand,\n    BanishCommand,\n    DrawFromDeckCommand,\n    MillFromDeckCommand,\n    ActivateCardCommand,\n    SpecialSummonCommand,\n    TributeSummonCommand,\n    TributeSetCommand,\n    LinkSummonCommand,\n    XYZSummonCommand,\n    XYZAttachMaterialCommand,\n    XYZDetachMaterialCommand,\n    ToDeckCommand,\n    ShuffleDeckCommand,\n    DestroyCardCommand,\n    RevealCommand,\n    ToExtraDeckCommand,\n    ToHandCommand\n}\n\nexport const COMMANDS_BY_NAME: any = {\n    \"NormalSummonCommand\": NormalSummonCommand,\n    \"SetMonsterCommand\": SetMonsterCommand,\n    \"SetCardCommand\": SetCardCommand,\n    \"SendCardToGYCommand\": SendCardToGYCommand,\n    \"BanishCommand\": BanishCommand,\n    \"DrawFromDeckCommand\": DrawFromDeckCommand,\n    \"MillFromDeckCommand\": MillFromDeckCommand,\n    \"ActivateCardCommand\": ActivateCardCommand,\n    \"SpecialSummonCommand\": SpecialSummonCommand,\n    \"TributeSummonCommand\": TributeSummonCommand,\n    \"TributeSetCommand\": TributeSetCommand,\n    \"LinkSummonCommand\": LinkSummonCommand,\n    \"XYZSummonCommand\": XYZSummonCommand,\n    \"XYZAttachMaterialCommand\": XYZAttachMaterialCommand,\n    \"XYZDetachMaterialCommand\": XYZDetachMaterialCommand,\n    \"ToDeckCommand\": ToDeckCommand,\n    \"ShuffleDeckCommand\": ShuffleDeckCommand,\n    \"DestroyCardCommand\": DestroyCardCommand,\n    \"RevealCommand\": RevealCommand,\n    \"ToExtraDeckCommand\": ToExtraDeckCommand,\n    \"ToHandCommand\": ToHandCommand,\n}\n\nexport {\n    NormalSummonCommand,\n    SetMonsterCommand,\n    SetCardCommand,\n    SendCardToGYCommand,\n    BanishCommand,\n    DrawFromDeckCommand,\n    MillFromDeckCommand,\n    ActivateCardCommand,\n    SpecialSummonCommand,\n    TributeSummonCommand,\n    TributeSetCommand,\n    LinkSummonCommand,\n    XYZSummonCommand,\n    XYZAttachMaterialCommand,\n    XYZDetachMaterialCommand,\n    ToDeckCommand,\n    ShuffleDeckCommand,\n    DestroyCardCommand,\n    RevealCommand,\n    ToExtraDeckCommand,\n    ToHandCommand\n};","export class EventBus<T extends Record<string, (...args: any[]) => void>> {\n    private events: Map<keyof T, Function[]>;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    on<K extends keyof T>(event: K, listener: T[K]): void {\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n        this.events.get(event)!.push(listener);\n    }\n\n    dispatch<K extends keyof T>(event: K, ...args: Parameters<T[K]>): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            listeners.forEach(listener => listener(...args));\n        }\n    }\n\n    off<K extends keyof T>(event: K, listener: T[K]): void {\n        const listeners = this.events.get(event);\n        if (listeners) {\n            this.events.set(\n                event,\n                listeners.filter(l => l !== listener)\n            );\n        }\n    }\n\n    clear<K extends keyof T>(event: K): void {\n        if (this.events.has(event)) {\n            this.events.delete(event);\n        }\n    }\n\n    clearAll(): void {\n        this.events.clear();\n    }\n}","import { Command } from \"../types/commands\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelEvents } from '../types/duel-events';\n\ntype YGODuelLogEventMap = {\n    'new-log': (log: YGODuelEvents.DuelLog) => void;\n    'update-logs': (logs: YGODuelEvents.DuelLog[]) => void;\n};\n\nexport class YGODuelLog {\n    public logs: YGODuelEvents.DuelLog[];\n    public events: EventBus<YGODuelLogEventMap>;\n\n    constructor() {\n        this.logs = [];\n        this.events = new EventBus();\n    }\n\n    dispatch<T extends YGODuelEvents.DuelLog>(log: T) {\n        this.logs.push(log);\n        this.events.dispatch(\"new-log\", log);\n        this.onLogsUpdated();\n    }\n\n    peek(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length == 0) return null;\n        return this.logs[this.logs.length - 1];\n    }\n\n    peekCommand(): number {\n        if (this.logs.length == 0) return -1;\n        return this.logs[this.logs.length - 1].commandId;\n    }\n\n    pop(): YGODuelEvents.DuelLog | null {\n        if (this.logs.length === 0) return null;\n        return this.logs.pop() as YGODuelEvents.DuelLog;\n    }\n\n    removeCommand(command: Command, args?: { log: boolean }) {\n        for (let i = this.logs.length - 1; i >= 0; --i) {\n            if (this.logs[i].commandId === command.commandId) {\n                this.logs.splice(i, 1);\n            } else {\n                break;\n            }\n        }\n\n        if (args?.log !== false) {\n            this.events.dispatch(\"update-logs\", this.logs);\n        }\n\n        // const lastCommand = this.peekCommand();\n\n        // if (lastCommand === command) {\n        //     this.entries.pop();\n\n        //     if (args?.log !== false) {\n        //         // this.events.dispatch(\"remove\", logEntry);\n        //         this.events.dispatch(\"logs-updated\", this.entries);\n        //     }\n        // }\n    }\n\n    onLogsUpdated() {\n        this.events.dispatch(\"update-logs\", this.logs);\n    }\n}","import { Card, FieldZone, FileldStateEntry, PlayerField, YGOProps } from \"../types/types\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\nimport { YGOUtils } from \"./YGOUtils\";\n\nexport class YGOGameState {\n    public fields: PlayerField[];\n    private cardsInGame: Map<number, Card>;\n\n    constructor(props: YGOProps) {\n        this.fields = YGOUtils.initializePlayersFields(props);\n        this.cardsInGame = YGOUtils.getCardsInGame(this.fields);\n    }\n\n    getCardById(id: number, zone: FieldZone): Card {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone === \"GY\" || zone === \"GY2\") {\n            const card = this.fields[playerIndex].graveyard.find(c => c.id === id);\n\n            if (!card) {\n                throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n            }\n\n            return card;\n        }\n\n        const card = this.getCardFromZone(zone);\n\n        if (card && card.id === id) return card;\n\n        throw new Error(`card \"${id}\" not found in \"${zone}\"`);\n    }\n\n    getCardFromZone(zone: FieldZone): Card | null {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].hand[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].monsterZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].spellTrapZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].graveyard[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].banishedZone[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].mainDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"ED-\") || zone.startsWith(\"ED2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraDeck[zoneIndex];\n            return card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            const card = this.fields[playerIndex].extraMonsterZone[zoneIndex];\n            return card;\n        }\n\n        return null;\n    }\n\n    moveCardById(cardId: number, originZone: FieldZone, zone: FieldZone) {\n        const card = this.getCardById(cardId, originZone);\n        this.moveCard(card, originZone, zone);\n    }\n\n    moveCard(card: Card, originZone: FieldZone, zone: FieldZone) {\n        this.removeCard(originZone);\n        this.setCard(card, zone);\n    }\n\n    setCard(card: Card | null, zone: FieldZone): void {\n        const playerIndex = zone.includes(\"2-\") ? 1 : 0;\n\n        if (zone.startsWith(\"H-\") || zone.startsWith(\"H2-\") || zone === \"H\" || zone === \"H2\") {\n            const handIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const hand = this.fields[playerIndex].hand;\n\n            if (handIndex == -1 && card) {\n                hand.push(card);\n            } else if (card) {\n                if (handIndex >= hand.length) {\n                    hand.push(card);\n                } else {\n                    hand.splice(handIndex, 0, card);\n                }\n            } else {\n                hand.splice(handIndex, 1);\n            }\n        } else if (zone.startsWith(\"M-\") || zone.startsWith(\"M2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].monsterZone[zoneIndex] = card;\n            // todo check if monster etc \n        } else if (zone.startsWith(\"S-\") || zone.startsWith(\"S2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].spellTrapZone[zoneIndex] = card;\n        } else if (zone.startsWith(\"EMZ-\") || zone.startsWith(\"EMZ2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n            this.fields[playerIndex].extraMonsterZone[zoneIndex] = card;\n        }\n        else if (zone.startsWith(\"ED\") || zone.startsWith(\"ED2\")) { // append to extra\n            if (zone.indexOf(\"-\") !== -1) {\n                const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n                if (!card) {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 1);\n                } else {\n                    this.fields[playerIndex].extraDeck.splice(zoneIndex, 0, card);\n                }\n            } else if (card) {\n                const isPendulum = card.isMainDeckCard && YGOGameUtils.isPendulumCard(card);\n                const extraDeck = this.fields[playerIndex].extraDeck;\n\n                if (isPendulum) {\n                    extraDeck.unshift(card); // add card to top of extraDeck\n                } else {\n                    const weight = YGOGameUtils.getCardBaseType(card);\n                    const index = extraDeck.findIndex(c => {\n                        const weight2 = YGOGameUtils.getCardBaseType(c);\n                        return weight < weight2 || (weight === weight2 && card.name < c.name);\n                    });\n\n                    if (index !== -1) {\n                        extraDeck.splice(index, 0, card);\n                    } else {\n                        extraDeck.push(card);\n                    }\n                }\n            } else {\n                throw new Error(\"No card to add to Extra Deck\");\n            }\n        } else if (zone.startsWith(\"D-\") || zone.startsWith(\"D2-\")) {\n            const zoneIndex = Number(zone.split(\"-\").pop()) - 1;\n\n            console.log(\"MOVE CARD TO DECK \", zone);\n\n            if (!card) {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 1);\n            } else {\n                this.fields[playerIndex].mainDeck.splice(zoneIndex, 0, card);\n            }\n        } else if (zone === \"GY\" || zone === \"GY2\" || zone.startsWith(\"GY-\") || zone.startsWith(\"GY2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const gy = this.fields[playerIndex].graveyard;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    gy.unshift(card);\n                } else {\n                    gy.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    gy.pop();\n                } else {\n                    gy.splice(gyIndex, 1);\n                }\n            }\n        } else if (zone === \"B\" || zone === \"B2\" || zone.startsWith(\"B-\") || zone.startsWith(\"B2-\")) {\n            const gyIndex = zone.includes(\"-\") ? Number(zone.split(\"-\").pop()) - 1 : -1;\n            const banishZone = this.fields[playerIndex].banishedZone;\n\n            if (card) {\n                if (gyIndex === -1) {\n                    banishZone.unshift(card);\n                } else {\n                    banishZone.splice(gyIndex, 0, card);\n                }\n            } else {\n                if (gyIndex == -1) {\n                    banishZone.pop();\n                } else {\n                    banishZone.splice(gyIndex, 1);\n                }\n            }\n        }\n    }\n\n    removeCard(zone: FieldZone): Card | null {\n        const card = this.getCardFromZone(zone);\n        this.setCard(null, zone);\n        // TODO Reset card\n        return card;\n    }\n\n    getCardData(cardId: number): Card | null {\n        return this.cardsInGame.get(cardId) || null;\n    }\n\n    shuffleDeck(player: number) {\n        const deck = this.fields[player].mainDeck;\n        if (deck.length === 0) return; // If the deck is empty, do nothing\n\n        for (let i = deck.length - 1; i > 0; i--) {\n            const cardIndex = Math.floor(Math.random() * (i + 1));\n            [deck[i], deck[cardIndex]] = [deck[cardIndex], deck[i]];\n        }\n    }\n\n    getPlayerIndexFromZone(zone: string): 0 | 1 {\n        return YGOUtils.getPlayerIndexFromZone(zone);\n    }\n\n    getAvailableZones(fieldZones: (\"M\" | \"M2\" | \"S\" | \"S2\" | \"F\" | \"F2\" | \"EMZ\")[]): FieldZone[] {\n        const result: FieldZone[] = [];\n\n        for (const fieldZone of fieldZones) {\n            const player = this.getPlayerIndexFromZone(fieldZone);\n            const field = this.fields[player];\n            if (fieldZone === \"M\") {\n                field.monsterZone.forEach((data, index) => {\n                    const zone = `M${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"S\") {\n                field.spellTrapZone.forEach((data, index) => {\n                    const zone = `S${player === 0 ? \"\" : \"2\"}-${index + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                });\n            } else if (fieldZone === \"EMZ\") {\n                for (let i = 0; i < 2; ++i) {\n                    const data = this.fields[0].extraDeck[i] || this.fields[0].extraDeck[i];\n                    const zone = `EMZ-${i + 1}`;\n                    if (!data) result.push(zone as FieldZone);\n                }\n            }\n        }\n\n        return result;\n    }\n}","import { Card, FieldZone } from \"../types/types\";\nimport { YGOCore } from \"./YGOCore\";\nimport { YGOGameUtils } from \"./YGOGameUtils\";\n\nexport class YGOReplayUtils {\n    static createReplayData(ygo: YGOCore) {\n        const players = ygo.props.players.map((playerData, playerIndex) => {\n            return {\n                name: playerData.name,\n                deck: playerData.mainDeck.map(c => c.id),\n                mainDeckOrder: ygo.getField(playerIndex).initialMainDeckOrder,\n                extraDeck: playerData.mainDeck.map(c => c.id),\n            }\n        });\n\n        const commands = ygo.commands.map(cmd => cmd.toJSON());\n\n        const endField: any = [];\n\n        for (let playerIndex = 0; playerIndex < ygo.state.fields.length; ++playerIndex) {\n            const playerEndField: any = [];\n            const field = ygo.getField(playerIndex);\n\n            for (let i = 0; i < field.monsterZone.length; ++i) {\n                if (field.monsterZone[i]) {\n                    const card = field.monsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"M\", playerIndex, i + 1);\n                    playerEndField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.spellTrapZone.length; ++i) {\n                if (field.spellTrapZone[i]) {\n                    const card = field.spellTrapZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"S\", playerIndex, i + 1);\n                    playerEndField.push({ id: card.id, zone });\n                }\n            }\n\n            for (let i = 0; i < field.extraMonsterZone.length; ++i) {\n                if (field.extraMonsterZone[i]) {\n                    const card = field.extraMonsterZone[i]!;\n                    const zone = YGOGameUtils.createZone(\"EMZ\", playerIndex, i + 1);\n                    playerEndField.push(this.getMonsterCardInfo(card, zone));\n                }\n            }\n\n            for (let i = 0; i < field.graveyard.length; ++i) {\n                const card = field.graveyard[i];\n                const zone = YGOGameUtils.createZone(\"GY\", playerIndex);\n                playerEndField.push({ id: card.id, zone });\n            }\n\n            for (let i = 0; i < field.banishedZone.length; ++i) {\n                const card = field.banishedZone[i];\n                const zone = YGOGameUtils.createZone(\"B\", playerIndex);\n                const result: any = { id: card.id, zone };\n\n                if (YGOGameUtils.isFaceDown(card)) {\n                    result.position = \"facedown\"\n                }\n\n                playerEndField.push(result);\n            }\n\n            endField.push(playerEndField);\n        }\n\n        // todo get end field etc..\n        return {\n            players,\n            commands,\n            endField\n        }\n    }\n\n    private static getMonsterCardInfo(card: Card, zone: FieldZone): any {\n        const result: any = {\n            id: card.id,\n            zone\n        }\n\n        if (card.atk !== card.currentAtk) {\n            result.atk = card.currentAtk;\n        }\n\n        if (card.def !== card.def) {\n            result.atk = card.currentAtk;\n        }\n\n        if (card.position !== \"faceup-attack\") {\n            result.position = card.position;\n        }\n\n        if (card.materials.length > 0) {\n            result.materials = card.materials.map(materialCard => materialCard.id);\n        }\n\n        return result;\n    }\n}","import { COMMANDS_BY_NAME, DrawFromDeckCommand } from \"../commands\";\nimport { Command } from \"../types/commands\";\nimport { PlayerField, YGOProps } from \"../types/types\";\nimport { EventBus } from \"../utils/event-bus\";\nimport { YGODuelLog } from \"./YGODuelLog\";\nimport { YGOGameState } from \"./YGOGameState\";\nimport { YGOReplayUtils } from \"./YGOReplayUtils\";\n\nexport class YGOCore {\n    // private\n    private commandId: number;\n    // public\n    public props: YGOProps;\n    public state: YGOGameState;\n    public commands: Command[];\n    public commandIndex: number = -1;\n    public duelLog: YGODuelLog;\n    public events: EventBus<any>;\n\n    constructor(props: YGOProps) {\n        this.props = props;\n        this.state = new YGOGameState(props);\n        this.duelLog = new YGODuelLog();\n        this.events = new EventBus();\n        this.commands = this.createYGOCommands(props.commands);\n        this.commandId = 0;\n    }\n\n    start() {\n        if (this.commands.length === 0) {\n            this.props.players.forEach((_, player) => {\n                const field = this.getField(player);\n                const numberOfCards = field.initialHandSize;\n                if (numberOfCards > 0 && field.hand.length === 0) {\n                    this.exec(new DrawFromDeckCommand({\n                        player,\n                        numberOfCards\n                    }));\n                }\n            });\n        }\n    }\n\n    exec(command: Command): Command {\n        if (this.hasNextCommand()) {\n            this.commands.splice(this.commandIndex + 1, this.commands.length - this.commandIndex);\n        }\n        this.commandIndex = this.commands.length;\n        this.commands.push(command);\n        command.init(this);\n        command.exec();\n        return command;\n    }\n\n    peek(): Command | null {\n        return this.commands.length > 0 ? this.commands[this.commands.length - 1] : null;\n    }\n\n    redo(): Command | null {\n        if (!this.hasNextCommand()) return null;\n        this.commandIndex++;\n        const cmdToRedo = this.commands[this.commandIndex];\n        cmdToRedo.exec();\n\n        this.duelLog.onLogsUpdated();\n\n        return cmdToRedo;\n    }\n\n    undo(): Command | null {\n        if (!this.hasPrevCommand()) return null;\n\n        const cmdToUndo = this.commands[this.commandIndex];\n\n        this.duelLog.removeCommand(cmdToUndo);\n        cmdToUndo.undo();\n        this.commandIndex--;\n        this.duelLog.onLogsUpdated();\n\n        return cmdToUndo;\n    }\n\n    goToCommand(command: Command): boolean {\n\n        const commandIndex = this.commands.findIndex(c => c === command);\n\n        if (commandIndex === -1) return false;\n\n        if (commandIndex === this.commandIndex) return true;\n\n        if (commandIndex > this.commandIndex) {\n            while (this.commandIndex !== commandIndex && this.hasNextCommand()) {\n                this.redo();\n            }\n            return true;\n        } else {\n            while (this.commandIndex !== commandIndex && this.hasPrevCommand()) {\n                this.undo();\n            }\n            return true;\n        }\n    }\n\n    hasNextCommand() {\n        return this.commands.length - 1 > this.commandIndex;\n    }\n\n    hasPrevCommand() {\n        return this.commandIndex >= 0;\n    }\n\n    getNextCommandId() {\n        return ++this.commandId;\n    }\n\n    getReplayData() {\n\n        while (this.hasNextCommand()) {\n            this.redo();\n        }\n\n        return YGOReplayUtils.createReplayData(this);\n    }\n\n    getField(player: number): PlayerField {\n        return this.state.fields[player];\n    }\n\n    private createYGOCommands(commands?: any[]) {\n        if (Array.isArray(commands)) {\n            console.log(\"COMMANDS\");\n            console.log(COMMANDS_BY_NAME);\n            console.log(\"COMMANDS\", Object.keys(COMMANDS_BY_NAME));\n            const loadedCommands = commands.map(cmd => {\n                const CommandClass = COMMANDS_BY_NAME[cmd.type];\n\n                if (!CommandClass) throw new Error(`Command \"${cmd.type}\" dont exists!`);\n\n                const command = new (CommandClass as any)(cmd.data)\n                command.init(this);\n                return command;\n            });\n            return loadedCommands;\n        }\n        return [];\n    }\n}","import { Commands } from './commands';\n\nexport * from './game/YGOCore';\nexport * from './game/YGODuelLog';\nexport * from './game/YGOGameUtils';\nexport * from './types/duel-events';\n\nexport const YGOCommands = Commands;"],"names":["BaseCommand","constructor","this","commandId","parent","init","ygo","YGO","getNextCommandId","getCommandId","_a","execChildCommand","command","exec","undoChildCommand","undo","undoMultipleChildCommand","commands","i","length","execMultipleChildCommand","isValid","toJSON","self","data","type","name","YGODuelEvents","CardBaseType","LogType","ActivateCardCommand","super","card","state","getCardById","id","originZone","zone","removeCard","setCard","console","log","prevPosition","position","duelLog","dispatch","player","Activate","YGOGameUtils","isLinkMonster","typeline","includes","isXYZMonter","isPendulumCard","frameType","isFaceUp","isFaceDown","hasLinkMonstersInField","field","monsterZone","some","extraMonsterZone","hasXyzMonstersInField","getPlayerIndexFromZone","createZone","undefined","getZoneInfo","args","split","playerIndex","zoneId","Number","endsWith","substring","zonePosition","getCardBaseType","startsWith","EffectMonster","Spell","RitualMonster","Trap","FusionMonster","SynchroMonster","XYZMonster","LinkMonster","NormalMonster","getCardsBaseType","cards","map","c","toSortedCards","sortCards","cardsToSort","cardsWeights","j","shuffleCards","positions","Array","index","Math","floor","random","temp","YGOUtils","parseMainDeck","mainDeck","parseCard","isMainDeckCard","parseExtraDeck","extraDeck","extra","owner","originalOwner","materials","getCardsInGame","fields","Map","has","set","getOverlayZone","zoneIndex","initializePlayersFields","props","shuffleDecks","options","cardIndex","lp","hand","initialHandSize","initialMainDeckOrder","spellTrapZone","fieldZone","graveyard","banishedZone","players","_","forEach","mainDeckOrder","swapIndex","getFieldsAsString","push","field1","getField","field2","join","_b","MoveCardCommand","materialsToGY","sendMaterialsToGy","overlayZone","material","SendToGY","reason","moveCard","BanishCommand","banishCommand","DestroyCardCommand","moveCardCommand","DrawFromDeckCommand","numberOfCards","pop","DrawCardFromDeck","newCards","reverse","cardInHandIndex","findIndex","splice","SendCardToGYCommand","LinkSummonCommand","LinkSummon","MillFromDeckCommand","max","min","NormalSummonCommand","RevealCommand","Reveal","SetCardCommand","SetMonsterCommand","ShuffleDeckCommand","cardPositions","Shuffle","SpecialSummonCommand","ToDeckCommand","getCommandType","isTopCard","getDeckIndex","deckIndex","shuffle","ToExtraDeckCommand","ToHandCommand","handIndex","TributeSetCommand","tributes","cmd","TributeSummonCommand","XYZAttachMaterialCommand","getCardFromZone","materialCardReference","XYZSummon","indexOf","XYZDetachMaterialCommand","materialIndex","XYZDetachMaterial","XYZSummonCommand","XYZMaterialsMove","XYZOverlay","Commands","COMMANDS_BY_NAME","EventBus","events","on","event","listener","get","listeners","off","filter","l","clear","delete","clearAll","YGODuelLog","logs","onLogsUpdated","peek","peekCommand","removeCommand","YGOGameState","cardsInGame","find","Error","moveCardById","cardId","isPendulum","unshift","weight","weight2","gyIndex","gy","banishZone","getCardData","shuffleDeck","deck","getAvailableZones","fieldZones","result","YGOReplayUtils","createReplayData","playerData","endField","playerEndField","getMonsterCardInfo","atk","currentAtk","def","materialCard","YGOCore","commandIndex","createYGOCommands","start","hasNextCommand","redo","cmdToRedo","hasPrevCommand","cmdToUndo","goToCommand","getReplayData","isArray","Object","keys","CommandClass","YGOCommands"],"mappings":"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"}